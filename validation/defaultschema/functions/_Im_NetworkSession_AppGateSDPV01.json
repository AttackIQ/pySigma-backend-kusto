{"_Im_NetworkSession_AppGateSDPV01": {"body": "let parser = (\r\n  starttime:datetime=datetime(null), \r\n  endtime:datetime=datetime(null), \r\n  srcipaddr_has_any_prefix:dynamic=dynamic([]), \r\n  dstipaddr_has_any_prefix:dynamic=dynamic([]), \r\n  ipaddr_has_any_prefix:dynamic=dynamic([]),\r\n  dstportnumber:int=int(null), \r\n  hostname_has_any:dynamic=dynamic([]), \r\n  dvcaction:dynamic=dynamic([]), \r\n  eventresult:string='*', \r\n  disabled:bool=false\r\n) \r\n{\r\n  let DirectionLookup = datatable (direction:string, NetworkDirection:string) \r\n  [\r\n    'up', 'Inbound',\r\n    'down', 'Outbound'\r\n  ];\r\n  let ActionLookup = datatable (DvcOriginalAction:string, DvcAction:string, EventSeverity:string, EventResult:string)\r\n  [\r\n    'allow', 'Allow', 'Informational', 'Success',\r\n    'drop', 'Drop', 'Low', 'Failure',\r\n    'reject', 'Deny', 'Low', 'Failure',\r\n    'block', 'Deny', 'Low', 'Failure',\r\n    'block_report', 'Deny', 'Low', 'Failure',\r\n    'allow_report', 'Allow', 'Informational', 'Success'\r\n  ];\r\n  let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \r\n  let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix); \r\n  let ip_any = set_union(srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix);    \r\n  let ip_access_events = \r\n    Syslog\r\n    | where (isnull(starttime) or TimeGenerated>=starttime) \r\n      and (isnull(endtime) or TimeGenerated<=endtime) \r\n      and not(disabled)\r\n      and (array_length(hostname_has_any) == 0)\r\n      and ProcessName in (\"cz-sessiond\", \"cz-vpnd\")\r\n      and SyslogMessage has_all (\"[AUDIT]\",'\"event_type\":\"ip_access\"')\r\n    | project TimeGenerated, SyslogMessage, Computer\r\n  ;\r\n  let tcpupd_success = \r\n    ip_access_events\r\n    | where \r\n      SyslogMessage has '\"rule_name\"'\r\n      and SyslogMessage has_any ('\"protocol\":\"UDP\"','\"protocol\":\"TCP\"') \r\n      and (array_length(ip_any)==0 or has_any_ipv4_prefix(SyslogMessage,ip_any)) \r\n      and (isnull(dstportnumber) or SyslogMessage has (strcat('\"destination_port\":', tostring(dstportnumber)))) \r\n      and (eventresult=='*' or iff(eventresult=='Success', SyslogMessage has 'allow', SyslogMessage has_any('drop', 'reject','block')))\r\n    | parse SyslogMessage with * '\"action\":\"' DvcOriginalAction:string '\",' * \r\n    | lookup ActionLookup on DvcOriginalAction\r\n    | where \r\n      (array_length(dvcaction) == 0 or DvcAction in (dvcaction))\r\n      and (eventresult=='*' or EventResult == eventresult)\r\n    | parse-where SyslogMessage with \r\n        *\r\n        '\"client_ip\":\"' SrcIpAddr:string '\",' *\r\n        '\"client_port\":' SrcPortNumber:int ',' *\r\n        '\"destination_ip\":\"' DstIpAddr:string '\",' *\r\n        '\"destination_port\":' DstPortNumber:int ',' *\r\n        '\"direction\":\"' direction:string '\",' * \r\n        '\"distinguished_name_device_id\":\"' SrcDvcId:string '\",' *\r\n        '\"distinguished_name_user\":\"' SrcUsername:string '\",' *\r\n        '\"entitlement_token_id\":\"' NetworkSessionId:string '\",' *\r\n        '\"packet_size\":' SrcBytes:long ',' *\r\n        '\"protocol\":\"' NetworkProtocol:string '\",' *          \r\n        '\"rule_name\":\"' NetworkRuleName:string '\",' *  \r\n        '\"source_ip\":\"' SrcNatIpAddr:string '\",' *\r\n        '\"source_port\":' SrcNatPortNumber:int ',' * \r\n        '\"version\":' EventProductVersion:string '}' *\r\n    ;\r\n  let tcpupd_fail = \r\n    ip_access_events\r\n    | where \r\n      SyslogMessage has'\"drop-reason\"'\r\n      and SyslogMessage has_any ('\"protocol\":\"UDP\"','\"protocol\":\"TCP\"') \r\n      and (array_length(ip_any)==0 or has_any_ipv4_prefix(SyslogMessage,ip_any)) \r\n      and (isnull(dstportnumber) or SyslogMessage has (strcat('\"destination_port\":', tostring(dstportnumber)))) \r\n      and (eventresult=='*' or iff(eventresult=='Success', SyslogMessage has 'allow', SyslogMessage has_any('drop', 'reject','block')))\r\n    | parse SyslogMessage with * '\"action\":\"' DvcOriginalAction:string '\",' * \r\n    | lookup ActionLookup on DvcOriginalAction\r\n    | where \r\n      (array_length(dvcaction) == 0 or DvcAction in (dvcaction))\r\n      and (eventresult=='*' or EventResult == eventresult)\r\n    | parse-where SyslogMessage with \r\n        *\r\n        '\"client_ip\":\"' SrcIpAddr:string '\",' *\r\n        '\"client_port\":' SrcPortNumber:int ',' *\r\n        '\"destination_ip\":\"' DstIpAddr:string '\",' *\r\n        '\"destination_port\":' DstPortNumber:int ',' *\r\n        '\"direction\":\"' direction:string '\",' * \r\n        '\"distinguished_name_device_id\":\"' SrcDvcId:string '\",' *\r\n        '\"distinguished_name_user\":\"' SrcUsername:string '\",' *\r\n        '\"drop-reason\":\"' EventOriginalResultDetails:string '\",' *\r\n        '\"entitlement_token_id\":\"' NetworkSessionId:string '\",' *\r\n        '\"packet_size\":' SrcBytes:long ',' *\r\n        '\"protocol\":\"' NetworkProtocol:string '\",' *\r\n        '\"source_ip\":\"' SrcNatIpAddr:string '\",' *\r\n        '\"source_port\":' SrcNatPortNumber:int ',' * \r\n        '\"version\":' EventProductVersion:string '}' *\r\n      ;\r\n  let icmp_success = \r\n    ip_access_events\r\n    | where \r\n      SyslogMessage has '\"ICMP\"'\r\n      and (array_length(ip_any)==0 or has_any_ipv4_prefix(SyslogMessage,ip_any)) \r\n      and (isnull(dstportnumber)) \r\n      and (eventresult=='*' or iff(eventresult=='Success', SyslogMessage has 'allow', SyslogMessage has_any('drop', 'reject','block')))\r\n    | parse SyslogMessage with * '\"action\":\"' DvcOriginalAction:string '\",' * \r\n    | lookup ActionLookup on DvcOriginalAction\r\n    | where \r\n      (array_length(dvcaction) == 0 or DvcAction in (dvcaction))\r\n      and (eventresult=='*' or EventResult == eventresult)\r\n    | parse-where SyslogMessage with \r\n        *\r\n        '\"action\":\"' DvcOriginalAction:string '\",' * \r\n        '\"client_ip\":\"' SrcIpAddr:string '\",' *\r\n        '\"client_port\":' SrcPortNumber:int ',' *\r\n        '\"destination_ip\":\"' DstIpAddr:string '\",' *\r\n        '\"direction\":\"' direction:string '\",' * \r\n        '\"distinguished_name_device_id\":\"' SrcDvcId:string '\",' *\r\n        '\"distinguished_name_user\":\"' SrcUsername:string '\",' *\r\n        '\"entitlement_token_id\":\"' NetworkSessionId:string '\",' *\r\n        '\"icmp_code\":' NetworkIcmpSubCode:int ',' *\r\n        '\"icmp_type\":' NetworkIcmpCode:int ',' *  \r\n        '\"packet_size\":' SrcBytes:long ',' *\r\n        '\"protocol\":\"' NetworkProtocol:string '\",' *          \r\n        '\"rule_name\":\"' NetworkRuleName:string '\",' *  \r\n        '\"source_ip\":\"' SrcNatIpAddr:string '\",' *\r\n        '\"version\":' EventProductVersion:string '}' *\r\n    ;\r\n  union  tcpupd_success, tcpupd_fail, icmp_success \r\n  | extend \r\n    temp_isSrcMatch=has_any_ipv4_prefix(SrcIpAddr,src_or_any), \r\n    temp_isDstMatch=has_any_ipv4_prefix(DstIpAddr,dst_or_any)\r\n  | extend ASimMatchingIpAddr = case(\r\n          array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, \"-\" // match not requested: probably most common case\r\n          , (temp_isSrcMatch and temp_isDstMatch), \"Both\" // has to be checked before the individual \r\n          , temp_isSrcMatch, \"SrcIpAddr\"\r\n          , temp_isDstMatch, \"DstIpAddr\"\r\n          , \"No match\"\r\n  )\r\n  | project-away temp*\r\n  | where ASimMatchingIpAddr != \"No match\"\r\n  | parse SyslogMessage with \r\n      *\r\n      '\"country_name\":\"' SrcGeoCountry:string '\",' *\r\n      '\"lat\":' SrcGeoLatitude:real ',' *        \r\n      '\"lon\":' SrcGeoLongitude:real '}' *\r\n  | parse SyslogMessage with \r\n       *\r\n      '\"city_name\":\"' SrcGeoCity:string '\",' *\r\n      '\"region_name\":\"' SrcGeoRegion:string '\",' *\r\n  | extend \r\n      SrcDvcIdType = 'AppGateId',\r\n      SrcUsernameType = 'UPN'\r\n  // -- Event fields\r\n  | project-rename \r\n      DvcHostname = Computer\r\n  | extend \r\n      EventCount = int(1),\r\n      EventEndTime = TimeGenerated,\r\n      EventStartTime = TimeGenerated,\r\n      EventSchema = 'NetworkSession',\r\n      EventSchemaVersion = '0.2.3',\r\n      EventVendor = 'AppGate',\r\n      EventProduct = 'SDP',\r\n      EventType = 'NetworkSession'\r\n  | lookup DirectionLookup on direction\r\n  // -- Aliases\r\n  | extend \r\n      Src = SrcIpAddr,\r\n      Dst = DstIpAddr,\r\n      Dvc = DvcHostname,\r\n      SessionId = NetworkSessionId,\r\n      IpAddr = SrcIpAddr,\r\n      Rule = NetworkRuleName\r\n  | project-away \r\n      SyslogMessage, direction\r\n};\r\nparser (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, dstipaddr_has_any_prefix=dstipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, dstportnumber=dstportnumber, hostname_has_any=hostname_has_any, dvcaction=dvcaction, eventresult=eventresult, disabled=disabled)\r\n", "params": "starttime:datetime = datetime(null), endtime:datetime = datetime(null), srcipaddr_has_any_prefix:dynamic = dynamic([]), dstipaddr_has_any_prefix:dynamic = dynamic([]), ipaddr_has_any_prefix:dynamic = dynamic([]), dstportnumber:int = int(null), hostname_has_any:dynamic = dynamic([]), dvcaction:dynamic = dynamic([]), eventresult:string = '*', disabled:bool = false"}}