{"_Im_NetworkSession_NativeV02": {"body": "let parser = (\r\n  starttime:datetime=datetime(null), \r\n  endtime:datetime=datetime(null), \r\n  srcipaddr_has_any_prefix:dynamic=dynamic([]), \r\n  dstipaddr_has_any_prefix:dynamic=dynamic([]), \r\n  ipaddr_has_any_prefix:dynamic=dynamic([]), \r\n  dstportnumber:int=int(null), \r\n  hostname_has_any:dynamic=dynamic([]), \r\n  dvcaction:dynamic=dynamic([]), \r\n  eventresult:string='*', \r\n  disabled:bool=false)\r\n{\r\n  let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \r\n  let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix);\r\n  ASimNetworkSessionLogs  \r\n  | where (isnull(starttime) or TimeGenerated>=starttime)\r\n    and (isnull(endtime) or TimeGenerated<=endtime)\r\n    and not(disabled)\r\n    and (isnull(dstportnumber) or DstPortNumber==dstportnumber)\r\n    and (array_length(dvcaction) == 0 or DvcAction in (dvcaction))\r\n    and (eventresult == \"*\" or eventresult==EventResult)\r\n  | extend temp_SrcMatch=has_any_ipv4_prefix(SrcIpAddr,src_or_any)\r\n         , temp_DstMatch=has_any_ipv4_prefix(DstIpAddr,dst_or_any)\r\n  | extend ASimMatchingIpAddr=case(\r\n      array_length(src_or_any) == 0 and array_length(dst_or_any) == 0 ,\"-\",\r\n      temp_SrcMatch and temp_DstMatch, \"Both\",\r\n      temp_SrcMatch, \"SrcIpAddr\",\r\n      temp_DstMatch, \"DstIpAddr\",\r\n      \"No match\"\r\n    )\r\n  | where ASimMatchingIpAddr != \"No match\" \r\n  | project-away temp_*\r\n  |extend ASimMatchingHostname = case(\r\n      array_length(hostname_has_any) == 0 ,\"\",\r\n      SrcHostname has_any(hostname_has_any), \"SrcHostname\",\r\n      DstHostname has_any(hostname_has_any), \"DstHostname\",\r\n      \"No match\"\r\n    )\r\n  | where ASimMatchingHostname != \"No match\"\r\n  | project-rename\r\n        EventUid = _ItemId\r\n  | extend \r\n      EventSchema = \"NetworkSession\",\r\n      DvcScopeId = iff(isempty(DvcSubscriptionId), _SubscriptionId, DvcSubscriptionId)\r\n  //  -- Aliases\r\n  | extend\r\n      EventEndTime = iff (isnull(EventEndTime), TimeGenerated, EventEndTime),\r\n      EventStartTime = iff (isnull(EventEndTime), TimeGenerated, EventStartTime),\r\n      Dvc = iff (isempty(Dvc), coalesce (DvcFQDN, DvcHostname, DvcIpAddr, DvcId, _ResourceId), Dvc),\r\n      Dst = coalesce (DstFQDN, DstHostname, DstIpAddr, DstDvcId),\r\n      Src = coalesce (SrcFQDN, SrcHostname, SrcIpAddr, SrcDvcId),\r\n      DvcInterface = iff(isempty(DvcInterface), coalesce(DvcInboundInterface, DvcOutboundInterface), DvcInterface),\r\n      Hostname = iff  (EventType == \"EndpointNetworkSession\" and NetworkDirection == (\"Inbound\"), SrcHostname, DstHostname),\r\n      IpAddr = iff  (EventType == \"EndpointNetworkSession\" and NetworkDirection == (\"Inbound\"), DstIpAddr, SrcIpAddr),\r\n      Rule = coalesce(NetworkRuleName, tostring(NetworkRuleNumber)),\r\n      Duration = NetworkDuration,\r\n      SessionId = NetworkSessionId,\r\n      User = DstUsername,\r\n      InnerVlanId = SrcVlanId,\r\n      OuterVlanId = DstVlanId\r\n  | project-away\r\n        TenantId, SourceSystem, DvcSubscriptionId, _SubscriptionId, _ResourceId\r\n};\r\nparser (\r\n  starttime=starttime, \r\n  endtime=endtime, \r\n  srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, \r\n  dstipaddr_has_any_prefix=dstipaddr_has_any_prefix, \r\n  ipaddr_has_any_prefix=ipaddr_has_any_prefix, \r\n  dstportnumber=dstportnumber, \r\n  hostname_has_any=hostname_has_any, \r\n  dvcaction=dvcaction,\r\n  eventresult=eventresult,\r\n  disabled=disabled\r\n)", "params": "starttime:datetime = datetime(null), endtime:datetime = datetime(null), srcipaddr_has_any_prefix:dynamic = dynamic([]), dstipaddr_has_any_prefix:dynamic = dynamic([]), ipaddr_has_any_prefix:dynamic = dynamic([]), dstportnumber:int = int(null), hostname_has_any:dynamic = dynamic([]), dvcaction:dynamic = dynamic([]), eventresult:string = '*', disabled:bool = false"}}