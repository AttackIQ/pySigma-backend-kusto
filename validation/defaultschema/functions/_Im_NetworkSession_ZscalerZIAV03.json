{"_Im_NetworkSession_ZscalerZIAV03": {"body": "let ActionLookup = datatable (DvcOriginalAction: string, DvcAction:string) [\r\n  // See https://help.zscaler.com/zia/firewall-insights-logs-filters\r\n  'Allow','Allow',\r\n  'Allow due to insufficient app data','Allow',\r\n  'Block/Drop','Drop',\r\n  'Block/ICMP','Drop ICMP',\r\n  'Block/Reset', 'Reset',\r\n  'IPS Drop', 'Drop',\r\n  'IPS Reset', 'Reset',\r\n  // Observed in real world events\r\n  'Block ICMP', 'Drop ICMP',\r\n  'Drop', 'Drop'\r\n];\r\nlet parser=  \r\n  (starttime:datetime=datetime(null)\r\n  , endtime:datetime=datetime(null)\r\n  , srcipaddr_has_any_prefix:dynamic=dynamic([])\r\n  , dstipaddr_has_any_prefix:dynamic=dynamic([])\r\n  , ipaddr_has_any_prefix:dynamic=dynamic([])\r\n  , dstportnumber:int=int(null)\r\n  , hostname_has_any:dynamic=dynamic([])\r\n  , dvcaction:dynamic=dynamic([])\r\n  , eventresult:string='*'\r\n  , disabled:bool=false) {\r\n  let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \r\n  let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix); \r\nCommonSecurityLog \r\n| where (isnull(starttime) or TimeGenerated >= starttime)\r\n   and  (isnull(endtime) or TimeGenerated <= endtime)\r\n| where not(disabled)\r\n| where DeviceVendor == \"Zscaler\"\r\n| where DeviceProduct == \"NSSFWlog\"\r\n|where\r\n  (array_length(hostname_has_any) == 0) // No host name information, so always filter out if hostname filter used. \r\n  and   (isnull(dstportnumber) or dstportnumber == DestinationPort) \r\n| extend temp_SrcMatch=has_any_ipv4_prefix(SourceIP,src_or_any), temp_DstMatch=has_any_ipv4_prefix(DestinationIP,dst_or_any)\r\n| extend ASimMatchingIpAddr=case(\r\n                                array_length(src_or_any) == 0 and array_length(dst_or_any) == 0 ,\"-\",\r\n                                temp_SrcMatch and temp_DstMatch, \"Both\",\r\n                                temp_SrcMatch, \"SrcIpAddr\",\r\n                                temp_DstMatch, \"DstIpAddr\",\r\n                                \"No match\"\r\n                            )\r\n// -- Pre-filtering\r\n| where ASimMatchingIpAddr != \"No match\"\r\n| project-away temp_*\r\n| project-rename DvcOriginalAction = DeviceAction\r\n| lookup ActionLookup on DvcOriginalAction \r\n| where array_length(dvcaction) == 0 or DvcAction in (dvcaction)\r\n| extend EventResult = iff (DvcOriginalAction == \"Allow\", \"Success\", \"Failure\") \r\n| where (eventresult=='*' or EventResult == eventresult)\r\n// -- Event fields\r\n| extend \r\n  EventStartTime=TimeGenerated, \r\n  EventVendor = \"Zscaler\", \r\n  EventProduct = \"ZIA Firewall\", \r\n  EventSchema = \"NetworkSession\", \r\n  EventSchemaVersion=\"0.2.3\", \r\n  EventType = 'NetworkSession', \r\n  EventSeverity = 'Informational',\r\n  EventEndTime=TimeGenerated \r\n| project-rename\r\n  DvcHostname = Computer, \r\n  EventProductVersion = DeviceVersion, \r\n  NetworkProtocol = Protocol, \r\n  DstIpAddr = DestinationIP, \r\n  DstPortNumber = DestinationPort, \r\n  DstNatIpAddr = DestinationTranslatedAddress, \r\n  DstNatPortNumber = DestinationTranslatedPort, \r\n  DstAppName = DeviceCustomString3, \r\n  NetworkApplicationProtocol = DeviceCustomString2, \r\n  SrcIpAddr = SourceIP, \r\n  SrcPortNumber = SourcePort, \r\n  SrcUsername = SourceUserName,\r\n  SrcNatIpAddr= SourceTranslatedAddress, \r\n  SrcNatPortNumber = SourceTranslatedPort, \r\n  SrcUserDepartment = DeviceCustomString1,  // Not in standard schema\r\n  SrcUserLocation = SourceUserPrivileges,  // Not in standard schema\r\n  ThreatName = DeviceCustomString6, \r\n  ThreatCategory = DeviceCustomString5, \r\n  NetworkRuleName = Activity \r\n// -- Calculated fields\r\n| extend\r\n  // -- Adjustment to support both old and new CSL fields.\r\n  EventCount=coalesce(\r\n    toint(column_ifexists(\"fieldDeviceCustomNumber2\", int(null))), \r\n    toint(column_ifexists(\"DeviceCustomNumber2\",int(null)))\r\n  ),\r\n  NetworkDuration = coalesce(\r\n    toint(column_ifexists(\"fieldDeviceCustomNumber1\", int(null))),\r\n    toint(column_ifexists(\"DeviceCustomNumber1\",int(null)))\r\n  ),\r\n  ThreatCategory = iff(DeviceCustomString4 == \"None\", \"\", ThreatCategory),\r\n  SrcUsername = iff (SrcUsername == SrcUserLocation, \"\", SrcUsername),\r\n  DstBytes = tolong(ReceivedBytes), \r\n  SrcBytes = tolong(SentBytes)\r\n// -- Enrichment\r\n| extend\r\n  DstAppType = \"Service\", \r\n  SrcUsernameType = \"UPN\" \r\n// -- Aliases\r\n| extend\r\n  Dvc = DvcHostname,\r\n  User = SrcUsername,\r\n  IpAddr = SrcIpAddr,\r\n  Src = SrcIpAddr,\r\n  Dst = DstIpAddr,\r\n  Rule = NetworkRuleName,\r\n  Duration = NetworkDuration\r\n| project-away \r\n  DeviceCustom*\r\n};\r\nparser (starttime, endtime, srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix, dstportnumber, hostname_has_any, dvcaction, eventresult, disabled)", "params": "starttime:datetime = datetime(null), endtime:datetime = datetime(null), srcipaddr_has_any_prefix:dynamic = dynamic([]), dstipaddr_has_any_prefix:dynamic = dynamic([]), ipaddr_has_any_prefix:dynamic = dynamic([]), dstportnumber:int = int(null), hostname_has_any:dynamic = dynamic([]), dvcaction:dynamic = dynamic([]), eventresult:string = '*', disabled:bool = false"}}