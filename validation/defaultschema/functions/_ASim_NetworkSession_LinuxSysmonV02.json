{"_ASim_NetworkSession_LinuxSysmonV02": {"body": "let DirectionNetworkEvents =\r\n Syslog | where not(disabled)\r\n | where SyslogMessage has_all ('<Provider Name=\"Linux-Sysmon\"', '<EventID>3</EventID>')\r\n | project-away ProcessName, ProcessID\r\n | parse SyslogMessage with * '<Data Name=\"SourceIp\">' SrcIpAddr:string '</Data>' *\r\n | extend outbound = (SrcIpAddr == HostIP or SrcIpAddr in ('127.0.0.1', '0.0.0.0'))\r\n ;\r\n let parser = (T: (SyslogMessage: string)) {\r\n   T \r\n   | parse SyslogMessage with \r\n       *\r\n       '<EventRecordID>' EventOriginalUid:string '</EventRecordID>'\r\n       *\r\n       '<Computer>' SysmonComputer:string '</Computer>'\r\n       *\r\n       '<Data Name=\"RuleName\">' RuleName:string '</Data>'\r\n       '<Data Name=\"UtcTime\">' EventEndTime:datetime '</Data>'\r\n       '<Data Name=\"ProcessGuid\">{' ProcessGuid:string '}</Data>'\r\n       '<Data Name=\"ProcessId\">' ProcessId:string '</Data>'\r\n       '<Data Name=\"Image\">' Process:string '</Data>'\r\n       '<Data Name=\"User\">' User:string '</Data>'\r\n       '<Data Name=\"Protocol\">' Protocol:string '</Data>' // -- source is lowercase\r\n       '<Data Name=\"Initiated\">' Initiated:bool '</Data>' \r\n       '<Data Name=\"SourceIsIpv6\">' SourceIsIpv6:bool '</Data>'\t\t\r\n       '<Data Name=\"SourceIp\">' * '</Data>'\r\n       '<Data Name=\"SourceHostname\">' SrcHostname:string '</Data>'\r\n       '<Data Name=\"SourcePort\">' SrcPortNumber:int '</Data>'\r\n       '<Data Name=\"SourcePortName\">' SrcPortName:string '</Data>'\r\n       '<Data Name=\"DestinationIsIpv6\">' DestinationIsIpv6:bool '</Data>'\r\n       '<Data Name=\"DestinationIp\">' DstIpAddr:string '</Data>'\r\n       '<Data Name=\"DestinationHostname\">' DstHostname:string '</Data>'\r\n       '<Data Name=\"DestinationPort\">' DstPortNumber:int '</Data>'\r\n       '<Data Name=\"DestinationPortName\">' DstPortName:string '</Data>'\r\n       *\r\n };\r\n let OutboundNetworkEvents = \r\n   DirectionNetworkEvents\r\n   | where outbound\r\n   | invoke parser ()\r\n   | extend\r\n     SrcUsernameType = 'Simple',\r\n     SrcUsername = User,\r\n     SrcProcessId = ProcessId, \r\n     SrcProcessGuid = ProcessGuid,\r\n     SrcProcessName = Process,\r\n     SrcAppName = Process,\r\n     SrcAppType = 'Process'\r\n   | project-away SyslogMessage\r\n ;\r\n   let InboundNetworkEvents = \r\n       DirectionNetworkEvents\r\n       | where not(outbound)\r\n       | invoke parser ()\r\n       | extend\r\n       DstUsernameType = 'Simple',\r\n       DstUsername = User,\r\n       DstProcessId = ProcessId, \r\n       DstProcessGuid = ProcessGuid,\r\n       DstProcessName = Process,\r\n       DstAppName = Process,\r\n       DstAppType = 'Process' \r\n       | project-away SyslogMessage\r\n   ; \r\n   let SysmonForLinuxNetwork=\r\n       union OutboundNetworkEvents, InboundNetworkEvents\r\n       | extend \r\n           EventType = 'NetworkSession',\r\n           EventStartTime = EventEndTime,\r\n           EventCount = int(1),\r\n           EventVendor = 'Microsoft',\r\n           EventSchemaVersion = '0.2.0',\r\n           EventSchema = 'NetworkSession', \r\n           EventProduct = 'Sysmon for Linux',\r\n           EventResult = 'Success',\r\n           EventSeverity = 'Informational',\r\n           DvcOs = 'Linux',\r\n           Protocol = toupper(Protocol),\r\n           EventOriginalType = '3' // Set with a constant value to avoid parsing\r\n       | project-rename \r\n           DvcIpAddr = HostIP,\r\n           DvcHostname = SysmonComputer\r\n       | extend // aliases\r\n           Dvc = DvcHostname,\r\n           Hostname = DstHostname,\r\n           IpAddr = SrcIpAddr,\r\n           Src = SrcIpAddr,\r\n           Dst = DstIpAddr\r\n   ;\r\n   SysmonForLinuxNetwork", "params": "disabled:bool = false"}}