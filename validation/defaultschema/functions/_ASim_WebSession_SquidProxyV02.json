{"_ASim_WebSession_SquidProxyV02": {"body": "let parser=(disabled:bool=false){\r\nSquidProxy_CL | where not(disabled)\r\n  | extend AccessRawLog = extract_all(@\"^(\\d+\\.\\d+)\\s+(\\d+)\\s(\\S+)\\s([A-Z_]+)\\/(\\d+)\\s(\\d+)\\s([A-Z]+)\\s(\\S+)\\s(\\S+)\\s([A-Z_]+)\\/(\\S+)\\s(\\S+)\",dynamic([1,2,3,4,5,6,7,8,9,10,11,12]),RawData)[0]\r\n  | extend\r\n    EventEndTime = unixtime_milliseconds_todatetime(todouble(tostring(AccessRawLog[0]))*1000), \r\n    NetworkDuration = toint(AccessRawLog[1]), \r\n    SrcIpAddr = tostring(AccessRawLog[2]), \r\n    EventOriginalResultDetails = strcat (tostring(AccessRawLog[3]), \";\", PeerStatus = tostring(AccessRawLog[9])), \r\n    EventResultDetails = tostring(AccessRawLog[4]), \r\n    DstBytes = toint(AccessRawLog[5]), \r\n    HttpRequestMethod = tostring(AccessRawLog[6]), \r\n    // -- Squid URL might be shortened by including ellipsis (...) instead of a section in the middle. This may impact the hostname part as well.\r\n    Url = tostring(AccessRawLog[7]), \r\n    SrcUsername = tostring(AccessRawLog[8]), \r\n    DstIpAddr = tostring(AccessRawLog[10]), \r\n    HttpContentType = tostring(AccessRawLog[11]) \r\n  // -- Constant fields\r\n  | extend \r\n    EventCount = int(1), \r\n    EventProduct = 'Squid Proxy', \r\n    EventVendor = 'Squid', \r\n    EventSchema = 'WebSession', \r\n    EventSchemaVersion = '0.2.3', \r\n    EventType = 'HTTPsession' \r\n  // -- Value normalization\r\n  | extend\r\n    UsernameType = \"Unknown\",\r\n    SrcUsername = iff (SrcUsername == \"-\", \"\", SrcUsername), \r\n    HttpContentType = iff (HttpContentType in (\":\", \"-\"), \"\", HttpContentType), \r\n    EventResult = iff (EventOriginalResultDetails has_any ('DENIED', 'INVALID', 'FAIL', 'ABORTED','TIMEOUT') or toint(EventResultDetails) >= 400, \"Failure\", \"Success\"),\r\n    DstIpAddrIsHost = DstIpAddr matches regex @\"^[^\\:]*[a-zA-Z]$\"\r\n  | extend \r\n    DstFQDN = iif (DstIpAddrIsHost, DstIpAddr, tostring(parse_url(Url)[\"Host\"])),\r\n    DstIpAddr = iif (DstIpAddr == \"-\" or DstIpAddrIsHost, \"\", DstIpAddr)\r\n  | extend \r\n    EventSeverity = iff(EventResult == \"Success\", \"Informational\", \"Low\"),\r\n    DstFQDNparts = split (DstFQDN, \".\")\r\n  | extend    \r\n    DstHostname = tostring(DstFQDNparts[0]),\r\n    DstDomain = strcat_array(array_slice(DstFQDNparts,1,-1),\".\"),\r\n    DstDomainType = \"FQDN\"\r\n // -- aliases\r\n  | extend \r\n    EventStartTime = EventEndTime,\r\n    Duration = NetworkDuration,\r\n    HttpStatusCode = EventResultDetails,\r\n    User = SrcUsername,\r\n    IpAddr = SrcIpAddr,\r\n    Src = SrcIpAddr,\r\n    Dst = DstHostname,\r\n    Hostname = DstHostname\r\n  | project-away AccessRawLog, RawData\r\n};\r\nparser (disabled)\r\n", "params": "disabled:bool = false"}}