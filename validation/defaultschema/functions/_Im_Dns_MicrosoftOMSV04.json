{"_Im_Dns_MicrosoftOMSV04": {"body": "let EventTypeTable=datatable(EventId:int,EventType:string,EventSubType:string, EventResult:string)[\r\n   256, 'Query', 'request', 'NA'\r\n , 257, 'Query', 'response', 'Success'\r\n , 258, 'Query', 'response', 'Based on RCODE'\r\n , 259, 'Query', 'response', 'Based on RCODE'\r\n , 260, 'Query', 'request', 'NA'\r\n , 261, 'Query', 'response', 'NA'\r\n , 262, 'Query', 'response', 'Based on RCODE'\r\n , 263, 'Update', 'request', 'NA'\r\n , 264, 'Update', 'response', 'Based on RCODE'\r\n , 265, 'XFR', 'request', 'NA' \r\n , 266, 'XFR', 'request', 'NA'\r\n , 267, 'XFR', 'response', 'Based on RCODE'\r\n , 268, 'XFR', 'response', 'Based on RCODE'\r\n , 269, 'XFR', 'request', 'NA'\r\n , 270, 'XFR', 'request', 'NA'\r\n , 271, 'XFR', 'response', 'Based on RCODE'\r\n , 272, 'XFR', 'response', 'Based on RCODE'\r\n , 273, 'XFR', 'request', 'NA'\r\n , 274, 'XFR', 'request', 'NA'\r\n , 275, 'XFR', 'response', 'Success'\r\n , 276, 'XFR', 'response', 'Success'\r\n , 277, 'Update', 'request', 'NA'\r\n , 278, 'Update', 'response', 'Based on RCODE'\r\n , 279, 'Query', 'NA', 'NA'\r\n , 280, 'Query', 'NA', 'NA'\r\n ];\r\n let RCodeTable=datatable(DnsResponseCode:int,DnsResponseCodeName:string)[\r\n    0, 'NOERROR'\r\n  , 1, \"FORMERR\"\r\n  , 2,\"SERVFAIL\"\r\n  , 3,'NXDOMAIN'\r\n  , 4,'NOTIMP'\r\n  , 5,'REFUSED'\r\n  , 6,'YXDOMAIN'\r\n  , 7,'YXRRSET'\r\n  , 8,'NXRRSET'\r\n  , 9,'NOTAUTH'\r\n  , 10,'NOTZONE'\r\n  , 11,'DSOTYPENI'\r\n  , 16,'BADVERS'\r\n  , 16,'BADSIG'\r\n  , 17,'BADKEY'\r\n  , 18,'BADTIME'\r\n  , 19,'BADMODE'\r\n  , 20,'BADNAME'\r\n  , 21,'BADALG'\r\n  , 22,'BADTRUNC'\r\n  , 23,'BADCOOKIE'];\r\n let QueryTypeSymbols=datatable(QTypeSeq:string,QTypeName:string)[\r\n   \"0\", \"Reserved\",\r\n   \"1\", \"A\",\r\n   \"2\", \"NS\",\r\n   \"3\", \"MD\",\r\n   \"4\", \"MF\",\r\n   \"5\", \"CNAME\",\r\n   \"6\", \"SOA\",\r\n   \"7\", \"MB\",\r\n   \"8\", \"MG\",\r\n   \"9\", \"MR\",\r\n   \"10\", \"NULL\",\r\n   \"11\", \"WKS\",\r\n   \"12\", \"PTR\",\r\n   \"13\", \"HINFO\",\r\n   \"14\", \"MINFO\",\r\n   \"15\", \"MX\",\r\n   \"16\", \"TXT\",\r\n   \"17\", \"RP\",\r\n   \"18\", \"AFSDB\",\r\n   \"19\", \"X25\",\r\n   \"20\", \"ISDN\",\r\n   \"21\", \"RT\",\r\n   \"22\", \"NSAP\",\r\n   \"23\", \"NSAP-PTR\",\r\n   \"24\", \"SIG\",\r\n   \"25\", \"KEY\",\r\n   \"26\", \"PX\",\r\n   \"27\", \"GPOS\",\r\n   \"28\", \"AAAA\",\r\n   \"29\", \"LOC\",\r\n   \"30\", \"NXT\",\r\n   \"31\", \"EID\",\r\n   \"32\", \"NIMLOC\",\r\n   \"33\", \"SRV\",\r\n   \"34\", \"ATMA\",\r\n   \"35\", \"NAPTR\",\r\n   \"36\", \"KX\",\r\n   \"37\", \"CERT\",\r\n   \"38\", \"A6\",\r\n   \"39\", \"DNAME\",\r\n   \"40\", \"SINK\",\r\n   \"41\", \"OPT\",\r\n   \"42\", \"APL\",\r\n   \"43\", \"DS\",\r\n   \"44\", \"SSHFP\",\r\n   \"45\", \"IPSECKEY\",\r\n   \"46\", \"RRSIG\",\r\n   \"47\", \"NSEC\",\r\n   \"48\", \"DNSKEY\",\r\n   \"49\", \"DHCID\",\r\n   \"50\", \"NSEC3\",\r\n   \"51\", \"NSEC3PARAM\",\r\n   \"52\", \"TLSA\",\r\n   \"53\", \"SMIMEA\",\r\n   \"54\", \"Unassigned\",\r\n   \"55\", \"HIP\",\r\n   \"56\", \"NINFO\",\r\n   \"57\", \"RKEY\",\r\n   \"58\", \"TALINK\",\r\n   \"59\", \"CDS\",\r\n   \"60\", \"CDNSKEY\",\r\n   \"61\", \"OPENPGPKEY\",\r\n   \"62\", \"CSYNC\",\r\n   \"99\", \"SPF\",\r\n   \"100\", \"UINFO\",\r\n   \"101\", \"UID\",\r\n   \"102\", \"GID\",\r\n   \"103\", \"UNSPEC\",\r\n   \"104\", \"NID\",\r\n   \"105\", \"L32\",\r\n   \"106\", \"L64\",\r\n   \"107\", \"LP\",\r\n   \"108\", \"EUI48\",\r\n   \"109\", \"EUI64\",\r\n   \"249\", \"TKEY\",\r\n   \"250\", \"TSIG\",\r\n   \"251\", \"IXFR\",\r\n   \"252\", \"AXFR\",\r\n   \"253\", \"MAILB\",\r\n   \"254\", \"MAILA\",\r\n   \"255\", \"All\",\r\n   \"256\", \"URI\",\r\n   \"257\", \"CAA\",\r\n   \"258\", \"AVC\",\r\n   \"259\", \"DOA\",\r\n   \"32768\", \"TA\",\r\n   \"32769\", \"DLV\"];\r\n let DNSQuery_MS=(\r\n   starttime:datetime=datetime(null), \r\n   endtime:datetime=datetime(null),\r\n   srcipaddr:string='*',\r\n   domain_has_any:dynamic=dynamic([]),\r\n   responsecodename:string='*', \r\n   response_has_ipv4:string='*',\r\n   response_has_any_prefix:dynamic=dynamic([]),\r\n   eventtype:string='Query',\r\n   disabled:bool=false\r\n   ){\r\n   let rcodenames=toscalar(RCodeTable | where DnsResponseCodeName == responsecodename | project DnsResponseCode);\r\n   DnsEvents | where not(disabled)\r\n   // ******************************************************************\r\n     //  Pre-parsing filtering:\r\n   | where\r\n         (isnull(starttime) or TimeGenerated >= starttime)\r\n         and (isnull(endtime) or TimeGenerated <= endtime)\r\n         and (srcipaddr=='*' or ClientIP==srcipaddr)\r\n         and (array_length(domain_has_any) ==0 or Name has_any (domain_has_any))\r\n         and (responsecodename=='*' or ResultCode == rcodenames)\r\n         and (response_has_ipv4=='*' or has_ipv4(IPAddresses,response_has_ipv4) )\r\n         and (array_length(response_has_any_prefix) ==0 or has_any_ipv4_prefix(IPAddresses, response_has_any_prefix)  )\r\n   // *****************************************************************\r\n   | where EventId < 500\r\n   | lookup QueryTypeSymbols on $left.QueryType == $right.QTypeSeq\r\n   | extend DnsQueryTypeName=coalesce(QTypeName, QueryType)\r\n   | lookup EventTypeTable on EventId\r\n   // late filtering:\r\n   | extend\r\n     eventtype = iff (eventtype == \"lookup\", \"Query\", eventtype)\r\n   | where (eventtype == \"*\" or eventtype == EventType)\r\n   | project-rename\r\n        Dvc=Computer ,\r\n        SrcIpAddr = ClientIP,\r\n        // DnsQueryTypeName=QueryType,\r\n        EventMessage = Message,\r\n        EventReportUrl = ReportReferenceLink,\r\n        DnsResponseName = IPAddresses,\r\n        DnsQuery = Name,\r\n        DnsResponseCode = ResultCode\r\n   | extend hostelements=split(Dvc,'.')\r\n | extend DvcHostname=tostring(hostelements[0])\r\n        , DvcDomain=strcat_array( array_slice(hostelements,1,-1), '.')\r\n        , DvcFQDN = iff(Dvc contains \".\",Dvc,\"\" )\r\n | extend  DvcDomainType=iff(DvcFQDN !=\"\",\"FQDN\",\"\" )\r\n   | project-away hostelements\r\n   | extend\r\n        EventCount=int(1),\r\n        EventStartTime=TimeGenerated,\r\n        EventVendor = \"Microsoft\",\r\n        EventProduct = \"DNS Server\",\r\n        EventSchema = \"Dns\",\r\n        EventSchemaVersion=\"0.1.3\",\r\n        EventEndTime=TimeGenerated,\r\n        EventSeverity = tostring(Severity),\r\n        EventOriginalType = tostring(EventId)\r\n   | lookup RCodeTable on DnsResponseCode\r\n   | extend EventResultDetails = case (isnotempty(DnsResponseCodeName), DnsResponseCodeName\r\n                                   , DnsResponseCode between (3841 .. 4095), 'Reserved for Private Use'\r\n                                   , 'Unassigned'),\r\n     EventResult = iff (EventResult == \"Based on RCODE\", iff(DnsResponseCode == 0, \"Success\", \"Failure\"),EventResult)\r\n   // **************Aliases\r\n   | extend\r\n       DnsResponseCodeName=EventResultDetails,\r\n       Domain=DnsQuery,\r\n       IpAddr=SrcIpAddr,\r\n       Src=srcipaddr\r\n   | project-away \r\n       SubType, QTypeName, QueryType, SourceSystem, TaskCategory, Remote*, Severity, Result, Confidence, Description, IndicatorThreatType, MaliciousIP, eventtype, EventId\r\n   };\r\n DNSQuery_MS (starttime, endtime, srcipaddr, domain_has_any, responsecodename, response_has_ipv4, response_has_any_prefix, eventtype, disabled)\r\n", "params": "starttime:datetime = datetime(null), endtime:datetime = datetime(null), srcipaddr:string = '*', domain_has_any:dynamic = dynamic([]), responsecodename:string = '*', response_has_ipv4:string = '*', response_has_any_prefix:dynamic = dynamic([]), eventtype:string = 'Query', disabled:bool = false"}}