{"_Im_WebSession_NativeV01": {"body": "let parser=(\r\n  starttime:datetime=datetime(null), \r\n  endtime:datetime=datetime(null),\r\n  srcipaddr_has_any_prefix:dynamic=dynamic([]), \r\n  ipaddr_has_any_prefix:dynamic=dynamic([]), \r\n  url_has_any:dynamic=dynamic([]),\r\n  httpuseragent_has_any:dynamic=dynamic([]),\r\n  eventresultdetails_in:dynamic=dynamic([]),\r\n  eventresult:string='*',\r\n  disabled:bool=false\r\n)\r\n{\r\n  let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \r\n  ASimWebSessionLogs\r\n    | where not(disabled)\r\n    | where (isnull(starttime) or TimeGenerated >= starttime)\r\n        and (isnull(endtime) or TimeGenerated <= endtime)\r\n    | where (array_length(url_has_any) == 0 or Url has_any (url_has_any))\r\n    | where (array_length(httpuseragent_has_any) == 0 or HttpUserAgent has_any(httpuseragent_has_any))\r\n    | where (array_length(eventresultdetails_in) == 0 or tostring(EventResultDetails) has_any(eventresultdetails_in))\r\n    | where (eventresult == '*' or EventResult =~ eventresult)\r\n    | extend temp_SrcMatch=has_any_ipv4_prefix(SrcIpAddr,src_or_any)\r\n          , temp_DstMatch=has_any_ipv4_prefix(DstIpAddr,ipaddr_has_any_prefix)\r\n    | extend ASimMatchingIpAddr=case(\r\n                                  array_length(src_or_any) == 0 ,\"-\",\r\n                                  temp_SrcMatch and temp_DstMatch, \"Both\",\r\n                                  temp_SrcMatch, \"SrcIpAddr\",\r\n                                  temp_DstMatch, \"DstIpAddr\",\r\n                                  \"No match\"\r\n                              )\r\n    | where ASimMatchingIpAddr != \"No match\" \r\n    | project-away temp_*\r\n    // \r\n    // -- Schema fixed\r\n    | extend\r\n        FileSize = tolong(FileSize)\r\n    //\r\n    // -- Log Analytics global fields renaming\r\n    | project-rename\r\n        EventUid          = _ItemId,\r\n        DvcScopeId        = _SubscriptionId\r\n    //\r\n    // -- ASIM Global fields\r\n    | extend          \r\n        EventSchema       = \"WebSession\"\r\n    | extend\r\n        //\r\n        // -- Default values\r\n        EventEndTime      = coalesce (EventEndTime, TimeGenerated),\r\n        EventStartTime    = coalesce (EventStartTime, TimeGenerated),\r\n        //\r\n        // -- Multi-source aliases\r\n        Dvc = iff (EventType == 'HTTPSession',\r\n          coalesce (DvcFQDN, DvcHostname, DvcIpAddr, DvcId, DstMacAddr, _ResourceId, strcat (EventVendor,'/', EventProduct)),\r\n          coalesce (DvcFQDN, DvcHostname, DstFQDN, DstHostname, DvcIpAddr, DstIpAddr, DvcId, DstDvcId, DstMacAddr, _ResourceId, strcat (EventVendor,'/', EventProduct))\r\n        ),\r\n        Dst               = coalesce (DstFQDN, DstHostname, DstIpAddr, DstDvcId),\r\n        Src               = coalesce (SrcFQDN, SrcHostname, SrcIpAddr, SrcDvcId),\r\n        Rule              = coalesce(RuleName, tostring(RuleNumber)),\r\n        //\r\n        // -- Aliases which depend on EventType\r\n        Hostname = iff  (EventType == \"EndpointNetworkSession\" and NetworkDirection == (\"Inbound\"), SrcHostname, DstHostname),\r\n        IpAddr = iff  (EventType == \"EndpointNetworkSession\" and NetworkDirection == (\"Inbound\"), DstIpAddr, SrcIpAddr),\r\n        //\r\n        // -- Simple aliases\r\n        Duration          = NetworkDuration,\r\n        SessionId         = NetworkSessionId,\r\n        User              = SrcUsername,\r\n        HttpStatusCode    = EventResultDetails,\r\n        UserAgent         = HttpUserAgent\r\n        // --\r\n        // -- Aliased fields not implemented in ASimWebSessionLogs yet \r\n        //InnerVlanId     = SrcVlanId,\r\n        //OuterVlanId     = DstVlanId,\r\n        //DvcInterface    = coalesce(DvcInterface, DvcInboundInterface, DvcOutboundInterface), \r\n    | project-away\r\n        TenantId, SourceSystem, _ResourceId\r\n};\r\nparser (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, url_has_any=url_has_any, httpuseragent_has_any=httpuseragent_has_any, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)\r\n", "params": "starttime:datetime = datetime(null), endtime:datetime = datetime(null), srcipaddr_has_any_prefix:dynamic = dynamic([]), ipaddr_has_any_prefix:dynamic = dynamic([]), url_has_any:dynamic = dynamic([]), httpuseragent_has_any:dynamic = dynamic([]), eventresultdetails_in:dynamic = dynamic([]), eventresult:string = '*', disabled:bool = false"}}