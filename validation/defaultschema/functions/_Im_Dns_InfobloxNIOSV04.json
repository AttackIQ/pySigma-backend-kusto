{"_Im_Dns_InfobloxNIOSV04": {"body": "let response = (\r\n  starttime:datetime=datetime(null), \r\n  endtime:datetime=datetime(null), \r\n  srcipaddr:string=\"*\", \r\n  domain_has_any:dynamic=dynamic([]), \r\n  responsecodename:string=\"*\", \r\n  response_has_ipv4:string=\"*\",\r\n  response_has_any_prefix:dynamic=dynamic([]),\r\n  eventtype:string=\"Query\",\r\n  disabled:bool=false\r\n) \r\n{\r\n  Syslog\r\n  | where not(disabled)\r\n    and (eventtype in~ ('lookup', 'Query'))\r\n  // -- Pre filtering\r\n  | where\r\n    (isnull(starttime) or TimeGenerated >= starttime)\r\n    and (isnull(endtime) or TimeGenerated <= endtime) \r\n  | where ProcessName == \"named\" and SyslogMessage has_all (\"client\", \"query:\", \"response:\")\r\n  | where \r\n    (srcipaddr==\"*\" or has_ipv4(SyslogMessage, srcipaddr))\r\n    and (array_length(domain_has_any) == 0 or SyslogMessage has_any (domain_has_any))\r\n    and (responsecodename==\"*\" or SyslogMessage has responsecodename)\r\n    and (array_length(response_has_any_prefix)==0 or has_any_ipv4_prefix(SyslogMessage, response_has_any_prefix))\r\n    and (response_has_ipv4=='*' or has_ipv4(SyslogMessage,response_has_ipv4))\r\n  | parse SyslogMessage with *\r\n      \"client \" SrcIpAddr: string\r\n      \"#\" SrcPortNumber: int\r\n      \" \" NetworkProtocol: string\r\n      \": query: \" DnsQuery: string\r\n      \" \" DnsQueryClassName: string\r\n      \" \" DnsQueryTypeName: string\r\n      \" response: \" DnsResponseCodeName: string\r\n      \" \" DnsFlags: string\r\n  | extend DnsResponseNameIndex= indexof(DnsFlags, \" \")\r\n  | extend DnsResponseName =iif(DnsResponseNameIndex != \"-1\", substring(DnsFlags, DnsResponseNameIndex+1), \"\")\r\n  | extend DnsFlags =iif(DnsResponseNameIndex != \"-1\", substring(DnsFlags, 0, DnsResponseNameIndex), DnsFlags)\r\n  | extend EventSubType = \"response\"\r\n  | project-away DnsResponseNameIndex,SyslogMessage, ProcessName, ProcessID, Facility, SeverityLevel, HostName\r\n};\r\nlet request =(\r\n  starttime:datetime=datetime(null), \r\n  endtime:datetime=datetime(null), \r\n  srcipaddr:string=\"*\", \r\n  domain_has_any:dynamic=dynamic([]), \r\n  responsecodename:string=\"*\", \r\n  response_has_ipv4:string=\"*\",\r\n  response_has_any_prefix:dynamic=dynamic([]),\r\n  eventtype:string=\"Query\",\r\n  disabled:bool=false\r\n) \r\n{\r\n  Syslog \r\n  | where not(disabled)\r\n  // -- Pre filtering\r\n    and (eventtype in~ ('lookup', 'Query'))\r\n    and (responsecodename==\"*\")\r\n    and (array_length(response_has_any_prefix)==0)\r\n    and (response_has_ipv4=='*')\r\n  | where\r\n    (isnull(starttime) or TimeGenerated >= starttime)\r\n    and (isnull(endtime) or TimeGenerated <= endtime) \r\n  | where ProcessName == \"named\" and SyslogMessage has_all (\"client\", \"query:\") and SyslogMessage !has \"response:\"\r\n  | where \r\n    (srcipaddr==\"*\" or has_ipv4(SyslogMessage, srcipaddr))\r\n    and (array_length(domain_has_any) == 0 or SyslogMessage has_any (domain_has_any))\r\n  | extend SyslogMessage = (split(SyslogMessage,\"client \"))[1]\r\n  | extend SyslogMessage = iif(SyslogMessage startswith \"@\", (substring(SyslogMessage, indexof(SyslogMessage, \" \")+1)), SyslogMessage)\r\n  | extend SyslogMessage = replace_string(SyslogMessage,\"\\\\ \",\"@@@\")\r\n  | parse SyslogMessage with \r\n      SrcIpAddr: string\r\n      \"#\" SrcPortNumber: int *\r\n      \"query: \" DnsQuery: string\r\n      \" \" DnsQueryClassName: string\r\n      \" \" DnsQueryTypeName: string\r\n      \" \" DnsFlags: string\r\n  | extend DnsQuery = replace_string (DnsQuery, '@@@', ' ')\r\n  | extend DnsFlags= tostring((split(DnsFlags,\" \"))[0])\r\n  | extend \r\n      EventSubType = \"request\",\r\n      DnsResponseCodeName = \"NA\"\r\n  | project-away SyslogMessage, ProcessName, ProcessID, Facility, SeverityLevel, HostName\r\n};\r\nlet parser = (\r\n  starttime:datetime=datetime(null), \r\n  endtime:datetime=datetime(null), \r\n  srcipaddr:string=\"*\", \r\n  domain_has_any:dynamic=dynamic([]), \r\n  responsecodename:string=\"*\", \r\n  response_has_ipv4:string=\"*\",\r\n  response_has_any_prefix:dynamic=dynamic([]),\r\n  eventtype:string=\"Query\",\r\n  disabled:bool=false\r\n) \r\n{\r\n  union \r\n    response (\r\n      starttime=starttime, \r\n      endtime=endtime, \r\n      srcipaddr=srcipaddr,\r\n      domain_has_any=domain_has_any,\r\n      responsecodename=responsecodename, \r\n      response_has_ipv4=response_has_ipv4, \r\n      response_has_any_prefix=response_has_any_prefix, \r\n      eventtype=eventtype, \r\n      disabled=disabled\r\n    ),\r\n    request (\r\n      starttime=starttime, \r\n      endtime=endtime, \r\n      srcipaddr=srcipaddr,\r\n      domain_has_any=domain_has_any,\r\n      responsecodename=responsecodename, \r\n      response_has_ipv4=response_has_ipv4, \r\n      response_has_any_prefix=response_has_any_prefix, \r\n      eventtype=eventtype, \r\n      disabled=disabled\r\n    )    \r\n  // -- Post-filtering\r\n  | where\r\n      (srcipaddr==\"*\" or  SrcIpAddr==srcipaddr)\r\n      and (array_length(domain_has_any) ==0 or DnsQuery has_any (domain_has_any))\r\n      and (responsecodename==\"*\" or DnsResponseCodeName has responsecodename)\r\n      and (array_length(response_has_any_prefix) ==0 or has_any_ipv4_prefix(DnsResponseName, response_has_any_prefix))\r\n      and (response_has_ipv4 == '*' or has_ipv4(DnsResponseName,response_has_ipv4))\r\n  | extend\r\n      EventCount=int(1),\r\n      EventStartTime=todatetime(TimeGenerated),\r\n      EventEndTime=todatetime(TimeGenerated),\r\n      EventProduct=\"NIOS\",\r\n      EventVendor=\"Infoblox\",\r\n      EventSchema=\"Dns\",\r\n      EventSchemaVersion=\"0.1.3\",\r\n      EventType=\"Query\", \r\n      EventResult=iff(EventSubType==\"request\" or DnsResponseCodeName==\"NOERROR\",\"Success\",\"Failure\"),\r\n      DvcIpAddr=iff (HostIP == \"Unknown IP\", \"\", HostIP)\r\n  // -- Aliases\r\n  | invoke _ASIM_ResolveDvcFQDN (\"Computer\")\r\n  | project-away Computer\r\n  | extend\r\n      Dvc=DvcHostname,\r\n      Domain=DnsQuery,\r\n      IpAddr=SrcIpAddr,\r\n      Src=SrcIpAddr,\r\n      EventResultDetails = DnsResponseCodeName\r\n  // -- Backward Compatibility\r\n  | extend\r\n      Query=DnsQuery,\r\n      QueryTypeName=DnsQueryTypeName,\r\n      ResponseCodeName=DnsResponseCodeName,\r\n      QueryClassName=DnsQueryClassName,\r\n      Flags=DnsFlags\r\n};\r\nparser  (\r\n  starttime=starttime, \r\n  endtime=endtime, \r\n  srcipaddr=srcipaddr,\r\n  domain_has_any=domain_has_any,\r\n  responsecodename=responsecodename, \r\n  response_has_ipv4=response_has_ipv4, \r\n  response_has_any_prefix=response_has_any_prefix, \r\n  eventtype=eventtype, \r\n  disabled=disabled)", "params": "starttime:datetime = datetime(null), endtime:datetime = datetime(null), srcipaddr:string = '*', domain_has_any:dynamic = dynamic([]), responsecodename:string = '*', response_has_ipv4:string = '*', response_has_any_prefix:dynamic = dynamic([]), eventtype:string = 'Query', disabled:bool = false"}}