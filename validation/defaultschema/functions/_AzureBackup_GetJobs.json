{"_AzureBackup_GetJobs": {"body": "// Parameters\r\nlet _RangeStart = iff((isnull(RangeStart)), startofday(ago(1d)), startofday(RangeStart));\r\nlet _RangeEnd = iff((isnull(RangeEnd)), startofday(now()), startofday(RangeEnd) + 1d);\r\nlet _VaultSubscriptionList = split(VaultSubscriptionList, ',');\r\nlet _VaultLocationList = split(VaultLocationList, ',');\r\nlet _VaultList = split(VaultList, ',');\r\nlet _VaultTypeList = split(VaultTypeList, ',');\r\nlet _ExcludeLegacyEvent = ExcludeLegacyEvent;\r\nlet _BackupSolutionList = split(BackupSolutionList, ',');\r\nlet _DatasourceSetName = DatasourceSetName;\r\nlet _BackupInstanceName = BackupInstanceName;\r\nlet _JobOperationList = split(JobOperationList, ',');\r\nlet _JobStatusList = split(JobStatusList, ',');\r\nlet _JobFailureCodeList = split(JobFailureCodeList, ',');\r\nlet _ExcludeLog = ExcludeLog;\r\n// Other Vars\r\nlet ExtRangeStart = _RangeStart - 2d;\r\nlet ExtRangeEnd = _RangeEnd + 2d;\r\nlet AsonDay =  _RangeEnd-1d;\r\nlet AzureStorageCutoffDate = datetime(6/01/2020, 12:00:00.000 AM);\r\n// HelperFunctions\r\nlet ConvertDataSourceTypeToBackupSolution = (DataSourceType:string)\r\n{\r\n\tiff(DataSourceType == \"Microsoft.DBforPostgreSQL/servers/databases\",\"Azure Database for PostgreSQL Server Backup\",iff(DataSourceType == \"Microsoft.Storage/storageAccounts/blobServices\", \"Azure Blob Backup\",iff(DataSourceType == \"Microsoft.Compute/disks\",\"Azure Disk Backup\",\"\")))\r\n};\r\nlet Extend_BackupSolution = (T:(BackupManagementType:string, BackupItemType:string))\r\n{\r\nT | extend BackupSolution = iff(BackupManagementType == \"IaaSVM\", \"Azure Virtual Machine Backup\", \r\niff(BackupManagementType == \"MAB\", \"Azure Backup Agent\", \r\niff(BackupManagementType == \"DPM\", \"DPM\", \r\niff(BackupManagementType == \"AzureBackupServer\", \"Azure Backup Server\", \r\niff(BackupManagementType == \"AzureStorage\", \"Azure Storage (Azure Files) Backup\", \r\niff(BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SQLDataBase\", \"SQL in Azure VM Backup\", \r\niff(BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SAPHanaDatabase\", \"SAP HANA in Azure VM Backup\", \"\")))))))\r\n};\r\nlet Extend_DatasourceType = (T:(BackupManagementType:string, BackupItemType:string))\r\n{\r\nT | extend DatasourceType = iff(BackupManagementType == \"IaaSVM\", \"Microsoft.Compute/virtualMachines\", \r\niff(BackupManagementType == \"MAB\", BackupItemType, \r\niff(BackupManagementType == \"DPM\", iff(BackupItemType == \"SQLDB\",\"SQLDataBase\",BackupItemType), \r\niff(BackupManagementType == \"AzureBackupServer\", iff(BackupItemType == \"SQLDB\",\"SQLDataBase\",BackupItemType), \r\niff(BackupManagementType == \"AzureStorage\", \"Microsoft.Storage/storageAccounts/fileServices/shares\", \r\niff(BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SQLDataBase\", \"SQLDataBase\", \r\niff(BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SAPHanaDatabase\", \"SAPHanaDatabase\", \"\")))))))\r\n};\r\nlet Extend_BackupInstanceId = (T:(ResourceId:string, BackupManagementType:string, BackupItemType:string, ProtectedContainerName:string, BackupItemName:string))\r\n{\r\nT | extend BackupInstanceId =  toupper(iff ((BackupManagementType == \"IaaSVM\" and BackupItemType == \"VM\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/IaasVMContainer;\", ProtectedContainerName, \"/protectedItems/VM;\", ProtectedContainerName),\r\niff((BackupManagementType == \"AzureStorage\" and BackupItemType == \"AzureFileShare\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/StorageContainer;\", ProtectedContainerName, \"/protectedItems/AzureFileShare;\", BackupItemName) , \r\niff((BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SQLDataBase\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/VMAppContainer;\", ProtectedContainerName, \"/protectedItems/SQLDataBase;\", BackupItemName) , \r\niff((BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SAPHanaDatabase\"), strcat(ResourceId,\"/backupFabrics/Azure/protectionContainers/VMAppContainer;\", ProtectedContainerName, \"/protectedItems/SAPHanaDatabase;\", BackupItemName), \"\")))))\r\n};\r\nlet Extend_DatasourceSetResourceId_DatasourceSetType_DatasourceResourceId = (T:(ResourceId:string, ProtectedContainerName:string, BackupManagementType:string, BackupItemType:string, BackupItemUniqueId:string, BackupItemName:string, BackupItemFriendlyName:string))\r\n{\r\nT | extend prefix = array_strcat(array_split(split(ResourceId,\"/\"), 4)[0] ,\"/\")\r\n|  extend container_array = split(ProtectedContainerName,\";\")\r\n|  extend container_arraylen = array_length(container_array)\r\n| extend containerNameString = iff(container_arraylen == 3, ProtectedContainerName, \"\")\r\n| parse containerNameString with entityType:string \";\" rgName:string \";\" entityName:string\r\n| extend entityURL = iff((BackupManagementType == \"AzureStorage\" and BackupItemType == \"AzureFileShare\"), iff(entityType == \"storage\", \"/Microsoft.Storage/storageAccounts/\", \"/Microsoft.ClassicStorage/storageAccounts/\"), iff((BackupManagementType == \"IaaSVM\" and BackupItemType == \"VM\"), iff(entityType =~ \"iaasvmcontainerv2\", \"/Microsoft.Compute/virtualMachines/\", \"/Microsoft.ClassicCompute/virtualMachines/\"), iff(((BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SAPHanaDatabase\") or (BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SQLDataBase\")), iff(entityType =~ \"compute\", \"/Microsoft.Compute/virtualMachines/\", \"/Microsoft.ClassicCompute/virtualMachines/\"), \"\")))\r\n| extend DatasourceSetResourceId = toupper(iff(BackupManagementType in (\"DPM\", \"AzureBackupServer\", \"MAB\"), \"\" , iff(containerNameString != \"\", strcat(prefix, \"/\", rgName, \"/providers\", entityURL, entityName), \"\")))\r\n//BackupSolution\r\n| extend DatasourceSetType = iff(BackupManagementType == \"IaaSVM\", iff(entityType =~ \"iaasvmcontainerv2\", \"Microsoft.Compute/virtualMachines\", \"Microsoft.ClassicCompute/virtualMachines\"),  \r\niff(BackupManagementType == \"MAB\", \"Azure Backup Agent\", \r\niff(BackupManagementType == \"DPM\", \"DPM\", \r\niff(BackupManagementType == \"AzureBackupServer\", \"Azure Backup Server\", \r\niff(BackupManagementType == \"AzureStorage\", iff(entityType == \"storage\", \"Microsoft.Storage/storageAccounts\", \"Microsoft.ClassicStorage/storageAccounts\"), \r\niff(BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SQLDataBase\", iff(entityType =~ \"compute\", \"Microsoft.Compute/virtualMachines\", \"Microsoft.ClassicCompute/virtualMachines\"), \r\niff(BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SAPHanaDatabase\", iff(entityType =~ \"compute\", \"Microsoft.Compute/virtualMachines\", \"Microsoft.ClassicCompute/virtualMachines\"), \"\")))))))\r\n| extend DatasourceResourceId = toupper(iff(BackupManagementType in (\"DPM\", \"AzureBackupServer\", \"MAB\"), BackupItemUniqueId, \r\niff(BackupManagementType == \"IaaSVM\", DatasourceSetResourceId, \r\niff(BackupManagementType == \"AzureStorage\", strcat(DatasourceSetResourceId, \"/fileServices/default/shares/\", BackupItemFriendlyName),\r\niff(BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SQLDataBase\",iff(DatasourceSetResourceId != \"\",strcat(DatasourceSetResourceId, \"/providers/Microsoft.RecoveryServices/backupProtectedItem/SQLDataBase;\", BackupItemName),\"\"),\r\niff(BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SAPHanaDatabase\",iff(DatasourceSetResourceId != \"\",strcat(DatasourceSetResourceId, \"/providers/Microsoft.RecoveryServices/backupProtectedItem/SAPHanaDatabase;\", BackupItemName),\"\"),\"\"))))))\r\n| project-away prefix, container_array, container_arraylen, containerNameString, entityURL \r\n};\r\n// Source Tables\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and columnifexists(\"SchemaVersion_s\", \"\") == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), VaultTags = columnifexists(\"VaultTags_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceGroupName =  columnifexists(\"ResourceGroupName_s\", \"\"), SubscriptionId = toupper(SubscriptionId), StorageReplicationType = columnifexists(\"StorageReplicationType_s\", \"\"), ResourceId, TimeGenerated \r\n| where SubscriptionId in~ (_VaultSubscriptionList) or '*' in (_VaultSubscriptionList)\r\n| where AzureDataCenter in~ (_VaultLocationList) or '*' in (_VaultLocationList)\r\n| where VaultName in~  (_VaultList) or '*' in (_VaultList)\r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| project StorageReplicationType, VaultUniqueId, VaultName, VaultTags, SubscriptionId, ResourceGroupName, AzureDataCenter, ResourceId, TimeGenerated\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\r\n| where isempty(VaultType)\r\n| where OperationName == \"Vault\" \r\n| project StorageReplicationType, VaultUniqueId, VaultName, VaultTags, SubscriptionId = toupper(SubscriptionId), ResourceGroupName, AzureDataCenter, ResourceId, TimeGenerated \r\n| where SubscriptionId in~ (_VaultSubscriptionList) or '*' in (_VaultSubscriptionList)\r\n| where AzureDataCenter in~ (_VaultLocationList) or '*' in (_VaultLocationList)\r\n| where VaultName in~  (_VaultList) or '*' in (_VaultList)\r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n};\r\nlet ResourceIdListUnderAzureDiagnostics = materialize(VaultUnderAzureDiagnostics | distinct ResourceId);\r\nlet ResourceIdListUnderResourceSpecific = materialize(VaultUnderResourceSpecific | distinct ResourceId);\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet SourceBackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and columnifexists(\"SchemaVersion_s\", \"\") == \"V2\" and columnifexists(\"State_s\", \"\") != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),SecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"),  ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n// Excluding SecondaryBackupProtectionState, BackupItemAppVersion, ProtectionGroupName\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, ProtectionGroupName, BackupItemFriendlyName, BackupItemType, BackupManagementType, TimeGenerated, ResourceId\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\");\r\nlet BackupItemTable = Extend_BackupSolution(SourceBackupItemTable)\r\n| where BackupSolution in~ (_BackupSolutionList) or '*' in (_BackupSolutionList)\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join   (\r\n   BackupItemTable \r\n) on ResourceId\r\n| project-away ResourceId1, TimeGenerated1;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet SourceBackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\r\n| where isempty(VaultType)\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n// Excluding SecondaryBackupProtectionState, BackupItemAppVersion, ProtectionGroupName\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, ProtectionGroupName, BackupItemFriendlyName, BackupItemType, BackupManagementType, TimeGenerated, ResourceId\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\");\r\nlet BackupItemTable = Extend_BackupSolution(SourceBackupItemTable)\r\n| where BackupSolution in~ (_BackupSolutionList) or '*' in (_BackupSolutionList)\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join   (\r\n   BackupItemTable \r\n) on ResourceId\r\n| project-away ResourceId1, TimeGenerated1;\r\n};\r\nlet ProtectedContainerUnderAzureDiagnostics = ()\r\n{\r\nlet ProtectedContainerTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\r\n| where Category == \"AzureBackupReport\" and OperationName == \"ProtectedContainer\"  and columnifexists(\"SchemaVersion_s\", \"\") == \"V2\" and columnifexists(\"State_s\", \"\") != \"Deleted\"\r\n| project ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"),  ProtectedContainerFriendlyName = columnifexists(\"ProtectedContainerFriendlyName_s\", \"\"), AgentVersion = columnifexists(\"AgentVersion_s\", \"\"),\r\nProtectedContainerOSType = columnifexists(\"ProtectedContainerOSType_s\", \"\"), ProtectedContainerOSVersion = columnifexists(\"ProtectedContainerOSVersion_s\", \"\"), ProtectedContainerWorkloadType = columnifexists(\"ProtectedContainerWorkloadType_s\", \"\"),  ProtectedContainerName = columnifexists(\"ProtectedContainerName_s\", \"\"), ProtectedContainerProtectionState = columnifexists(\"ProtectedContainerProtectionState_s\", \"\"), ProtectedContainerLocation = columnifexists(\"ProtectedContainerLocation_s\", \"\"), ProtectedContainerType = columnifexists(\"ProtectedContainerType_s\", \"\"),\r\nBackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId \r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderAzureDiagnostics | join   (\r\n   ProtectedContainerTable \r\n) on ResourceId;\r\n};\r\nlet ProtectedContainerUnderResourceSpecific = ()\r\n{\r\nlet ProtectedContainerTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\r\n| where isempty(VaultType)\r\n| where OperationName == \"ProtectedContainer\" and State != \"Deleted\"\r\n| project ProtectedContainerUniqueId,  ProtectedContainerFriendlyName, AgentVersion,\r\nProtectedContainerOSType, ProtectedContainerOSVersion, ProtectedContainerWorkloadType,  ProtectedContainerName, ProtectedContainerProtectionState, ProtectedContainerLocation, ProtectedContainerType,\r\nBackupManagementType, TimeGenerated, ResourceId\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| summarize arg_max(TimeGenerated, *) by ProtectedContainerUniqueId;\r\nVaultUnderResourceSpecific | join   (\r\n   ProtectedContainerTable \r\n) on ResourceId;\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\r\n| where ResourceId in (ResourceIdListUnderAzureDiagnostics)\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and columnifexists(\"SchemaVersion_s\", \"\") == \"V2\" and columnifexists(\"State_s\", \"\") != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n// Handle MAB SystemState\r\n// PolicyUniqueId can be either guid or string due to AzureDiagnostics behaviour\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nBackupItemAssociationTable\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\r\n| where isempty(VaultType)\r\n| where ResourceId in (ResourceIdListUnderResourceSpecific)\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nBackupItemAssociationTable\r\n};\r\nlet PolicyUnderAzureDiagnostics = ()\r\n{\r\nlet PolicyTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\r\n| where ResourceId in (ResourceIdListUnderAzureDiagnostics)\r\n| where OperationName == \"Policy\" and columnifexists(\"SchemaVersion_s\", \"\") == \"V2\"\r\n| project PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"), PolicyName = columnifexists(\"PolicyName_s\", \"\"), ResourceId, BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupManagementType, PolicyName, ResourceId, TimeGenerated \r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\r\nPolicyTable\r\n};\r\nlet PolicyUnderResourceSpecific = ()\r\n{\r\nlet PolicyTable = AddonAzureBackupPolicy\r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\r\n| where isempty(VaultType)\r\n| where ResourceId in (ResourceIdListUnderResourceSpecific)\r\n| where OperationName == \"Policy\" \r\n| project PolicyUniqueId, PolicyName, ResourceId, TimeGenerated, BackupManagementType\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId;\r\nPolicyTable\r\n};\r\nlet JobUnderAzureDiagnostics = (IsBackupItemAssociatedJobsOnly:bool)\r\n{\r\nlet JobTable = AzureDiagnostics \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < startofday(now())\r\n| where ResourceId in (ResourceIdListUnderAzureDiagnostics)\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Job\" and columnifexists(\"SchemaVersion_s\", \"\") == \"V2\"\r\n// Exclude Log Jobs and InProgress Jobs\r\n| project JobOperation = columnifexists(\"JobOperation_s\", \"\") , JobOperationSubType = columnifexists(\"JobOperationSubType_s\", \"\"), JobUniqueIdGuid = columnifexists(\"JobUniqueId_g\", \"\") , JobUniqueIdStr = columnifexists(\"JobUniqueId_s\", \"\"),\r\nProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\",\"\"), AdHocOrScheduledJob = columnifexists(\"AdHocOrScheduledJob_s\",\"\"), RecoveryJobDestination = columnifexists(\"RecoveryJobDestination_s\",\"\"),\r\nRecoveryJobRPDateTime = todatetime(columnifexists(\"RecoveryJobRPDateTime_s\",\"\")), RecoveryJobRPLocation = columnifexists(\"RecoveryJobRPLocation_s\",\"\"), RecoveryLocationType = columnifexists(\"RecoveryLocationType_s\",\"\"),\r\nBackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\",\"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\",\"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\",\"\"),\r\nJobStatus = columnifexists(\"JobStatus_s\",\"\"), JobFailureCode = columnifexists(\"JobFailureCode_s\",\"\"), JobStartDateTime = todatetime(columnifexists(\"JobStartDateTime_s\",\"\")), JobDurationInSecs = todouble(columnifexists(\"JobDurationInSecs_s\", \"\")),\r\nDataTransferredInMB = todouble(columnifexists(\"DataTransferredInMB_s\",\"\")), BackupManagementType = columnifexists(\"BackupManagementType_s\",\"\"), TimeGenerated, ResourceId\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where (IsBackupItemAssociatedJobsOnly and BackupItemUniqueId != \"\") or ( not(IsBackupItemAssociatedJobsOnly))\r\n// Exclude Log Jobs and InProgress Jobs\r\n| where not(JobStatus == \"InProgress\")\r\n| where ( _ExcludeLog and not((JobOperation == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\"))) or not(_ExcludeLog) \r\n| extend JobUniqueId = iff(JobUniqueIdGuid == \"\", JobUniqueIdStr, JobUniqueIdGuid) \r\n| project-away JobUniqueIdGuid, JobUniqueIdStr\r\n| where JobStartDateTime >= _RangeStart and JobStartDateTime <= _RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by  BackupItemUniqueId, JobUniqueId ;\r\nJobTable\r\n};\r\nlet JobUnderResourceSpecific = (IsBackupItemAssociatedJobsOnly:bool)\r\n{\r\nlet JobTable = AddonAzureBackupJobs \r\n// Take records until previous day\r\n| where TimeGenerated >= ExtRangeStart and TimeGenerated <= ExtRangeEnd and TimeGenerated < startofday(now())\r\n| where isempty(VaultType)\r\n| where ResourceId in (ResourceIdListUnderResourceSpecific)\r\n| where OperationName == \"Job\" \r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where (IsBackupItemAssociatedJobsOnly and BackupItemUniqueId != \"\") or ( not(IsBackupItemAssociatedJobsOnly))\r\n// Exclude Log Jobs and InProgress Jobs\r\n| where not(JobStatus == \"InProgress\")\r\n| where ( _ExcludeLog and not((JobOperation == \"Backup\" and JobOperationSubType == \"Log\") or (JobOperation  == \"Backup\" and JobOperationSubType == \"Recovery point_Log\"))) or not(_ExcludeLog)\r\n| where JobStartDateTime >= _RangeStart and JobStartDateTime <= _RangeEnd\r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId;\r\nJobTable\r\n};\r\n// BusinessLogic\r\nlet TotalBackupItemDimensionTable = () {union isfuzzy = true \r\n(BackupItemUnderAzureDiagnostics()),\r\n(BackupItemUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *)   by BackupItemUniqueId\r\n| where isempty(_BackupInstanceName) or _BackupInstanceName == \"*\" or  BackupItemFriendlyName contains (_BackupInstanceName)\r\n| extend BackupItemProtectionState = iff(BackupItemProtectionState in (\"Protected\", \"ActivelyProtected\",\"ProtectionError\"), \"Protected\", iff(BackupItemProtectionState in (\"IRPending\"), \"InitialBackupPending\", iff(isnotempty(BackupItemProtectionState),\"ProtectionStopped\",BackupItemProtectionState)))\r\n//| where BackupItemProtectionState in~ (_ProtectionInfoList) or '*' in (_ProtectionInfoList)\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupSolution, BackupItemProtectionState,\r\nStorageReplicationType, ResourceId, VaultUniqueId, VaultName, VaultTags, SubscriptionId, ResourceGroupName, AzureDataCenter};\r\nlet BI_CombinationUnderAzureDiagnostics = ()\r\n{\r\nlet JoinWithPolicy = (T:(PolicyUniqueId:string, ResourceId:string))\r\n{\r\nT | join kind= leftouter (\r\n PolicyUnderAzureDiagnostics | project PolicyUniqueId, PolicyName, ResourceId) on PolicyUniqueId, ResourceId\r\n};\r\nlet Base = () {ProtectedContainerUnderAzureDiagnostics | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderAzureDiagnostics \r\n\t// To show as per as on 'AsonDay'\r\n\t| where startofday(TimeGenerated) == AsonDay\r\n\t| project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId\r\n) on ProtectedContainerUniqueId \r\n| project BackupItemUniqueId, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId\r\n};\r\nlet Base_Policy = ()\r\n{\r\nJoinWithPolicy(Base) \r\n| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, PolicyName, TimeGenerated, ResourceId\r\n};\r\nBase_Policy\r\n};\r\nlet BI_CombinationUnderResourceSpecific = ()\r\n{\r\nlet JoinWithPolicy = (T:(PolicyUniqueId:string, ResourceId:string))\r\n{\r\nT | join kind= leftouter (\r\n PolicyUnderResourceSpecific | project PolicyUniqueId, PolicyName, ResourceId) on PolicyUniqueId, ResourceId\r\n};\r\nlet Base = () {ProtectedContainerUnderResourceSpecific | distinct ProtectedContainerName, ProtectedContainerFriendlyName, ProtectedContainerUniqueId \r\n| join kind= rightouter  (\r\n    BackupItemAssociationUnderResourceSpecific \r\n\t// To show as per as on 'AsonDay'\r\n\t| where startofday(TimeGenerated) == AsonDay\r\n\t| project ProtectedContainerUniqueId, BackupItemUniqueId, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId\r\n) on ProtectedContainerUniqueId \r\n| project BackupItemUniqueId, ProtectedContainerUniqueId = ProtectedContainerUniqueId1, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, TimeGenerated, ResourceId\r\n};\r\nlet Base_Policy = ()\r\n{\r\nJoinWithPolicy(Base) \r\n| project BackupItemUniqueId, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, PolicyName, TimeGenerated, ResourceId\r\n};\r\nBase_Policy\r\n};\r\nlet LatestBackupItemWithProtectedContainerTable = () \r\n{\r\nTotalBackupItemDimensionTable\r\n| join  (union isfuzzy = true   \r\n(BI_CombinationUnderAzureDiagnostics()| where _ExcludeLegacyEvent == false),\r\n(BI_CombinationUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId) on BackupItemUniqueId\r\n| where isempty(_DatasourceSetName) or _DatasourceSetName == \"*\" or ProtectedContainerFriendlyName contains (_DatasourceSetName)\r\n| project BackupItemUniqueId,  BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupSolution, BackupItemProtectionState,\r\nStorageReplicationType, ResourceId, VaultUniqueId, VaultName, VaultTags, SubscriptionId, ResourceGroupName, AzureDataCenter, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName, BackupManagementServerUniqueId, PolicyUniqueId, PolicyName, TimeGenerated\r\n};\r\nlet JobFinalTable = (){\r\n union isfuzzy = true \r\n(JobUnderAzureDiagnostics(true)| where _ExcludeLegacyEvent == false),\r\n(JobUnderResourceSpecific(true))\r\n| project JobStatus, JobUniqueId, JobOperation, JobFailureCode, JobOperationSubType, JobStartDateTime, DataTransferredInMB, AdHocOrScheduledJob, JobDurationInSecs, RecoveryJobDestination,\r\nRecoveryJobRPDateTime, RecoveryJobRPLocation, RecoveryLocationType, BackupItemUniqueId, ProtectedContainerUniqueId, TimeGenerated \r\n| summarize arg_max(TimeGenerated, *)  by BackupItemUniqueId, JobUniqueId\r\n| where JobOperation in~ (_JobOperationList) or '*' in (_JobOperationList)\r\n| where JobStatus in~ (_JobStatusList) or '*' in (_JobStatusList)\r\n| where JobFailureCode in~ (_JobFailureCodeList) or '*' in (_JobFailureCodeList)\r\n| join kind= inner (LatestBackupItemWithProtectedContainerTable) on BackupItemUniqueId\r\n| project JobUniqueId, JobOperation, JobStatus, JobFailureCode, JobOperationSubType, JobStartDateTime, JobDurationInSecs, DataTransferredInMB, AdHocOrScheduledJob, RecoveryJobDestination,\r\nRecoveryJobRPDateTime, RecoveryJobRPLocation, RecoveryLocationType, BackupItemUniqueId = BackupItemUniqueId1, BackupItemName, BackupItemFriendlyName, BackupManagementType, BackupItemType, BackupSolution, BackupItemProtectionState, StorageReplicationType, ResourceId, VaultUniqueId, VaultName, VaultTags, SubscriptionId, ResourceGroupName, AzureDataCenter, ProtectedContainerUniqueId, ProtectedContainerName, ProtectedContainerFriendlyName,  PolicyUniqueId, PolicyName, TimeGenerated\r\n};\r\nlet FinalTable_V1Vault = () {Extend_DatasourceType(Extend_BackupInstanceId(Extend_DatasourceSetResourceId_DatasourceSetType_DatasourceResourceId(JobFinalTable)))\r\n| project UniqueId = JobUniqueId, OperationCategory = JobOperation, Operation = JobOperationSubType, Status = JobStatus, ErrorTitle = JobFailureCode, StartTime = JobStartDateTime, DurationInSecs = JobDurationInSecs, DataTransferredInMBs = DataTransferredInMB, RestoreJobRPDateTime = RecoveryJobRPDateTime, RestoreJobRPLocation = RecoveryJobRPLocation, BackupInstanceUniqueId = BackupItemUniqueId, BackupInstanceId, BackupInstanceFriendlyName = BackupItemFriendlyName, DatasourceResourceId, DatasourceFriendlyName = BackupItemFriendlyName, DatasourceType, BackupSolution,  DatasourceSetResourceId, DatasourceSetType, DatasourceSetFriendlyName = ProtectedContainerFriendlyName, VaultResourceId = ResourceId, VaultUniqueId, VaultName, VaultTags, VaultSubscriptionId = SubscriptionId, VaultLocation = AzureDataCenter, VaultStore_StorageReplicationType = StorageReplicationType,   VaultType = \"Microsoft.RecoveryServices/vaults\", TimeGenerated};\r\nlet JobHistoryUnderResourceSpecificForDPP = ()\r\n{\r\nAddonAzureBackupJobs\r\n// Take records until previous day\r\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\r\n| where VaultType == \"Microsoft.DataProtection/backupVaults\"\r\n| where OperationName == \"Job\" \r\n| where SubscriptionId in~ (_VaultSubscriptionList) or '*' in (_VaultSubscriptionList)\r\n| where AzureDataCenter in~ (_VaultLocationList) or '*' in (_VaultLocationList)\r\n| where VaultName in~  (_VaultList) or '*' in (_VaultList)\r\n| where VaultType in~ (_VaultTypeList) or '*' in (_VaultTypeList)\r\n| where ConvertDataSourceTypeToBackupSolution(DatasourceType) in~ (_BackupSolutionList) or \"*\" in (_BackupSolutionList)\r\n| where isempty(_DatasourceSetName) or (_DatasourceSetName) == \"*\" or DatasourceSetFriendlyName contains (_DatasourceSetName)\r\n| where isempty(_BackupInstanceName) or _BackupInstanceName == \"*\" or  BackupItemFriendlyName contains (_BackupInstanceName)\r\n| where JobOperation in~ (_JobOperationList) or '*' in (_JobOperationList)\r\n| where JobStatus in~ (_JobStatusList) or '*' in (_JobStatusList)\r\n| where JobFailureCode in~ (_JobFailureCodeList) or '*' in (_JobFailureCodeList)\r\n| project UniqueId = toupper(JobUniqueId), OperationCategory = JobOperation, Operation = JobOperationSubType, BackupInstanceFriendlyName = BackupItemFriendlyName, Status = JobStatus, ErrorTitle = JobFailureCode, StartTime = JobStartDateTime, DurationInSecs = JobDurationInSecs, DataTransferredInMBs = DataTransferredInMB, RestoreJobRPDateTime = RecoveryJobRPDateTime, RestoreJobRPLocation = RecoveryJobRPLocation, BackupInstanceUniqueId = toupper(BackupItemUniqueId), BackupInstanceId = toupper(BackupItemId), DatasourceResourceId = toupper(DatasourceResourceId), DatasourceFriendlyName, DatasourceType, BackupSolution = ConvertDataSourceTypeToBackupSolution(DatasourceType), DatasourceSetResourceId = iff(isnotempty(toupper(DatasourceSetResourceId)),toupper(DatasourceSetResourceId),toupper(DatasourceResourceId)) , DatasourceSetType, DatasourceSetFriendlyName = iff(isnotempty(DatasourceSetFriendlyName),DatasourceSetFriendlyName,DatasourceFriendlyName), VaultResourceId = toupper(ResourceId), VaultUniqueId = toupper(VaultUniqueId), VaultName, VaultTags, VaultSubscriptionId = toupper(SubscriptionId), VaultLocation = AzureDataCenter, VaultStore_StorageReplicationType = StorageReplicationType,ArchiveStore_StorageReplicationType = ArchiveTierStorageReplicationType,VaultType, TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by UniqueId, TimeRangeEndDay = startofday(TimeGenerated)\r\n| project UniqueId, OperationCategory, Operation,BackupInstanceFriendlyName, Status, ErrorTitle, StartTime, DurationInSecs, DataTransferredInMBs, RestoreJobRPDateTime, RestoreJobRPLocation, BackupInstanceUniqueId, BackupInstanceId, DatasourceResourceId, DatasourceFriendlyName, DatasourceType, BackupSolution, DatasourceSetResourceId, DatasourceSetType, VaultResourceId, VaultUniqueId, VaultName, VaultTags, VaultSubscriptionId, VaultLocation,VaultStore_StorageReplicationType, ArchiveStore_StorageReplicationType, VaultType, TimeGenerated = TimeRangeEndDay\r\n};\r\nlet JobUnderResourceSpecificForDPP = ()\r\n{\r\nAddonAzureBackupJobs\r\n// Take records until previous day\r\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\r\n| where VaultType == \"Microsoft.DataProtection/backupVaults\"\r\n| where OperationName == \"Job\" \r\n| where SubscriptionId in~ (_VaultSubscriptionList) or '*' in (_VaultSubscriptionList)\r\n| where AzureDataCenter in~ (_VaultLocationList) or '*' in (_VaultLocationList)\r\n| where VaultName in~  (_VaultList) or '*' in (_VaultList)\r\n| where VaultType in~ (_VaultTypeList) or '*' in (_VaultTypeList)\r\n| where ConvertDataSourceTypeToBackupSolution(DatasourceType) in~ (_BackupSolutionList) or \"*\" in (_BackupSolutionList)\r\n| where isempty(_DatasourceSetName) or (_DatasourceSetName) == \"*\" or DatasourceSetFriendlyName contains (_DatasourceSetName)\r\n| where isempty(_BackupInstanceName) or (_BackupInstanceName) == \"*\" or  BackupItemFriendlyName contains (_BackupInstanceName)\r\n| where JobOperation in~ (_JobOperationList) or '*' in (_JobOperationList)\r\n| where JobStatus in~ (_JobStatusList) or '*' in (_JobStatusList)\r\n| where JobFailureCode in~ (_JobFailureCodeList) or '*' in (_JobFailureCodeList)\r\n| project UniqueId = toupper(JobUniqueId), OperationCategory = JobOperation, Operation = JobOperationSubType, BackupInstanceFriendlyName = BackupItemFriendlyName,  Status = JobStatus, ErrorTitle = JobFailureCode, StartTime = JobStartDateTime, DurationInSecs = JobDurationInSecs, DataTransferredInMBs = DataTransferredInMB, RestoreJobRPDateTime = RecoveryJobRPDateTime, RestoreJobRPLocation = RecoveryJobRPLocation, BackupInstanceUniqueId = toupper(BackupItemUniqueId), BackupInstanceId = toupper(BackupItemId), DatasourceResourceId = toupper(DatasourceResourceId), DatasourceFriendlyName, DatasourceType, BackupSolution = ConvertDataSourceTypeToBackupSolution(DatasourceType), DatasourceSetResourceId = iff(isnotempty(toupper(DatasourceSetResourceId)),toupper(DatasourceSetResourceId),toupper(DatasourceResourceId)), DatasourceSetType, DatasourceSetFriendlyName = iff(isnotempty(DatasourceSetFriendlyName),DatasourceSetFriendlyName,DatasourceFriendlyName), VaultResourceId = toupper(ResourceId), VaultUniqueId = toupper(VaultUniqueId), VaultName, VaultTags, VaultSubscriptionId = toupper(SubscriptionId), VaultLocation = AzureDataCenter, VaultStore_StorageReplicationType = StorageReplicationType,ArchiveStore_StorageReplicationType = ArchiveTierStorageReplicationType,VaultType, TimeGenerated\r\n| summarize arg_max(TimeGenerated, *) by UniqueId\r\n| project UniqueId, OperationCategory, Operation,BackupInstanceFriendlyName, Status, ErrorTitle, StartTime, DurationInSecs, DataTransferredInMBs, RestoreJobRPDateTime, RestoreJobRPLocation, BackupInstanceUniqueId, BackupInstanceId, DatasourceResourceId, DatasourceFriendlyName, DatasourceType, BackupSolution, DatasourceSetResourceId, DatasourceSetType,DatasourceSetFriendlyName, VaultResourceId, VaultUniqueId, VaultName, VaultTags, VaultSubscriptionId, VaultLocation, VaultStore_StorageReplicationType, ArchiveStore_StorageReplicationType, VaultType, TimeGenerated\r\n};\r\nlet FinalTable_DPP = ()\r\n{\r\nunion (JobUnderResourceSpecificForDPP | where (_RangeEnd-_RangeStart == 1d)), (JobHistoryUnderResourceSpecificForDPP | where (_RangeEnd-_RangeStart > 1d))\r\n| project UniqueId, OperationCategory, Operation,BackupInstanceFriendlyName, Status, ErrorTitle, StartTime, DurationInSecs, DataTransferredInMBs, RestoreJobRPDateTime, RestoreJobRPLocation, BackupInstanceUniqueId, BackupInstanceId, DatasourceResourceId, DatasourceFriendlyName, DatasourceType, BackupSolution, DatasourceSetResourceId, DatasourceSetType,DatasourceSetFriendlyName, VaultResourceId, VaultUniqueId, VaultName, VaultTags, VaultSubscriptionId, VaultLocation, VaultStore_StorageReplicationType, ArchiveStore_StorageReplicationType, VaultType, TimeGenerated\r\n};\r\nlet FinalTable_Reporting = ()\r\n{\r\nunion (FinalTable_DPP |where \"Microsoft.DataProtection/backupVaults\" in~ (_VaultTypeList) or '*' in (_VaultTypeList)), (FinalTable_V1Vault | where \"Microsoft.RecoveryServices/vaults\" in~ (_VaultTypeList) or '*' in (_VaultTypeList))\r\n};\r\nFinalTable_Reporting\r\n", "params": "RangeStart:datetime = datetime(null), RangeEnd:datetime = datetime(null), VaultSubscriptionList:string=\"*\", VaultLocationList:string=\"*\", VaultList:string=\"*\", VaultTypeList:string=\"*\", ExcludeLegacyEvent:bool=True, BackupSolutionList:string=\"*\",  JobOperationList:string=\"*\", JobStatusList:string=\"*\", JobFailureCodeList:string=\"*\", DatasourceSetName:string=\"*\", BackupInstanceName:string=\"*\", ExcludeLog:bool=True"}}