{"_AzureBackup_GetPolicies": {"body": "// Params\r\nlet _RangeStart = iff((isnull(RangeStart)), startofday(ago(1d)), startofday(RangeStart));\r\nlet _RangeEnd = iff((isnull(RangeEnd)), startofday(now()), startofday(RangeEnd) + 1d);\r\nlet _VaultSubscriptionList = split(VaultSubscriptionList, ',');\r\nlet _VaultLocationList = split(VaultLocationList, ',');\r\nlet _VaultList = split(VaultList, ',');\r\nlet _VaultTypeList = split(VaultTypeList, ',');\r\nlet _BackupSolutionList = split(BackupSolutionList, ',');\r\nlet _ExcludeLegacyEvent = ExcludeLegacyEvent;\r\n// Other Vars\r\nlet AsonDay =  _RangeEnd-1d;\r\nlet AzureStorageCutoffDate = datetime(6/01/2020, 12:00:00.000 AM);\r\n// HelperFunctions\r\nlet Extend_BackupSolution = (T:(BackupManagementType:string, BackupItemType:string))\r\n{\r\nT | extend BackupSolution = iff(BackupManagementType == \"IaaSVM\", \"Azure Virtual Machine Backup\", \r\niff(BackupManagementType == \"MAB\", \"Azure Backup Agent\", \r\niff(BackupManagementType == \"DPM\", \"DPM\", \r\niff(BackupManagementType == \"AzureBackupServer\", \"Azure Backup Server\", \r\niff(BackupManagementType == \"AzureStorage\", \"Azure Storage (Azure Files) Backup\", \r\niff(BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SQLDataBase\", \"SQL in Azure VM Backup\", \r\niff(BackupManagementType == \"AzureWorkload\" and BackupItemType == \"SAPHanaDatabase\", \"SAP HANA in Azure VM Backup\", \"\")))))))\r\n};\r\nlet ConvertDataSourceTypeToBackupSolution = (DataSourceType:string)\r\n{\r\n\tiff(DataSourceType == \"Microsoft.DBforPostgreSQL/servers/databases\",\"Azure Database for PostgreSQL Server Backup\",iff(DataSourceType == \"Microsoft.Storage/storageAccounts/blobServices\", \"Azure Blob Backup\",iff(DataSourceType == \"Microsoft.Compute/disks\",\"Azure Disk Backup\",\"\")))\r\n};\r\n// Source Tables\r\nlet VaultUnderAzureDiagnostics = ()\r\n{\r\nAzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\r\n| where Category == \"AzureBackupReport\" and OperationName == \"Vault\" and columnifexists(\"SchemaVersion_s\", \"\") == \"V2\"\r\n| project VaultName = columnifexists(\"VaultName_s\", \"\"), VaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), VaultTags = columnifexists(\"VaultTags_s\", \"\"), AzureDataCenter =  columnifexists(\"AzureDataCenter_s\", \"\"), ResourceGroupName =  columnifexists(\"ResourceGroupName_s\", \"\"), SubscriptionId = toupper(SubscriptionId), StorageReplicationType = columnifexists(\"StorageReplicationType_s\", \"\"), ResourceId, TimeGenerated \r\n| where SubscriptionId in~ (_VaultSubscriptionList) or '*' in (_VaultSubscriptionList)\r\n| where AzureDataCenter in~ (_VaultLocationList) or '*' in (_VaultLocationList)\r\n| where VaultName in~  (_VaultList) or '*' in (_VaultList)\r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n| project StorageReplicationType, VaultUniqueId, VaultName, VaultTags, SubscriptionId, ResourceGroupName, AzureDataCenter, ResourceId, TimeGenerated\r\n};\r\nlet VaultUnderResourceSpecific = ()\r\n{\r\nCoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\r\n| where isempty(VaultType)\r\n| where OperationName == \"Vault\" \r\n| project StorageReplicationType, VaultUniqueId, VaultName, VaultTags, SubscriptionId = toupper(SubscriptionId), ResourceGroupName, AzureDataCenter, ResourceId, TimeGenerated \r\n| where SubscriptionId in~ (_VaultSubscriptionList) or '*' in (_VaultSubscriptionList)\r\n| where AzureDataCenter in~ (_VaultLocationList) or '*' in (_VaultLocationList)\r\n| where VaultName in~  (_VaultList) or '*' in (_VaultList)\r\n| summarize arg_max(TimeGenerated, *) by ResourceId\r\n};\r\nlet ResourceIdListUnderAzureDiagnostics = materialize(VaultUnderAzureDiagnostics | distinct ResourceId);\r\nlet ResourceIdListUnderResourceSpecific = materialize(VaultUnderResourceSpecific | distinct ResourceId);\r\nlet BackupItemUnderAzureDiagnostics = ()\r\n{\r\nlet SourceBackupItemTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItem\" and columnifexists(\"SchemaVersion_s\", \"\") == \"V2\" and columnifexists(\"State_s\", \"\") != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupItemProtectionState = columnifexists(\"BackupItemProtectionState_s\", \"\"), BackupItemAppVersion = columnifexists(\"BackupItemAppVersion_s\", \"\"),SecondaryBackupProtectionState = columnifexists(\"SecondaryBackupProtectionState_s\", \"\"), BackupItemName = columnifexists(\"BackupItemName_s\", \"\"), BackupItemFriendlyName = columnifexists(\"BackupItemFriendlyName_s\", \"\"),\r\nBackupItemType = columnifexists(\"BackupItemType_s\", \"\"),  ProtectionGroupName = columnifexists(\"ProtectionGroupName_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), TimeGenerated, ResourceId\r\n//Handle MAB system state\r\n// Excluding SecondaryBackupProtectionState, BackupItemAppVersion, ProtectionGroupName\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, ProtectionGroupName, BackupItemFriendlyName, BackupItemType, BackupManagementType, TimeGenerated, ResourceId\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\");\r\nlet BackupItemTable = Extend_BackupSolution(SourceBackupItemTable)\r\n| where BackupSolution in~ (_BackupSolutionList) or '*' in (_BackupSolutionList)\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderAzureDiagnostics | join   (\r\n   BackupItemTable \r\n) on ResourceId\r\n| project-away ResourceId1, TimeGenerated1;\r\n};\r\nlet BackupItemUnderResourceSpecific = ()\r\n{\r\nlet SourceBackupItemTable = CoreAzureBackup\r\n// Take records until previous day\r\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\r\n| where isempty(VaultType)\r\n| where OperationName == \"BackupItem\" and State != \"Deleted\"\r\n//Handle MAB system state\r\n// Excluding SecondaryBackupProtectionState, BackupItemAppVersion, ProtectionGroupName\r\n|  project BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupItemName = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), \"System State\", BackupItemName), BackupItemProtectionState, BackupItemAppVersion, SecondaryBackupProtectionState, ProtectionGroupName, BackupItemFriendlyName, BackupItemType, BackupManagementType, TimeGenerated, ResourceId\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\");\r\nlet BackupItemTable = Extend_BackupSolution(SourceBackupItemTable)\r\n| where BackupSolution in~ (_BackupSolutionList) or '*' in (_BackupSolutionList)\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nVaultUnderResourceSpecific | join   (\r\n   BackupItemTable \r\n) on ResourceId\r\n| project-away ResourceId1, TimeGenerated1;\r\n};\r\nlet PolicyWithExtendedPropsUnderAzureDiagnostics = ()\r\n{\r\nlet PolicyTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\r\n| where ResourceId in (ResourceIdListUnderAzureDiagnostics)\r\n| where OperationName == \"Policy\" and columnifexists(\"SchemaVersion_s\", \"\") == \"V2\"\r\n| project PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"), PolicyName = columnifexists(\"PolicyName_s\", \"\"), PolicyTimeZone = columnifexists(\"PolicyTimeZone_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), DiffBackupFormat = columnifexists(\"DiffBackupFormat_s\", \"\"),\r\nDiffBackupDaysofTheWeek = columnifexists(\"DiffBackupDaysofTheWeek_s\", \"\"), DiffBackupRetentionDuration = toint(columnifexists(\"DiffBackupRetentionDuration_s\", \"\")), DiffBackupTime = columnifexists(\"DiffBackupTime_s\", \"\"), LogBackupFrequency = toint(columnifexists(\"LogBackupFrequency_s\", \"\")), LogBackupRetentionDuration = toint(columnifexists(\"LogBackupRetentionDuration_s\", \"\")),\r\nBackupFrequency = columnifexists(\"BackupFrequency_s\", \"\"), BackupTimes = columnifexists(\"BackupTimes_s\", \"\"), BackupDaysOfTheWeek = columnifexists(\"BackupDaysOfTheWeek_s\", \"\"), RetentionType = columnifexists(\"RetentionType_s\", \"\"), RetentionDuration = toint(columnifexists(\"RetentionDuration_s\", \"\")),\r\nDailyRetentionDuration = toint(columnifexists(\"DailyRetentionDuration_s\", \"\")), DailyRetentionTimes = columnifexists(\"DailyRetentionTimes_s\", \"\"), \r\nWeeklyRetentionDuration = toint(columnifexists(\"WeeklyRetentionDuration_s\", \"\")), WeeklyRetentionTimes = columnifexists(\"WeeklyRetentionTimes_s\", \"\"), WeeklyRetentionDaysOfTheWeek = columnifexists(\"WeeklyRetentionDaysOfTheWeek_s\", \"\"),\r\nMonthlyRetentionDuration = toint(columnifexists(\"MonthlyRetentionDuration_s\", \"\")), MonthlyRetentionTimes = columnifexists(\"MonthlyRetentionTimes_s\", \"\"), MonthlyRetentionFormat = columnifexists(\"MonthlyRetentionFormat_s\", \"\"), MonthlyRetentionDaysOfTheMonth = columnifexists(\"MonthlyRetentionDaysOfTheMonth_s\", \"\"), MonthlyRetentionDaysOfTheWeek = columnifexists(\"MonthlyRetentionDaysOfTheWeek_s\", \"\"), MonthlyRetentionWeeksOfTheMonth = columnifexists(\"MonthlyRetentionWeeksOfTheMonth_s\", \"\"),\r\nYearlyRetentionDuration = toint(columnifexists(\"YearlyRetentionDuration_s\", \"\")), YearlyRetentionTimes = columnifexists(\"YearlyRetentionTimes_s\", \"\"), YearlyRetentionMonthsOfTheYear = columnifexists(\"YearlyRetentionMonthsOfTheYear_s\", \"\"), YearlyRetentionFormat = columnifexists(\"YearlyRetentionFormat_s\", \"\"), YearlyRetentionDaysOfTheMonth = columnifexists(\"YearlyRetentionDaysOfTheMonth_s\", \"\"), YearlyRetentionDaysOfTheWeek = columnifexists(\"YearlyRetentionDaysOfTheWeek_s\", \"\"), YearlyRetentionWeeksOfTheMonth = columnifexists(\"YearlyRetentionWeeksOfTheMonth_s\", \"\"), ResourceId, TimeGenerated\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), ResourceId\r\n| project PolicyUniqueId, PolicyName, PolicyTimeZone, DiffBackupFormat, DiffBackupDaysofTheWeek, DiffBackupRetentionDuration,\r\nDiffBackupTime, LogBackupFrequency, LogBackupRetentionDuration, BackupFrequency, BackupTimes, BackupDaysOfTheWeek, RetentionType, RetentionDuration, DailyRetentionDuration, DailyRetentionTimes, WeeklyRetentionDuration, WeeklyRetentionTimes, WeeklyRetentionDaysOfTheWeek, MonthlyRetentionDuration, MonthlyRetentionTimes, MonthlyRetentionFormat, MonthlyRetentionDaysOfTheMonth,  MonthlyRetentionDaysOfTheWeek, MonthlyRetentionWeeksOfTheMonth, YearlyRetentionDuration, YearlyRetentionTimes, YearlyRetentionMonthsOfTheYear, YearlyRetentionFormat, YearlyRetentionDaysOfTheMonth, YearlyRetentionDaysOfTheWeek, YearlyRetentionWeeksOfTheMonth, BackupManagementType, ResourceId, TimeGenerated;\r\n   PolicyTable \r\n};\r\nlet PolicyWithExtendedPropsUnderResourceSpecific = ()\r\n{\r\nlet PolicyTable = AddonAzureBackupPolicy\r\n// Take records until previous day\r\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\r\n| where isempty(VaultType)\r\n| where ResourceId in (ResourceIdListUnderResourceSpecific)\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| where OperationName == \"Policy\" \r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId\r\n| project PolicyUniqueId, PolicyName, PolicyTimeZone, DiffBackupFormat, DiffBackupDaysofTheWeek, DiffBackupRetentionDuration,\r\nDiffBackupTime, LogBackupFrequency, LogBackupRetentionDuration, BackupFrequency, BackupTimes, BackupDaysOfTheWeek, RetentionType, RetentionDuration, DailyRetentionDuration, DailyRetentionTimes, WeeklyRetentionDuration, WeeklyRetentionTimes, WeeklyRetentionDaysOfTheWeek, MonthlyRetentionDuration, MonthlyRetentionTimes, MonthlyRetentionFormat, MonthlyRetentionDaysOfTheMonth,  MonthlyRetentionDaysOfTheWeek, MonthlyRetentionWeeksOfTheMonth, YearlyRetentionDuration, YearlyRetentionTimes, YearlyRetentionMonthsOfTheYear, YearlyRetentionFormat, YearlyRetentionDaysOfTheMonth, YearlyRetentionDaysOfTheWeek, YearlyRetentionWeeksOfTheMonth, BackupManagementType, ResourceId, TimeGenerated;\r\n   PolicyTable \r\n};\r\nlet PolicyHistoryWithExtendedPropsUnderAzureDiagnostics = ()\r\n{\r\nlet PolicyTable = AzureDiagnostics\r\n// Take records until previous day\r\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\r\n| where ResourceId in (ResourceIdListUnderAzureDiagnostics)\r\n| where OperationName == \"Policy\" and columnifexists(\"SchemaVersion_s\", \"\") == \"V2\"\r\n| project PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"), PolicyName = columnifexists(\"PolicyName_s\", \"\"), PolicyTimeZone = columnifexists(\"PolicyTimeZone_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), DiffBackupFormat = columnifexists(\"DiffBackupFormat_s\", \"\"),\r\nDiffBackupDaysofTheWeek = columnifexists(\"DiffBackupDaysofTheWeek_s\", \"\"), DiffBackupRetentionDuration = toint(columnifexists(\"DiffBackupRetentionDuration_s\", \"\")), DiffBackupTime = columnifexists(\"DiffBackupTime_s\", \"\"), LogBackupFrequency = toint(columnifexists(\"LogBackupFrequency_s\", \"\")), LogBackupRetentionDuration = toint(columnifexists(\"LogBackupRetentionDuration_s\", \"\")),\r\nBackupFrequency = columnifexists(\"BackupFrequency_s\", \"\"), BackupTimes = columnifexists(\"BackupTimes_s\", \"\"), BackupDaysOfTheWeek = columnifexists(\"BackupDaysOfTheWeek_s\", \"\"), RetentionType = columnifexists(\"RetentionType_s\", \"\"), RetentionDuration = toint(columnifexists(\"RetentionDuration_s\", \"\")),\r\nDailyRetentionDuration = toint(columnifexists(\"DailyRetentionDuration_s\", \"\")), DailyRetentionTimes = columnifexists(\"DailyRetentionTimes_s\", \"\"), \r\nWeeklyRetentionDuration = toint(columnifexists(\"WeeklyRetentionDuration_s\", \"\")), WeeklyRetentionTimes = columnifexists(\"WeeklyRetentionTimes_s\", \"\"), WeeklyRetentionDaysOfTheWeek = columnifexists(\"WeeklyRetentionDaysOfTheWeek_s\", \"\"),\r\nMonthlyRetentionDuration = toint(columnifexists(\"MonthlyRetentionDuration_s\", \"\")), MonthlyRetentionTimes = columnifexists(\"MonthlyRetentionTimes_s\", \"\"), MonthlyRetentionFormat = columnifexists(\"MonthlyRetentionFormat_s\", \"\"), MonthlyRetentionDaysOfTheMonth = columnifexists(\"MonthlyRetentionDaysOfTheMonth_s\", \"\"), MonthlyRetentionDaysOfTheWeek = columnifexists(\"MonthlyRetentionDaysOfTheWeek_s\", \"\"), MonthlyRetentionWeeksOfTheMonth = columnifexists(\"MonthlyRetentionWeeksOfTheMonth_s\", \"\"),\r\nYearlyRetentionDuration = toint(columnifexists(\"YearlyRetentionDuration_s\", \"\")), YearlyRetentionTimes = columnifexists(\"YearlyRetentionTimes_s\", \"\"), YearlyRetentionMonthsOfTheYear = columnifexists(\"YearlyRetentionMonthsOfTheYear_s\", \"\"), YearlyRetentionFormat = columnifexists(\"YearlyRetentionFormat_s\", \"\"), YearlyRetentionDaysOfTheMonth = columnifexists(\"YearlyRetentionDaysOfTheMonth_s\", \"\"), YearlyRetentionDaysOfTheWeek = columnifexists(\"YearlyRetentionDaysOfTheWeek_s\", \"\"), YearlyRetentionWeeksOfTheMonth = columnifexists(\"YearlyRetentionWeeksOfTheMonth_s\", \"\"), ResourceId, TimeGenerated\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid),  ResourceId, TimeRangeEndDay = startofday(TimeGenerated)\r\n| project PolicyUniqueId, PolicyName, PolicyTimeZone, DiffBackupFormat, DiffBackupDaysofTheWeek, DiffBackupRetentionDuration,\r\nDiffBackupTime, LogBackupFrequency, LogBackupRetentionDuration, BackupFrequency, BackupTimes, BackupDaysOfTheWeek, RetentionType, RetentionDuration, DailyRetentionDuration, DailyRetentionTimes, WeeklyRetentionDuration, WeeklyRetentionTimes, WeeklyRetentionDaysOfTheWeek, MonthlyRetentionDuration, MonthlyRetentionTimes, MonthlyRetentionFormat, MonthlyRetentionDaysOfTheMonth,  MonthlyRetentionDaysOfTheWeek, MonthlyRetentionWeeksOfTheMonth, YearlyRetentionDuration, YearlyRetentionTimes, YearlyRetentionMonthsOfTheYear, YearlyRetentionFormat, YearlyRetentionDaysOfTheMonth, YearlyRetentionDaysOfTheWeek, YearlyRetentionWeeksOfTheMonth,  BackupManagementType, ResourceId, TimeGenerated, TimeRangeEndDay;\r\nPolicyTable\r\n};\r\nlet PolicyHistoryWithExtendedPropsUnderResourceSpecific = ()\r\n{\r\nlet PolicyTable = AddonAzureBackupPolicy\r\n// Take records until previous day\r\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\r\n| where isempty(VaultType)\r\n| where ResourceId in (ResourceIdListUnderResourceSpecific)\r\n| where OperationName == \"Policy\" \r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n| summarize arg_max(TimeGenerated, *) by PolicyUniqueId,  ResourceId, TimeRangeEndDay = startofday(TimeGenerated)\r\n| project PolicyUniqueId, PolicyName, PolicyTimeZone, DiffBackupFormat, DiffBackupDaysofTheWeek, DiffBackupRetentionDuration,\r\nDiffBackupTime, LogBackupFrequency, LogBackupRetentionDuration, BackupFrequency, BackupTimes, BackupDaysOfTheWeek, RetentionType, RetentionDuration, DailyRetentionDuration, DailyRetentionTimes, WeeklyRetentionDuration, WeeklyRetentionTimes, WeeklyRetentionDaysOfTheWeek, MonthlyRetentionDuration, MonthlyRetentionTimes, MonthlyRetentionFormat, MonthlyRetentionDaysOfTheMonth,  MonthlyRetentionDaysOfTheWeek, MonthlyRetentionWeeksOfTheMonth, YearlyRetentionDuration, YearlyRetentionTimes, YearlyRetentionMonthsOfTheYear, YearlyRetentionFormat, YearlyRetentionDaysOfTheMonth, YearlyRetentionDaysOfTheWeek, YearlyRetentionWeeksOfTheMonth, BackupManagementType, ResourceId, TimeGenerated, TimeRangeEndDay;\r\n   PolicyTable \r\n};\r\nlet BackupItemAssociationHistoryUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\r\n| where ResourceId in (ResourceIdListUnderAzureDiagnostics)\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and columnifexists(\"SchemaVersion_s\", \"\") == \"V2\" and columnifexists(\"State_s\", \"\") != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\"), PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n// Handle MAB SystemState\r\n// PolicyUniqueId can be either guid or string due to AzureDiagnostics behaviour\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nBackupItemAssociationTable\r\n};\r\nlet BackupItemAssociationHistoryUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\r\n| where isempty(VaultType)\r\n| where ResourceId in (ResourceIdListUnderResourceSpecific)\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId, TimeRangeEndDay = startofday(TimeGenerated);\r\nBackupItemAssociationTable\r\n};\r\nlet BackupItemAssociationUnderAzureDiagnostics = ()\r\n{\r\n let BackupItemAssociationTable = AzureDiagnostics \r\n // Take records until previous day\r\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\r\n| where ResourceId in (ResourceIdListUnderAzureDiagnostics)\r\n| where Category == \"AzureBackupReport\" and OperationName == \"BackupItemAssociation\" and columnifexists(\"SchemaVersion_s\", \"\") == \"V2\" and columnifexists(\"State_s\", \"\") != \"Deleted\"\r\n| project BackupItemUniqueId = columnifexists(\"BackupItemUniqueId_s\", \"\"), BackupManagementServerUniqueId = columnifexists(\"BackupManagementServerUniqueId_s\", \"\"), ProtectedContainerUniqueId = columnifexists(\"ProtectedContainerUniqueId_s\", \"\"), \r\nVaultUniqueId = columnifexists(\"VaultUniqueId_s\", \"\"), BackupManagementType = columnifexists(\"BackupManagementType_s\", \"\"), PolicyUniqueIdGuid = columnifexists(\"PolicyUniqueId_g\", \"\") , PolicyUniqueIdStr = columnifexists(\"PolicyUniqueId_s\", \"\"),\r\nTimeGenerated, ResourceId  \r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n// Handle MAB SystemState\r\n// PolicyUniqueId can be either guid or string due to AzureDiagnostics behaviour\r\n| project PolicyUniqueId = iff(PolicyUniqueIdGuid == \"\", PolicyUniqueIdStr, PolicyUniqueIdGuid), BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nBackupItemAssociationTable\r\n};\r\nlet BackupItemAssociationUnderResourceSpecific = ()\r\n{\r\nlet BackupItemAssociationTable = CoreAzureBackup \r\n// Take records until previous day\r\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\r\n| where isempty(VaultType)\r\n| where ResourceId in (ResourceIdListUnderResourceSpecific)\r\n| where OperationName == \"BackupItemAssociation\" and State != \"Deleted\"\r\n| where not(TimeGenerated <= AzureStorageCutoffDate and BackupManagementType == \"AzureStorage\")\r\n//| where BackupManagementType in (BackupManagementTypeParam) or '*' in (BackupManagementTypeParam)\r\n// Handle MAB SystemState\r\n| project PolicyUniqueId, BackupItemUniqueId = iff((BackupManagementType == \"MAB\" and BackupItemUniqueId contains \"ssbv\\\\\"), replace(@\"[^;]+$\", @\"systemstate\", BackupItemUniqueId ), BackupItemUniqueId), BackupManagementServerUniqueId, ProtectedContainerUniqueId, VaultUniqueId, BackupManagementType, TimeGenerated, ResourceId\r\n| summarize arg_max(TimeGenerated, *) by BackupItemUniqueId;\r\nBackupItemAssociationTable\r\n};\r\n// Business Logic\r\nlet ActivePolicyUnderAzureDiagnostics = ()\r\n{\t\r\n\tlet BIA_Policy = ()\r\n\t{\r\n\tBackupItemUnderAzureDiagnostics() | join kind = inner\r\n\t(BackupItemAssociationUnderAzureDiagnostics() ) on BackupItemUniqueId\r\n\t| project BackupItemUniqueId, BackupItemType, BackupSolution, ResourceId, PolicyUniqueId, StorageReplicationType, VaultUniqueId, VaultName, VaultTags, SubscriptionId, ResourceGroupName, AzureDataCenter\r\n\t| join kind= inner (\r\n\t   PolicyWithExtendedPropsUnderAzureDiagnostics ) on ResourceId, PolicyUniqueId\r\n| project PolicyUniqueId, PolicyName, PolicyTimeZone, DiffBackupFormat, DiffBackupDaysofTheWeek, DiffBackupRetentionDuration,\r\nDiffBackupTime, LogBackupFrequency, LogBackupRetentionDuration, BackupFrequency, BackupTimes, BackupDaysOfTheWeek, RetentionType, RetentionDuration, DailyRetentionDuration, DailyRetentionTimes, WeeklyRetentionDuration, WeeklyRetentionTimes, WeeklyRetentionDaysOfTheWeek, MonthlyRetentionDuration, MonthlyRetentionTimes, MonthlyRetentionFormat, MonthlyRetentionDaysOfTheMonth,  MonthlyRetentionDaysOfTheWeek, MonthlyRetentionWeeksOfTheMonth, YearlyRetentionDuration, YearlyRetentionTimes, YearlyRetentionMonthsOfTheYear, YearlyRetentionFormat, YearlyRetentionDaysOfTheMonth, YearlyRetentionDaysOfTheWeek, YearlyRetentionWeeksOfTheMonth,  StorageReplicationType, VaultUniqueId, VaultName, VaultTags, SubscriptionId, ResourceGroupName, AzureDataCenter, BackupItemUniqueId, BackupItemType, BackupSolution, BackupManagementType, ResourceId, TimeGenerated;\r\n\t};\r\nBIA_Policy\r\n};\r\nlet ActivePolicyUnderResourceSpecific = ()\r\n{\t\t\r\n\tlet BIA_Policy = ()\r\n\t{\r\n\tBackupItemUnderResourceSpecific() | join kind = inner\r\n\t(BackupItemAssociationUnderResourceSpecific() ) on BackupItemUniqueId\r\n\t| project BackupItemUniqueId, BackupItemType, BackupSolution, ResourceId, PolicyUniqueId, StorageReplicationType, VaultUniqueId, VaultName, VaultTags, SubscriptionId, ResourceGroupName, AzureDataCenter\r\n\t| join kind= inner (\r\n\t   PolicyWithExtendedPropsUnderResourceSpecific ) on ResourceId, PolicyUniqueId\r\n\t| project PolicyUniqueId, PolicyName, PolicyTimeZone, DiffBackupFormat, DiffBackupDaysofTheWeek, DiffBackupRetentionDuration,\r\nDiffBackupTime, LogBackupFrequency, LogBackupRetentionDuration, BackupFrequency, BackupTimes, BackupDaysOfTheWeek, RetentionType, RetentionDuration, DailyRetentionDuration, DailyRetentionTimes, WeeklyRetentionDuration, WeeklyRetentionTimes, WeeklyRetentionDaysOfTheWeek, MonthlyRetentionDuration, MonthlyRetentionTimes, MonthlyRetentionFormat, MonthlyRetentionDaysOfTheMonth,  MonthlyRetentionDaysOfTheWeek, MonthlyRetentionWeeksOfTheMonth, YearlyRetentionDuration, YearlyRetentionTimes, YearlyRetentionMonthsOfTheYear, YearlyRetentionFormat, YearlyRetentionDaysOfTheMonth, YearlyRetentionDaysOfTheWeek, YearlyRetentionWeeksOfTheMonth, StorageReplicationType, VaultUniqueId, VaultName, VaultTags, SubscriptionId, ResourceGroupName, AzureDataCenter, BackupItemUniqueId, BackupItemType, BackupSolution, BackupManagementType, ResourceId, TimeGenerated;\r\n\t};\r\nBIA_Policy\r\n};\r\nlet ActivePolicyHistoryUnderAzureDiagnostics = ()\r\n{\t\r\n\tlet BIA_Policy = ()\r\n\t{\r\n\tBackupItemUnderAzureDiagnostics() | join kind = inner\r\n\t(BackupItemAssociationHistoryUnderAzureDiagnostics() ) on BackupItemUniqueId\r\n\t| project BackupItemUniqueId, BackupItemType, BackupSolution, ResourceId, PolicyUniqueId, StorageReplicationType, VaultUniqueId, VaultName, VaultTags, SubscriptionId, ResourceGroupName, AzureDataCenter, TimeRangeEndDay\t\r\n\t| join kind= inner (\r\n\t   PolicyHistoryWithExtendedPropsUnderAzureDiagnostics ) on ResourceId, PolicyUniqueId, TimeRangeEndDay\r\n\t| project PolicyUniqueId, PolicyName, PolicyTimeZone, DiffBackupFormat, DiffBackupDaysofTheWeek, DiffBackupRetentionDuration,\r\nDiffBackupTime, LogBackupFrequency, LogBackupRetentionDuration, BackupFrequency, BackupTimes, BackupDaysOfTheWeek, RetentionType, RetentionDuration, DailyRetentionDuration, DailyRetentionTimes, WeeklyRetentionDuration, WeeklyRetentionTimes, WeeklyRetentionDaysOfTheWeek, MonthlyRetentionDuration, MonthlyRetentionTimes, MonthlyRetentionFormat, MonthlyRetentionDaysOfTheMonth,  MonthlyRetentionDaysOfTheWeek, MonthlyRetentionWeeksOfTheMonth, YearlyRetentionDuration, YearlyRetentionTimes, YearlyRetentionMonthsOfTheYear, YearlyRetentionFormat, YearlyRetentionDaysOfTheMonth, YearlyRetentionDaysOfTheWeek, YearlyRetentionWeeksOfTheMonth,  StorageReplicationType, VaultUniqueId, VaultName, VaultTags, SubscriptionId, ResourceGroupName, AzureDataCenter, BackupItemUniqueId, BackupItemType, BackupSolution, BackupManagementType, ResourceId, TimeGenerated, TimeRangeEndDay;\r\n\t};\r\nBIA_Policy\r\n};\r\nlet ActivePolicyHistoryUnderResourceSpecific = ()\r\n{\t\t\r\n\tlet BIA_Policy = ()\r\n\t{\t\r\n\tBackupItemUnderResourceSpecific() | join kind = inner\r\n\t(BackupItemAssociationHistoryUnderResourceSpecific() ) on BackupItemUniqueId\r\n\t| project BackupItemUniqueId, BackupItemType, BackupSolution, ResourceId, PolicyUniqueId, StorageReplicationType, VaultUniqueId, VaultName, VaultTags, SubscriptionId, ResourceGroupName, AzureDataCenter, TimeRangeEndDay\r\n\t| join kind= inner (\r\n\t   PolicyHistoryWithExtendedPropsUnderResourceSpecific ) on ResourceId, PolicyUniqueId, TimeRangeEndDay\r\n\t| project PolicyUniqueId, PolicyName, PolicyTimeZone, DiffBackupFormat, DiffBackupDaysofTheWeek, DiffBackupRetentionDuration,\r\nDiffBackupTime, LogBackupFrequency, LogBackupRetentionDuration, BackupFrequency, BackupTimes, BackupDaysOfTheWeek, RetentionType, RetentionDuration, DailyRetentionDuration, DailyRetentionTimes, WeeklyRetentionDuration, WeeklyRetentionTimes, WeeklyRetentionDaysOfTheWeek, MonthlyRetentionDuration, MonthlyRetentionTimes, MonthlyRetentionFormat, MonthlyRetentionDaysOfTheMonth,  MonthlyRetentionDaysOfTheWeek, MonthlyRetentionWeeksOfTheMonth, YearlyRetentionDuration, YearlyRetentionTimes, YearlyRetentionMonthsOfTheYear, YearlyRetentionFormat, YearlyRetentionDaysOfTheMonth, YearlyRetentionDaysOfTheWeek, YearlyRetentionWeeksOfTheMonth,  StorageReplicationType, VaultUniqueId, VaultName, VaultTags, SubscriptionId, ResourceGroupName, AzureDataCenter, BackupItemUniqueId, BackupItemType, BackupSolution, BackupManagementType, ResourceId, TimeGenerated, TimeRangeEndDay;\r\n\t};\r\nBIA_Policy\r\n};\r\nlet PolicyExtended_LatestTable = () {\r\nunion\r\n(ActivePolicyUnderAzureDiagnostics() | where _ExcludeLegacyEvent == false),\r\n(ActivePolicyUnderResourceSpecific())\r\n| where startofday(TimeGenerated) == AsonDay\r\n| summarize arg_max(TimeGenerated, *)   by PolicyUniqueId, ResourceId};\r\nlet PolicyExtended_HistoryTable = () {\r\nunion\r\n(ActivePolicyHistoryUnderAzureDiagnostics() | where _ExcludeLegacyEvent == false),\r\n(ActivePolicyHistoryUnderResourceSpecific())\r\n| summarize arg_max(TimeGenerated, *)   by PolicyUniqueId, ResourceId, TimeRangeEndDay};\r\nlet FinalTable_V1Vault = () {union (PolicyExtended_LatestTable | where (_RangeEnd-_RangeStart == 1d)), (PolicyExtended_HistoryTable | where (_RangeEnd-_RangeStart > 1d))\r\n| project UniqueId = PolicyUniqueId, Name = PolicyName, TimeZone = PolicyTimeZone, Id = strcat(ResourceId, \"/backupPolicies/\", PolicyName), \r\nBackupFrequency = iff(isnotempty(BackupFrequency), pack(\"BackupFrequency\", BackupFrequency), dynamic(null)),\r\nDiffBackupFormat = iff(isnotempty(DiffBackupFormat), pack(\"DiffBackupFormat\", DiffBackupFormat), dynamic(null)),\r\nLogBackupFrequency = iff(isnotempty(LogBackupFrequency), pack(\"LogBackupFrequency\", LogBackupFrequency), dynamic(null)),\r\nDailyRetentionDuration = iff(isnotempty(DailyRetentionDuration), pack(\"DailyRetentionDuration\", DailyRetentionDuration), dynamic(null)),\r\nWeeklyRetentionDuration = iff(isnotempty(WeeklyRetentionDuration), pack(\"WeeklyRetentionDuration\", WeeklyRetentionDuration), dynamic(null)),\r\nMonthlyRetentionDuration = iff(isnotempty(MonthlyRetentionDuration), pack(\"MonthlyRetentionDuration\", MonthlyRetentionDuration), dynamic(null)),\r\nYearlyRetentionDuration = iff(isnotempty(YearlyRetentionDuration), pack(\"YearlyRetentionDuration\", YearlyRetentionDuration), dynamic(null)),\r\nDiffBackupRetentionDuration = iff(isnotempty(DiffBackupRetentionDuration), pack(\"DiffBackupRetentionDuration\", DiffBackupRetentionDuration), dynamic(null)),\r\nLogBackupRetentionDuration = iff(isnotempty(LogBackupRetentionDuration), pack(\"LogBackupRetentionDuration\", LogBackupRetentionDuration), dynamic(null)),\r\nBackupSolution, TimeGenerated, VaultUniqueId, VaultResourceId = ResourceId, VaultName, VaultTags, VaultLocation = AzureDataCenter, VaultSubscriptionId = SubscriptionId, VaultStore_StorageReplicationType = StorageReplicationType,VaultType = \"Microsoft.Recoveryservices/vaults\"\r\n| project UniqueId, Name, TimeZone, Id, BackupSolution, TimeGenerated, VaultUniqueId, VaultResourceId, VaultName, VaultTags, VaultLocation, VaultSubscriptionId, VaultStore_StorageReplicationType, VaultType, ExtendedProperties = bag_merge(BackupFrequency, DiffBackupFormat, LogBackupFrequency, DailyRetentionDuration, WeeklyRetentionDuration, MonthlyRetentionDuration, YearlyRetentionDuration, DiffBackupRetentionDuration, LogBackupRetentionDuration)\r\n};\r\nlet PolicyHistoryUnderResourceSpecificForDPP = ()\r\n{\r\nAddonAzureBackupPolicy\r\n// Take records until previous day\r\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\r\n| where VaultType == \"Microsoft.DataProtection/backupVaults\"\r\n| where OperationName == \"Policy\" \r\n| where SubscriptionId in~ (_VaultSubscriptionList) or '*' in (_VaultSubscriptionList)\r\n| where AzureDataCenter in~ (_VaultLocationList) or '*' in (_VaultLocationList)\r\n| where VaultName in~  (_VaultList) or '*' in (_VaultList)\r\n| where VaultType in~ (_VaultTypeList) or '*' in (_VaultTypeList)\r\n| where ConvertDataSourceTypeToBackupSolution(DatasourceType) in~ (_BackupSolutionList) or \"*\" in (_BackupSolutionList)\r\n| project UniqueId = toupper(PolicyUniqueId), Name = PolicyName, TimeZone = PolicyTimeZone, Id = toupper(strcat(ResourceId, \"/backupPolicies/\", PolicyName)),\r\nFullBackupDaysOfTheWeek = iff(isnotempty(FullBackupDaysOfTheWeek), pack(\"FullBackupDaysOfTheWeek\", FullBackupDaysOfTheWeek), dynamic(null)),\r\nFullBackupFrequency = iff(isnotempty(FullBackupFrequency), pack(\"FullBackupFrequency\", FullBackupFrequency), dynamic(null)),\r\nFullBackupTimes = iff(isnotempty(FullBackupTimes), pack(\"FullBackupTimes\", FullBackupTimes), dynamic(null)),\r\nDifferentialBackupDaysOfTheWeek = iff(isnotempty(DifferentialBackupDaysOfTheWeek), pack(\"DifferentialBackupDaysOfTheWeek\", DifferentialBackupDaysOfTheWeek), dynamic(null)),\r\nDifferentialBackupFrequency = iff(isnotempty(DifferentialBackupFrequency), pack(\"DifferentialBackupFrequency\", DifferentialBackupFrequency), dynamic(null)),\r\nDifferentialBackupTimes = iff(isnotempty(DifferentialBackupTimes), pack(\"DifferentialBackupTimes\", DifferentialBackupTimes), dynamic(null)),\r\nIncrementalBackupDaysOfTheWeek = iff(isnotempty(IncrementalBackupDaysOfTheWeek), pack(\"IncrementalBackupDaysOfTheWeek\", IncrementalBackupDaysOfTheWeek), dynamic(null)),\r\nIncrementalBackupFrequency = iff(isnotempty(IncrementalBackupFrequency), pack(\"IncrementalBackupFrequency\", IncrementalBackupFrequency), dynamic(null)),\r\nIncrementalBackupTimes = iff(isnotempty(IncrementalBackupTimes), pack(\"IncrementalBackupTimes\", IncrementalBackupTimes), dynamic(null)),\r\nDailyRetentionDuration = iff(isnotempty(DailyRetentionDuration), pack(\"DailyRetentionDuration\", DailyRetentionDuration), dynamic(null)),\r\nDailyRetentionTimes = iff(isnotempty(DailyRetentionTimes), pack(\"DailyRetentionTimes\", DailyRetentionTimes), dynamic(null)),\r\nMonthlyRetentionDaysOfTheMonth = iff(isnotempty(MonthlyRetentionDaysOfTheMonth), pack(\"MonthlyRetentionDaysOfTheMonth\", MonthlyRetentionDaysOfTheMonth), dynamic(null)),\r\nMonthlyRetentionDaysOfTheWeek = iff(isnotempty(MonthlyRetentionDaysOfTheWeek), pack(\"MonthlyRetentionDaysOfTheWeek\", MonthlyRetentionDaysOfTheWeek), dynamic(null)),\r\nMonthlyRetentionDuration = iff(isnotempty(MonthlyRetentionDuration), pack(\"MonthlyRetentionDuration\", MonthlyRetentionDuration), dynamic(null)),\r\nMonthlyRetentionFormat = iff(isnotempty(MonthlyRetentionFormat), pack(\"MonthlyRetentionFormat\", MonthlyRetentionFormat), dynamic(null)),\r\nMonthlyRetentionTimes = iff(isnotempty(MonthlyRetentionTimes), pack(\"MonthlyRetentionTimes\", MonthlyRetentionTimes), dynamic(null)),\r\nMonthlyRetentionWeeksOfTheMonth = iff(isnotempty(MonthlyRetentionWeeksOfTheMonth), pack(\"MonthlyRetentionWeeksOfTheMonth\", MonthlyRetentionWeeksOfTheMonth), dynamic(null)),\r\nWeeklyRetentionDaysOfTheWeek = iff(isnotempty(WeeklyRetentionDaysOfTheWeek), pack(\"WeeklyRetentionDaysOfTheWeek\", WeeklyRetentionDaysOfTheWeek), dynamic(null)),\r\nWeeklyRetentionTimes = iff(isnotempty(WeeklyRetentionTimes), pack(\"WeeklyRetentionTimes\", WeeklyRetentionTimes), dynamic(null)),\r\nWeeklyRetentionDuration = iff(isnotempty(WeeklyRetentionDuration), pack(\"WeeklyRetentionDuration\", WeeklyRetentionDuration), dynamic(null)),\r\nYearlyRetentionDaysOfTheMonth = iff(isnotempty(YearlyRetentionDaysOfTheMonth), pack(\"YearlyRetentionDaysOfTheMonth\", YearlyRetentionDaysOfTheMonth), dynamic(null)),\r\nYearlyRetentionDaysOfTheWeek = iff(isnotempty(YearlyRetentionDaysOfTheWeek), pack(\"YearlyRetentionDaysOfTheWeek\", YearlyRetentionDaysOfTheWeek), dynamic(null)),\r\nYearlyRetentionDuration = iff(isnotempty(YearlyRetentionDuration), pack(\"YearlyRetentionDuration\", YearlyRetentionDuration), dynamic(null)),\r\nYearlyRetentionFormat = iff(isnotempty(YearlyRetentionFormat), pack(\"YearlyRetentionFormat\", YearlyRetentionFormat), dynamic(null)),\r\nYearlyRetentionMonthsOfTheYear = iff(isnotempty(YearlyRetentionMonthsOfTheYear), pack(\"YearlyRetentionMonthsOfTheYear\", YearlyRetentionMonthsOfTheYear), dynamic(null)),\r\nYearlyRetentionTimes = iff(isnotempty(YearlyRetentionTimes), pack(\"YearlyRetentionTimes\", YearlyRetentionTimes), dynamic(null)),\r\nYearlyRetentionWeeksOfTheMonth = iff(isnotempty(YearlyRetentionWeeksOfTheMonth), pack(\"YearlyRetentionWeeksOfTheMonth\", YearlyRetentionWeeksOfTheMonth), dynamic(null)),\r\nSnapshotTierDailyRetentionDuration = iff(isnotempty(SnapshotTierDailyRetentionDuration), pack(\"SnapshotTierDailyRetentionDuration\", SnapshotTierDailyRetentionDuration), dynamic(null)),\r\nSnapshotTierWeeklyRetentionDuration = iff(isnotempty(SnapshotTierWeeklyRetentionDuration), pack(\"SnapshotTierWeeklyRetentionDuration\", SnapshotTierWeeklyRetentionDuration), dynamic(null)),\r\nSnapshotTierMonthlyRetentionDuration = iff(isnotempty(SnapshotTierMonthlyRetentionDuration), pack(\"SnapshotTierMonthlyRetentionDuration\", SnapshotTierMonthlyRetentionDuration), dynamic(null)),\r\nSnapshotTierYearlyRetentionDuration = iff(isnotempty(SnapshotTierYearlyRetentionDuration), pack(\"SnapshotTierYearlyRetentionDuration\", SnapshotTierYearlyRetentionDuration), dynamic(null)),\r\nArchiveTierDailyRetentionDuration = iff(isnotempty(ArchiveTierDailyRetentionDuration), pack(\"ArchiveTierDailyRetentionDuration\", ArchiveTierDailyRetentionDuration), dynamic(null)),\r\nArchiveTierWeeklyRetentionDuration = iff(isnotempty(ArchiveTierWeeklyRetentionDuration), pack(\"ArchiveTierWeeklyRetentionDuration\", ArchiveTierWeeklyRetentionDuration), dynamic(null)),\r\nArchiveTierMonthlyRetentionDuration = iff(isnotempty(ArchiveTierMonthlyRetentionDuration), pack(\"ArchiveTierMonthlyRetentionDuration\", ArchiveTierMonthlyRetentionDuration), dynamic(null)),\r\nArchiveTierYearlyRetentionDuration = iff(isnotempty(ArchiveTierYearlyRetentionDuration), pack(\"ArchiveTierYearlyRetentionDuration\", ArchiveTierYearlyRetentionDuration), dynamic(null)),\r\nArchiveTierDefaultRetentionDuration = iff(isnotempty(ArchiveTierDefaultRetentionDuration), pack(\"ArchiveTierDefaultRetentionDuration\", ArchiveTierDefaultRetentionDuration), dynamic(null)),\r\nStandardTierDefaultRetentionDuration = iff(isnotempty(StandardTierDefaultRetentionDuration), pack(\"StandardTierDefaultRetentionDuration\", StandardTierDefaultRetentionDuration), dynamic(null)),\r\nSnapshotTierDefaultRetentionDuration = iff(isnotempty(SnapshotTierDefaultRetentionDuration), pack(\"SnapshotTierDefaultRetentionDuration\", SnapshotTierDefaultRetentionDuration), dynamic(null)),\r\nBackupIntervalInHours = iff(isnotempty(BackupIntervalInHours), pack(\"BackupIntervalInHours\", BackupIntervalInHours), dynamic(null)),\r\nBackupSolution = ConvertDataSourceTypeToBackupSolution(DatasourceType), TimeGenerated, VaultUniqueId = toupper(VaultUniqueId), VaultResourceId = toupper(ResourceId), VaultName, VaultTags, VaultLocation = AzureDataCenter, VaultSubscriptionId = toupper(SubscriptionId), VaultStore_StorageReplicationType = StorageReplicationType, ArchiveStore_StorageReplicationType = ArchiveTierStorageReplicationType, VaultType\r\n| summarize arg_max(TimeGenerated, *) by UniqueId, TimeRangeEndDay = startofday(TimeGenerated)\r\n| project UniqueId, Name, TimeZone, Id, BackupSolution, TimeGenerated = TimeRangeEndDay, VaultUniqueId, VaultResourceId, VaultName, VaultTags, VaultLocation, VaultSubscriptionId, VaultStore_StorageReplicationType, ArchiveStore_StorageReplicationType,VaultType, ExtendedProperties = bag_merge(FullBackupDaysOfTheWeek, FullBackupFrequency, FullBackupTimes, DifferentialBackupDaysOfTheWeek, DifferentialBackupFrequency,DifferentialBackupTimes, IncrementalBackupDaysOfTheWeek, IncrementalBackupFrequency, IncrementalBackupTimes, DailyRetentionDuration, DailyRetentionTimes, MonthlyRetentionDaysOfTheMonth, MonthlyRetentionDaysOfTheWeek, MonthlyRetentionDuration, MonthlyRetentionFormat, MonthlyRetentionTimes, MonthlyRetentionWeeksOfTheMonth, WeeklyRetentionDaysOfTheWeek, WeeklyRetentionTimes, WeeklyRetentionDuration, YearlyRetentionDaysOfTheMonth,YearlyRetentionDaysOfTheWeek, YearlyRetentionDuration, YearlyRetentionFormat, YearlyRetentionMonthsOfTheYear, YearlyRetentionTimes, YearlyRetentionWeeksOfTheMonth, SnapshotTierDailyRetentionDuration, SnapshotTierWeeklyRetentionDuration, SnapshotTierMonthlyRetentionDuration, SnapshotTierYearlyRetentionDuration, ArchiveTierDailyRetentionDuration, ArchiveTierWeeklyRetentionDuration, ArchiveTierMonthlyRetentionDuration, ArchiveTierYearlyRetentionDuration, ArchiveTierDefaultRetentionDuration, StandardTierDefaultRetentionDuration, SnapshotTierDefaultRetentionDuration, BackupIntervalInHours)\r\n};\r\nlet PolicyUnderResourceSpecificForDPP = ()\r\n{\r\nAddonAzureBackupPolicy\r\n// Take records until previous day\r\n| where TimeGenerated >= _RangeStart and TimeGenerated <= _RangeEnd and TimeGenerated < startofday(now())\r\n| where VaultType == \"Microsoft.DataProtection/backupVaults\"\r\n| where OperationName == \"Policy\" \r\n| where SubscriptionId in~ (_VaultSubscriptionList) or '*' in (_VaultSubscriptionList)\r\n| where AzureDataCenter in~ (_VaultLocationList) or '*' in (_VaultLocationList)\r\n| where ConvertDataSourceTypeToBackupSolution(DatasourceType) in~ (_BackupSolutionList) or \"*\" in (_BackupSolutionList)\r\n| where VaultType in~ (_VaultTypeList) or '*' in (_VaultTypeList)\r\n| where VaultName in~  (_VaultList) or '*' in (_VaultList)\r\n| project UniqueId = toupper(PolicyUniqueId), Name = PolicyName, TimeZone = PolicyTimeZone, Id = toupper(strcat(ResourceId, \"/backupPolicies/\", PolicyName)),\r\nFullBackupDaysOfTheWeek = iff(isnotempty(FullBackupDaysOfTheWeek), pack(\"FullBackupDaysOfTheWeek\", FullBackupDaysOfTheWeek), dynamic(null)),\r\nFullBackupFrequency = iff(isnotempty(FullBackupFrequency), pack(\"FullBackupFrequency\", FullBackupFrequency), dynamic(null)),\r\nFullBackupTimes = iff(isnotempty(FullBackupTimes), pack(\"FullBackupTimes\", FullBackupTimes), dynamic(null)),\r\nDifferentialBackupDaysOfTheWeek = iff(isnotempty(DifferentialBackupDaysOfTheWeek), pack(\"DifferentialBackupDaysOfTheWeek\", DifferentialBackupDaysOfTheWeek), dynamic(null)),\r\nDifferentialBackupFrequency = iff(isnotempty(DifferentialBackupFrequency), pack(\"DifferentialBackupFrequency\", DifferentialBackupFrequency), dynamic(null)),\r\nDifferentialBackupTimes = iff(isnotempty(DifferentialBackupTimes), pack(\"DifferentialBackupTimes\", DifferentialBackupTimes), dynamic(null)),\r\nIncrementalBackupDaysOfTheWeek = iff(isnotempty(IncrementalBackupDaysOfTheWeek), pack(\"IncrementalBackupDaysOfTheWeek\", IncrementalBackupDaysOfTheWeek), dynamic(null)),\r\nIncrementalBackupFrequency = iff(isnotempty(IncrementalBackupFrequency), pack(\"IncrementalBackupFrequency\", IncrementalBackupFrequency), dynamic(null)),\r\nIncrementalBackupTimes = iff(isnotempty(IncrementalBackupTimes), pack(\"IncrementalBackupTimes\", IncrementalBackupTimes), dynamic(null)),\r\nDailyRetentionDuration = iff(isnotempty(DailyRetentionDuration), pack(\"DailyRetentionDuration\", DailyRetentionDuration), dynamic(null)),\r\nDailyRetentionTimes = iff(isnotempty(DailyRetentionTimes), pack(\"DailyRetentionTimes\", DailyRetentionTimes), dynamic(null)),\r\nMonthlyRetentionDaysOfTheMonth = iff(isnotempty(MonthlyRetentionDaysOfTheMonth), pack(\"MonthlyRetentionDaysOfTheMonth\", MonthlyRetentionDaysOfTheMonth), dynamic(null)),\r\nMonthlyRetentionDaysOfTheWeek = iff(isnotempty(MonthlyRetentionDaysOfTheWeek), pack(\"MonthlyRetentionDaysOfTheWeek\", MonthlyRetentionDaysOfTheWeek), dynamic(null)),\r\nMonthlyRetentionDuration = iff(isnotempty(MonthlyRetentionDuration), pack(\"MonthlyRetentionDuration\", MonthlyRetentionDuration), dynamic(null)),\r\nMonthlyRetentionFormat = iff(isnotempty(MonthlyRetentionFormat), pack(\"MonthlyRetentionFormat\", MonthlyRetentionFormat), dynamic(null)),\r\nMonthlyRetentionTimes = iff(isnotempty(MonthlyRetentionTimes), pack(\"MonthlyRetentionTimes\", MonthlyRetentionTimes), dynamic(null)),\r\nMonthlyRetentionWeeksOfTheMonth = iff(isnotempty(MonthlyRetentionWeeksOfTheMonth), pack(\"MonthlyRetentionWeeksOfTheMonth\", MonthlyRetentionWeeksOfTheMonth), dynamic(null)),\r\nWeeklyRetentionDaysOfTheWeek = iff(isnotempty(WeeklyRetentionDaysOfTheWeek), pack(\"WeeklyRetentionDaysOfTheWeek\", WeeklyRetentionDaysOfTheWeek), dynamic(null)),\r\nWeeklyRetentionTimes = iff(isnotempty(WeeklyRetentionTimes), pack(\"WeeklyRetentionTimes\", WeeklyRetentionTimes), dynamic(null)),\r\nWeeklyRetentionDuration = iff(isnotempty(WeeklyRetentionDuration), pack(\"WeeklyRetentionDuration\", WeeklyRetentionDuration), dynamic(null)),\r\nYearlyRetentionDaysOfTheMonth = iff(isnotempty(YearlyRetentionDaysOfTheMonth), pack(\"YearlyRetentionDaysOfTheMonth\", YearlyRetentionDaysOfTheMonth), dynamic(null)),\r\nYearlyRetentionDaysOfTheWeek = iff(isnotempty(YearlyRetentionDaysOfTheWeek), pack(\"YearlyRetentionDaysOfTheWeek\", YearlyRetentionDaysOfTheWeek), dynamic(null)),\r\nYearlyRetentionDuration = iff(isnotempty(YearlyRetentionDuration), pack(\"YearlyRetentionDuration\", YearlyRetentionDuration), dynamic(null)),\r\nYearlyRetentionFormat = iff(isnotempty(YearlyRetentionFormat), pack(\"YearlyRetentionFormat\", YearlyRetentionFormat), dynamic(null)),\r\nYearlyRetentionMonthsOfTheYear = iff(isnotempty(YearlyRetentionMonthsOfTheYear), pack(\"YearlyRetentionMonthsOfTheYear\", YearlyRetentionMonthsOfTheYear), dynamic(null)),\r\nYearlyRetentionTimes = iff(isnotempty(YearlyRetentionTimes), pack(\"YearlyRetentionTimes\", YearlyRetentionTimes), dynamic(null)),\r\nYearlyRetentionWeeksOfTheMonth = iff(isnotempty(YearlyRetentionWeeksOfTheMonth), pack(\"YearlyRetentionWeeksOfTheMonth\", YearlyRetentionWeeksOfTheMonth), dynamic(null)),\r\nSnapshotTierDailyRetentionDuration = iff(isnotempty(SnapshotTierDailyRetentionDuration), pack(\"SnapshotTierDailyRetentionDuration\", SnapshotTierDailyRetentionDuration), dynamic(null)),\r\nSnapshotTierWeeklyRetentionDuration = iff(isnotempty(SnapshotTierWeeklyRetentionDuration), pack(\"SnapshotTierWeeklyRetentionDuration\", SnapshotTierWeeklyRetentionDuration), dynamic(null)),\r\nSnapshotTierMonthlyRetentionDuration = iff(isnotempty(SnapshotTierMonthlyRetentionDuration), pack(\"SnapshotTierMonthlyRetentionDuration\", SnapshotTierMonthlyRetentionDuration), dynamic(null)),\r\nSnapshotTierYearlyRetentionDuration = iff(isnotempty(SnapshotTierYearlyRetentionDuration), pack(\"SnapshotTierYearlyRetentionDuration\", SnapshotTierYearlyRetentionDuration), dynamic(null)),\r\nArchiveTierDailyRetentionDuration = iff(isnotempty(ArchiveTierDailyRetentionDuration), pack(\"ArchiveTierDailyRetentionDuration\", ArchiveTierDailyRetentionDuration), dynamic(null)),\r\nArchiveTierWeeklyRetentionDuration = iff(isnotempty(ArchiveTierWeeklyRetentionDuration), pack(\"ArchiveTierWeeklyRetentionDuration\", ArchiveTierWeeklyRetentionDuration), dynamic(null)),\r\nArchiveTierMonthlyRetentionDuration = iff(isnotempty(ArchiveTierMonthlyRetentionDuration), pack(\"ArchiveTierMonthlyRetentionDuration\", ArchiveTierMonthlyRetentionDuration), dynamic(null)),\r\nArchiveTierYearlyRetentionDuration = iff(isnotempty(ArchiveTierYearlyRetentionDuration), pack(\"ArchiveTierYearlyRetentionDuration\", ArchiveTierYearlyRetentionDuration), dynamic(null)),\r\nArchiveTierDefaultRetentionDuration = iff(isnotempty(ArchiveTierDefaultRetentionDuration), pack(\"ArchiveTierDefaultRetentionDuration\", ArchiveTierDefaultRetentionDuration), dynamic(null)),\r\nStandardTierDefaultRetentionDuration = iff(isnotempty(StandardTierDefaultRetentionDuration), pack(\"StandardTierDefaultRetentionDuration\", StandardTierDefaultRetentionDuration), dynamic(null)),\r\nSnapshotTierDefaultRetentionDuration = iff(isnotempty(SnapshotTierDefaultRetentionDuration), pack(\"SnapshotTierDefaultRetentionDuration\", SnapshotTierDefaultRetentionDuration), dynamic(null)),\r\nBackupIntervalInHours = iff(isnotempty(SnapshotTierDefaultRetentionDuration), pack(\"SnapshotTierDefaultRetentionDuration\", SnapshotTierDefaultRetentionDuration), dynamic(null)),\r\nBackupSolution = ConvertDataSourceTypeToBackupSolution(DatasourceType), TimeGenerated, VaultUniqueId = toupper(VaultUniqueId), VaultResourceId = toupper(ResourceId), VaultName, VaultTags, VaultLocation = AzureDataCenter, VaultSubscriptionId = toupper(SubscriptionId), VaultStore_StorageReplicationType = StorageReplicationType, ArchiveStore_StorageReplicationType = ArchiveTierStorageReplicationType, VaultType\r\n| summarize arg_max(TimeGenerated, *) by UniqueId\r\n| project UniqueId, Name, TimeZone, Id, BackupSolution, TimeGenerated, VaultUniqueId, VaultResourceId, VaultName, VaultTags, VaultLocation, VaultSubscriptionId, VaultStore_StorageReplicationType, ArchiveStore_StorageReplicationType,VaultType, ExtendedProperties = bag_merge(FullBackupDaysOfTheWeek, FullBackupFrequency, FullBackupTimes, DifferentialBackupDaysOfTheWeek, DifferentialBackupFrequency,DifferentialBackupTimes, IncrementalBackupDaysOfTheWeek, IncrementalBackupFrequency, IncrementalBackupTimes, DailyRetentionDuration, DailyRetentionTimes, MonthlyRetentionDaysOfTheMonth, MonthlyRetentionDaysOfTheWeek, MonthlyRetentionDuration, MonthlyRetentionFormat, MonthlyRetentionTimes, MonthlyRetentionWeeksOfTheMonth, WeeklyRetentionDaysOfTheWeek, WeeklyRetentionTimes, WeeklyRetentionDuration, YearlyRetentionDaysOfTheMonth,YearlyRetentionDaysOfTheWeek, YearlyRetentionDuration, YearlyRetentionFormat, YearlyRetentionMonthsOfTheYear, YearlyRetentionTimes, YearlyRetentionWeeksOfTheMonth, SnapshotTierDailyRetentionDuration, SnapshotTierWeeklyRetentionDuration, SnapshotTierMonthlyRetentionDuration, SnapshotTierYearlyRetentionDuration, ArchiveTierDailyRetentionDuration, ArchiveTierWeeklyRetentionDuration, ArchiveTierMonthlyRetentionDuration, ArchiveTierYearlyRetentionDuration, ArchiveTierDefaultRetentionDuration, StandardTierDefaultRetentionDuration, SnapshotTierDefaultRetentionDuration, BackupIntervalInHours)\r\n};\r\nlet FinalTable_DPP = ()\r\n{\r\nunion (PolicyUnderResourceSpecificForDPP | where (_RangeEnd-_RangeStart == 1d)), (PolicyHistoryUnderResourceSpecificForDPP | where (_RangeEnd-_RangeStart > 1d))\r\n| project UniqueId, Name, TimeZone, Id, BackupSolution, TimeGenerated, VaultUniqueId, VaultResourceId, VaultName, VaultTags, VaultLocation, VaultSubscriptionId, VaultStore_StorageReplicationType, ArchiveStore_StorageReplicationType, VaultType, ExtendedProperties\r\n};\r\nlet FinalTable_Reporting = ()\r\n{\r\nunion (FinalTable_DPP |where \"Microsoft.DataProtection/backupVaults\" in~ (_VaultTypeList) or '*' in (_VaultTypeList)), (FinalTable_V1Vault | where \"Microsoft.RecoveryServices/vaults\" in~ (_VaultTypeList) or '*' in (_VaultTypeList))\r\n};\r\nFinalTable_Reporting", "params": "RangeStart:datetime = datetime(null), RangeEnd:datetime = datetime(null), VaultSubscriptionList:string=\"*\", VaultLocationList:string=\"*\", VaultList:string=\"*\", VaultTypeList:string=\"*\", ExcludeLegacyEvent:bool=True, BackupSolutionList:string=\"*\""}}