{"_Im_AuditEvent_AzureActivityV02": {"body": "let parser=  (\r\n          starttime:datetime=datetime(null), \r\n          endtime:datetime=datetime(null),\r\n          srcipaddr_has_any_prefix:dynamic=dynamic([]), \r\n          eventresult:string='*',\r\n          actorusername_has_any:dynamic=dynamic([]),\r\n          eventtype_in:dynamic=dynamic([]),\r\n          operation_has_any:dynamic=dynamic([]),\r\n          object_has_any:dynamic=dynamic([]),\r\n          newvalue_has_any:dynamic=dynamic([]),\r\n          disabled:bool = false\r\n  ){\r\n   let AzureActivityOperationLookup = datatable (op:string, EventType:string) \r\n  [\r\n    'ACTION', 'Execute',\r\n    'WRITE', 'Set',\r\n    'DELETE', 'Delete'\r\n  ];\r\n  let AzureActivityStatusLookup = datatable (ActivityStatusValue:string, ActivitySubstatusValue:string, EventResult:string, EventResultDetails:string) \r\n  [\r\n      \"Accept\",\"Accepted\",\"Success\",\"\",\r\n      \"Accept\",\"Created\",\"Success\",\"\",\r\n      \"Accept\",\"OK\",\"Success\",\"\",\r\n      \"Accept\",\"\",\"Success\",\"\",\r\n      \"Accepted\",\"\",\"Success\",\"\",\r\n      \"Active\",\"\",\"Success\",\"Active\",\r\n      \"Failed\",\"\",\"Failure\",\"\",\r\n      \"Failure\",\"BadRequest\",\"Failure\",\"Bad Request\",\r\n      \"Failure\",\"Conflict\",\"Failure\",\"Bad Request\",\r\n      \"Failure\",\"Forbidden\",\"Failure\",\"Unauthorized\",\r\n      \"Failure\",\"InternalServerError\",\"Failure\",\"Internal error\",\r\n      \"Failure\",\"MethodNotAllowed\",\"Failure\",\"Bad Request\",\r\n      \"Failure\",\"NotFound\",\"Failure\",\"Not found\",\r\n      \"Failure\",\"Unauthorized\",\"Failure\",\"Unauthorized\",\r\n      \"Failure\",\"\",\"Failure\",\"\",\r\n      \"In Progress\",\"\",\"Success\",\"In Progress\",\r\n      \"Resolved\",\"\",\"Success\",\"\",\r\n      \"Start\",\"\",\"Success\",\"Start\",\r\n      \"Started\",\"\",\"Success\",\"Start\",\r\n      \"Succeeded\",\"\",\"Success\",\"\",\r\n      \"Success\",\"Created\",\"Success\",\"\",\r\n      \"Success\",\"NoContent\",\"Success\",\"\",\r\n      \"Success\",\"OK\",\"Success\",\"\",\r\n      \"Success\",\"\",\"Success\",\"\",\r\n      \"Updated\",\"\",\"Success\",\"\",\r\n      \"Succeeded\",\"OK\",\"Success\",\"\",\r\n      \"Accepted\",\"Accepted\",\"Success\",\"\",\r\n      \"Accepted\",\"OK\",\"Success\",\"\",\r\n      \"Failed\",\"Forbidden\",\"Failure\",\"Unauthorized\",\r\n      \"Succeeded\",\"Created\",\"Success\",\"\",\r\n      \"Failed\",\"BadRequest\",\"Failure\",\"Bad request\",\r\n      \"Accepted\",\"Created\",\"Success\",\"\",\r\n      \"Failed\",\"Conflict\",\"Failure\",\"Bad request\",\r\n      \"Failed\",\"MethodNotAllowed\",\"Failure\",\"Bad request\",\r\n      \"Failure\",\"BadGateway\",\"Failure\",\"Bad request\",\r\n      \"Succeeded\",\"NoContent\",\"Success\",\"\",\r\n      \"Failure\",\"ServiceUnavailable\",\"Failure\",\"Internal error\",\r\n      \"Failure\",\"GatewayTimeout\",\"Failure\",\"Internal error\",\r\n      \"Failed\",\"NotFound\",\"Failure\",\"Not found\",\r\n      \"Failed\",\"BadGateway\",\"Failure\",\"Bad request\",\r\n      \"Failure\",\"UnsupportedMediaType\",\"Failure\",\"Bad request\",\r\n      \"Failed\",\"Unauthorized\",\"Failure\",\"Unauthorized\",\r\n      \"Cancel\",\"\",\"Failure\",\"Cancelled\"\r\n  ];\r\n  AzureActivity \r\n  | where not(disabled)\r\n  | where\r\n      (isnull(starttime) or TimeGenerated >= starttime) \r\n      and (isnull(endtime) or TimeGenerated <= endtime)\r\n      and (array_length(newvalue_has_any) == 0)\r\n  | where CategoryValue == \"Administrative\"\r\n  | project-away HTTPRequest, Level, SourceSystem, EventSubmissionTimestamp, TenantId, OperationId, Hierarchy, Category, ResourceId, ResourceProvider, Resource\r\n  | where \r\n      (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(CallerIpAddress,srcipaddr_has_any_prefix))\r\n      and (array_length(actorusername_has_any) == 0 or Caller has_any (actorusername_has_any))\r\n      and (array_length(operation_has_any) == 0 or OperationNameValue has_any (operation_has_any))\r\n      and (array_length(object_has_any) == 0 or Properties  has_any (object_has_any))\r\n  // --\r\n  // Calculate and filter by EventType\r\n  | extend op = toupper(tostring(split(OperationNameValue,\"/\")[-1]))\r\n  | lookup AzureActivityOperationLookup on op\r\n  | extend EventType = iff (EventType == \"\", \"Other\", EventType)\r\n  | where array_length(eventtype_in) == 0 or EventType in (eventtype_in)\r\n  | project-away op\r\n  // --\r\n  // Calculate EventResult, EventResultDetails, and EventResultOriginalDetails\r\n  | extend\r\n      EventOriginalResultDetails = strcat (\r\n          ActivityStatusValue, \r\n          iff (ActivitySubstatusValue !=\"\", strcat(' [', ActivitySubstatusValue, ']'), \"\")\r\n      )\r\n  | extend \r\n      ActivitySubstatusValue = iff (ActivitySubstatusValue matches regex \"\\\\d+\", \"\", ActivitySubstatusValue)\r\n  | lookup AzureActivityStatusLookup on ActivityStatusValue, ActivitySubstatusValue\r\n  | extend EventResult = iff(EventResult == \"\", \"Other\", EventResult)\r\n  | where eventresult == \"*\" or (EventResult == eventresult) // Not optimized\r\n  | extend EventSeverity = iff(EventResult == \"Failure\", \"Low\", \"Informational\")\r\n  | project-away ActivityStatus*, ActivitySubstatus*    // \r\n  | project-rename \r\n      Operation = OperationNameValue,\r\n      SrcIpAddr = CallerIpAddress,\r\n      EventOriginalUid = EventDataId,\r\n      ActorSessionId = CorrelationId,\r\n      EventOriginalType = CategoryValue\r\n  | extend\r\n      EventCount = int(1),\r\n      EventStartTime = TimeGenerated, \r\n      EventEndTime= TimeGenerated,\r\n      EventProduct = 'Azure',\r\n      EventVendor = 'Microsoft',\r\n      EventSchemaVersion = '0.1.0',\r\n      EventSchema = 'AuditEvent',\r\n      ObjectType = \"Cloud Resource\",\r\n      TargetAppName = \"Azure\",\r\n      TargetAppType = \"CSP\"\r\n  // --\r\n  // Calculate Actor\r\n  | extend \r\n      Caller = iff(Caller == \"Microsoft.RecoveryServices\", \"\", Caller)\r\n  | extend \r\n      ActorUsernameType = iff (Caller has \"@\", \"UPN\", \"\")\r\n  | extend \r\n      ActorUsername = iff (ActorUsernameType == \"UPN\", Caller, \"\"),\r\n      ActorUserId = iff (ActorUsernameType != \"UPN\", Caller, \"\")\r\n  | extend\r\n      ActorUserIdType = iff  (ActorUserId != \"\", \"AADID\", \"\")\r\n  | project-away Caller\r\n  // --\r\n  // Calculate Object\r\n  | extend \r\n      entity = tostring(Properties_d.entity), \r\n      resource = tostring(Properties_d.resource),\r\n      entity_name = tostring(Properties_d.[\"Entity Name\"])\r\n  | extend Object = case ( \r\n          entity != \"\", entity,\r\n          strcat (\"/subscriptions/\", SubscriptionId, \"/resourceGroups/\", ResourceGroup, \"/providers/\", ResourceProviderValue, \"/\",resource, iff (entity_name != \"\", strcat(\"/\", entity_name), \"\"))\r\n      )\r\n  | project-away entity, resource,entity_name, _SubscriptionId, SubscriptionId, ResourceGroup, ResourceProviderValue\r\n  // Aliases\r\n  | extend AdditionalFields = pack_dictionary(\"Authorization\", Authorization_d, \"Claims\", Claims_d, \"Error\", Properties_d.statusMessage)\r\n  // -- Aliases\r\n  | extend \r\n      IpAddr = SrcIpAddr,\r\n      User = ActorUsername,\r\n      Application = TargetAppName,\r\n      Dst = TargetAppName,\r\n      Src = SrcIpAddr,\r\n  // -- Entity identifier explicit aliases\r\n      ActorUserUpn = ActorUsername,\r\n      ActorUserAadId = ActorUserId\r\n  | project-away OperationName, Properties*, Authorization*, Claims*\r\n  // -- Properties*\r\n};\r\nparser\r\n(\r\n  starttime = starttime,\r\n  endtime = endtime,\r\n  srcipaddr_has_any_prefix = srcipaddr_has_any_prefix,\r\n  actorusername_has_any = actorusername_has_any,\r\n  eventtype_in = eventtype_in,\r\n  eventresult = eventresult,\r\n  operation_has_any = operation_has_any,\r\n  object_has_any=object_has_any,\r\n  newvalue_has_any=newvalue_has_any,\r\n  disabled=disabled\r\n)", "params": "starttime:datetime = datetime(null), endtime:datetime = datetime(null), srcipaddr_has_any_prefix:dynamic = dynamic([]), actorusername_has_any:dynamic = dynamic([]), operation_has_any:dynamic = dynamic([]), eventtype_in:dynamic = dynamic([]), eventresult:string = '*', object_has_any:dynamic = dynamic([]), newvalue_has_any:dynamic = dynamic([]), disabled:bool = false"}}