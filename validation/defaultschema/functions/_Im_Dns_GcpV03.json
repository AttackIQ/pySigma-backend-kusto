{"_Im_Dns_GcpV03": {"body": "// https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry\r\nlet GCPSeverityTable=datatable(severity_s:string,EventSeverity:string)\r\n[\"DEFAULT\",\"Informational\",\r\n\"DEBUG\",\"Informational\",\r\n\"INFO\",\"Informational\",\r\n\"NOTICE\",\"Medium\",\r\n\"WARNING\",\"Medium\",\r\n\"ERROR\",\"High\",\r\n\"CRITICAL\",\"High\",\r\n\"ALERT\",\"High\",\r\n\"EMERGENCY\",\"High\"\r\n];\r\nlet DNSQuery_GcpDns=(\r\n  starttime:datetime=datetime(null), endtime:datetime=datetime(null)\r\n  , srcipaddr:string='*'\r\n  , domain_has_any:dynamic=dynamic([]) \r\n  , responsecodename:string='*', response_has_ipv4:string='*'\r\n  , response_has_any_prefix:dynamic=dynamic([]) , eventtype:string='Query'\r\n  , disabled:bool=false\r\n){\r\n    GCP_DNS_CL | where not(disabled)\r\n  | where resource_type_s == \"dns_query\"\r\n  //  Pre-parsing filtering:\r\n  | where\r\n  (eventtype in ('lookup', 'Query')) // -- for now we support only lookup events\r\n    and (isnull(starttime) or TimeGenerated >= starttime)\r\n    and (isnull(endtime) or TimeGenerated <= endtime)\r\n    and (srcipaddr=='*' or has_ipv4(payload_sourceIP_s, srcipaddr))\r\n    and (array_length(domain_has_any) ==0 or payload_queryName_s has_any (domain_has_any))\r\n    and (responsecodename=='*' or payload_responseCode_s == responsecodename)\r\n    and (response_has_ipv4=='*' or has_ipv4(payload_rdata_s,response_has_ipv4) )\r\n    and (array_length(response_has_any_prefix) == 0 or has_any_ipv4_prefix(payload_rdata_s, response_has_any_prefix))\r\n  // *****************************************************************\r\n  | lookup GCPSeverityTable on severity_s\r\n  | project-rename\r\n      DnsQueryTypeName=payload_queryType_s,\r\n      DnsResponseName=payload_rdata_s, \r\n      EventResultDetails=payload_responseCode_s,\r\n      NetworkProtocol=payload_protocol_s, \r\n      SrcIpAddr=payload_sourceIP_s,\r\n      EventOriginalUid=insert_id_s,\r\n      EventOriginalSeverity=severity_s    \r\n  | extend\r\n      DnsQuery=trim_end(@'\\.',payload_queryName_s), \r\n      EventCount=int(1),\r\n      EventProduct='Cloud DNS',\r\n      EventVendor='GCP',\r\n      EventSchema='Dns',\r\n      EventSchemaVersion=\"0.1.3\",\r\n      Dvc=\"GCPDNS\" ,\r\n      EventType = iif (resource_type_s == \"dns_query\", \"Query\", resource_type_s),\r\n      EventResult=iff(EventResultDetails=~'NOERROR','Success','Failure'),\r\n      EventSubType='response',\r\n      EventEndTime=todatetime(timestamp_t)\r\n  | extend\r\n      EventStartTime = EventEndTime,\r\n      EventResult = iff (EventResultDetails=~'NOERROR','Success','Failure')\r\n // -- Aliases\r\n  | extend \r\n      DnsResponseCodeName=EventResultDetails, \r\n      Domain=DnsQuery,\r\n      IpAddr=SrcIpAddr,\r\n      Src=SrcIpAddr\r\n // Backward Computability\r\n  | extend\r\n      Query=DnsQuery,\r\n      ResponseCodeName=DnsResponseCodeName,\r\n      QueryTypeName=DnsQueryTypeName\r\n  };\r\n  DNSQuery_GcpDns (starttime, endtime, srcipaddr, domain_has_any, responsecodename, response_has_ipv4, response_has_any_prefix, eventtype, disabled)\r\n", "params": "starttime:datetime = datetime(null), endtime:datetime = datetime(null), srcipaddr:string = '*', domain_has_any:dynamic = dynamic([]), responsecodename:string = '*', response_has_ipv4:string = '*', response_has_any_prefix:dynamic = dynamic([]), eventtype:string = 'Query', disabled:bool = false"}}