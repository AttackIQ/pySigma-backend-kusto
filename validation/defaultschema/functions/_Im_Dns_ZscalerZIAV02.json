{"_Im_Dns_ZscalerZIAV02": {"body": "let ZscalerDNSevents=(\r\n  starttime:datetime=datetime(null), endtime:datetime=datetime(null)\r\n  , srcipaddr:string='*'\r\n  , domain_has_any:dynamic=dynamic([]) \r\n  , responsecodename:string='*', response_has_ipv4:string='*'\r\n  , response_has_any_prefix:dynamic=dynamic([]) , eventtype:string='Query'\r\n  , disabled:bool=false\r\n){\r\n  CommonSecurityLog \r\n  | where (isnull(starttime) or TimeGenerated >= starttime)\r\n      and (isnull(endtime) or TimeGenerated <= endtime) \r\n  | where not(disabled)\r\n  | where DeviceProduct == \"NSSDNSlog\"\r\n  //  -- Pre-parsing filtering\r\n  | where\r\n      (eventtype in~ ('lookup', 'Query')\r\n      and (srcipaddr=='*' or SourceIP==srcipaddr)\r\n      and (array_length(domain_has_any) == 0 or DeviceCustomString5 has_any (domain_has_any))\r\n      and (response_has_ipv4=='*' or has_ipv4(DeviceCustomString6,response_has_ipv4) )\r\n      and (array_length(response_has_any_prefix) == 0 or has_any_ipv4_prefix(DeviceCustomString6, response_has_any_prefix))\r\n      and (responsecodename in ('*', 'NOERROR') or DeviceCustomString6 =~ responsecodename)) // NOERROR is determined only later\r\n  | extend\r\n      EventResultDetails = iff (DeviceCustomString6 matches regex @'^([A-Z_]+)$', DeviceCustomString6, 'NOERROR')\r\n  | where\r\n      (responsecodename=='*' or EventResultDetails =~ responsecodename)\r\n  // --\r\n  | project-rename\r\n      Dvc=Computer , \r\n      SrcIpAddr = SourceIP, \r\n      SrcUsername = SourceUserName,\r\n      DstIpAddr = DestinationIP, \r\n      DstPortNumber = DestinationPort, \r\n      EventProductVersion = DeviceVersion, \r\n      DnsQueryTypeName = DeviceCustomString4, \r\n      DnsQuery = DeviceCustomString5, \r\n      SrcUserDepartment = DeviceCustomString1, // Not part of the standard schema\r\n      reqaction = DeviceCustomString2, \r\n      resaction = DeviceCustomString3, \r\n      DvcUsername = SourceUserID,\r\n      DvcZone = SourceUserPrivileges,\r\n      SrcHostname = DeviceName\r\n  | extend\r\n      EventCount=int(1), \r\n      EventStartTime=TimeGenerated, \r\n      EventVendor = \"Zscaler\", \r\n      EventProduct = \"ZIA DNS\", \r\n      EventSchema = \"Dns\",\r\n      EventSchemaVersion=\"0.1.3\", \r\n      EventEndTime=TimeGenerated, \r\n      SrcUsernameType = \"Upn\",\r\n      SrcHostnameType = \"Simple\",\r\n      EventSubType = iff(resaction == 'None', 'request', 'response'), \r\n      DvcAction = iff(resaction == 'None', reqaction, resaction), \r\n      EventType = 'Query', \r\n      DnsRuleName = strcat (FlexString1, \" / \", FlexString2),\r\n      // -- Adjustment to support both old and new CSL fields.\r\n      UrlCategory = coalesce(column_ifexists(\"DeviceEventCategory\", \"\"), extract(\"cat=(.*)\", 1, AdditionalExtensions), \"\"),  \r\n      DnsNetworkDuration = coalesce(\r\n        toint(column_ifexists (\"fieldDeviceCustomNumber1\", int(null))), \r\n        toint(column_ifexists (\"DeviceCustomNumber1\",int(null)))\r\n      )\r\n   | extend \r\n      EventResult = case (\r\n        EventSubType == 'request', 'NA', \r\n        EventResultDetails == 'NOERROR', 'Success',\r\n        'Failure'),\r\n      DnsResponseName = iff (EventResultDetails == 'NOERROR', DeviceCustomString6, '')\r\n  // -- Aliases\r\n  | extend\r\n      DnsResponseCodeName = EventResultDetails,\r\n      Domain = DnsQuery,\r\n      IpAddr = SrcIpAddr,\r\n      Src = SrcIpAddr,\r\n      Hostname = SrcHostname,\r\n      Dst = DstIpAddr,\r\n      DvcHostname = Dvc,\r\n      Duration = DnsNetworkDuration,\r\n      User = SrcUsername\r\n  // -- Backward Compatibility\r\n  | extend\r\n      Query=DnsQuery, \r\n      QueryTypeName=DnsQueryTypeName, \r\n      ResponseName=DnsResponseName, \r\n      ResponseCodeName=DnsResponseCodeName\r\n  };\r\nZscalerDNSevents (starttime, endtime, srcipaddr, domain_has_any, responsecodename, response_has_ipv4, response_has_any_prefix, eventtype, disabled)", "params": "starttime:datetime = datetime(null), endtime:datetime = datetime(null), srcipaddr:string = '*', domain_has_any:dynamic = dynamic([]), responsecodename:string = '*', response_has_ipv4:string = '*', response_has_any_prefix:dynamic = dynamic([]), eventtype:string = 'Query', disabled:bool = false"}}