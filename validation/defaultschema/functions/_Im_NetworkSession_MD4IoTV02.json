{"_Im_NetworkSession_MD4IoTV02": {"body": "let parser = (\r\n      starttime:datetime=datetime(null), \r\n      endtime:datetime=datetime(null), \r\n      srcipaddr_has_any_prefix:dynamic=dynamic([]), \r\n      dstipaddr_has_any_prefix:dynamic=dynamic([]), \r\n      ipaddr_has_any_prefix:dynamic=dynamic([]),\r\n      dstportnumber:int=int(null), \r\n      hostname_has_any:dynamic=dynamic([]), \r\n      dvcaction:dynamic=dynamic([]), \r\n      eventresult:string='*', \r\n      disabled:bool=false)\r\n{\r\n  let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \r\n  let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix); \r\n  let ip_any  =  set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix, srcipaddr_has_any_prefix); \r\n  let DirectionNetworkEvents =\r\n  SecurityIoTRawEvent \r\n  | where (isnull(starttime) or TimeGenerated>=starttime) \r\n      and (isnull(endtime) or TimeGenerated<=endtime)\r\n  | where not(disabled)\r\n  | where RawEventName == \"NetworkActivity\"\r\n  // ***************  Prefilterring *****************************************************************\r\n  |where  (eventresult=='*' or eventresult=='Success')\r\n      and (array_length(hostname_has_any)==0) \r\n      and (array_length(dvcaction) ==0  )     /// if filtered by action return nothing\r\n      and EventDetails has tostring(dstportnumber)\r\n      and (array_length (ip_any)==0 or has_any_ipv4_prefix(EventDetails,ip_any))\r\n      // *************** Prefilterring *****************************************************************\r\n  | parse EventDetails with * ',\"LocalPort\":' LocalPort:int ',\"RemotePort\":' RemotePort:int ',' *\r\n  | extend outbound = LocalPort > RemotePort\r\n  | where (isnull(dstportnumber) or (not(outbound) and dstportnumber == LocalPort) or (outbound and dstportnumber == RemotePort) ) \r\n  ;\r\n  let parser = (T: (EventDetails: string)) {\r\n    T \r\n    | parse EventDetails with \r\n      '{\"LocalAddress\":\"' LocalAddress:string '\",'\r\n      '\"RemoteAddress\":\"' RemoteAddress:string '\",'\r\n      *\r\n      '\"BytesIn\":' BytesIn:long ','\r\n      '\"BytesOut\":' BytesOut:long ','\r\n      '\"Protocol\":\"' Protocol:string '\",'\r\n      '\"ProcessId\":' ProcessId:string ','\r\n      '\"UserId\":' UserId:string ','\r\n      '\"ApplicationProtocol\":\"' ApplicationProtocol:string '\",'\r\n      * // '\"AzureResourceId\":\"' AzureResourceId:string '\",'\r\n      '\"DeviceId\":\"' DeviceId:string '\",'\r\n      '\"MessageSource\":\"' MessageSource:string '\",'\r\n      '\"OriginalEventId\":\"' OriginalEventId:string '\",'\r\n      '\"TimestampUTC\":\"' TimestampUTC:datetime '\",'\r\n      *\r\n  }\r\n  ; \r\n  let OutboundNetworkEvents = \r\n    DirectionNetworkEvents\r\n    | where outbound\r\n    // ***************  Postfilterring *****************************************************************\r\n    | where (isnull(dstportnumber) or dstportnumber==LocalPort)\r\n    // ***************  Postfilterring *****************************************************************\r\n    | invoke parser ()\r\n    | extend temp_isSrcMatch=has_any_ipv4_prefix(LocalAddress,src_or_any)\r\n           , temp_isDstMatch=has_any_ipv4_prefix(RemoteAddress,dst_or_any)\r\n    | extend ASimMatchingIpAddr = case(\r\n          array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, \"-\" // match not requested: probably most common case\r\n          , (temp_isSrcMatch and temp_isDstMatch), \"Both\" // has to be checked before the individual \r\n          , temp_isSrcMatch, \"SrcIpAddr\"\r\n          , temp_isDstMatch, \"DstIpAddr\"\r\n          , \"No match\"\r\n  ) \r\n  | where ASimMatchingIpAddr != \"No match\"\r\n  | project-away temp_*\r\n    | project-rename\r\n      SrcBytes = BytesOut,\r\n      DstBytes = BytesIn,\r\n      SrcPortNumber = LocalPort,\r\n      DstIpAddr = RemoteAddress,\r\n      DstPortNumber = RemotePort,\r\n      SrcProcessId = ProcessId\r\n    | extend\r\n      SrcIpAddr = LocalAddress,\r\n      SrcDvcIdType = \"MD4IoTid\",\r\n      SrcUserId = UserId,\r\n      SrcUserIdType = \"UID\",\r\n      SrcDvcId = DeviceId,\r\n      Process = SrcProcessId, // alias\r\n      SrcDvcOs = iif (MessageSource == \"Linux\", \"Linux\", \"Windows\")\r\n  ;\r\n  let InboundNetworkEvents = \r\n    DirectionNetworkEvents\r\n    | where not(outbound)\r\n    // ***************  Postfilterring *****************************************************************\r\n    | where (isnull(dstportnumber) or dstportnumber==RemotePort)\r\n    // ***************  Postfilterring *****************************************************************\r\n    | invoke parser ()\r\n    | extend temp_isSrcMatch=( // only one of each pair has_any_ipv4_prefix is calculated\r\n                      has_any_ipv4_prefix(RemoteAddress,src_or_any)\r\n                  ) \r\n         , temp_isDstMatch=(\r\n                   has_any_ipv4_prefix(LocalAddress,dst_or_any) \r\n                  ) \r\n    | extend ASimMatchingIpAddr = case(\r\n          array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, \"-\" // match not requested: probably most common case\r\n          , (temp_isSrcMatch and temp_isDstMatch), \"Both\" // has to be checked before the individual \r\n          , temp_isSrcMatch, \"SrcIpAddr\"\r\n          , temp_isDstMatch, \"DstIpAddr\"\r\n          , \"No match\"\r\n  ) \r\n  | project-away temp_*\r\n  | where ASimMatchingIpAddr != \"No match\"\r\n    | project-rename\r\n      DstBytes = BytesOut,\r\n      SrcBytes = BytesIn,\r\n      DstPortNumber = LocalPort,\r\n      SrcIpAddr = RemoteAddress,\r\n      SrcPortNumber = RemotePort,\r\n      DstProcessId = ProcessId\r\n    | extend\r\n      DstIpAddr = LocalAddress,\r\n      DstDvcIdType = \"MD4IoTid\",\r\n      DstUserId = UserId,\r\n      DstUserIdType = \"UID\",\r\n      DstDvcId = DeviceId,\r\n      Process = DstProcessId, // alias\r\n      DstDvcOs = iif (MessageSource == \"Linux\", \"Linux\", \"Windows\")\r\n  ;\r\n  let NetworkSessionMD4IoT = \r\n    union InboundNetworkEvents, OutboundNetworkEvents\r\n    | extend\r\n      EventCount = int(1),\r\n      EventProduct = 'Azure Defender for IoT', \r\n      EventVendor = 'Microsoft',\r\n      EventSchemaVersion = '0.2.3',\r\n      EventSchema = \"NetworkSession\", \r\n      EventType = 'NetworkSession',\r\n      EventStartTime = TimeGenerated, \r\n      EventEndTime = TimeGenerated, \r\n      EventResult = 'Success',\r\n      EventSeverity = 'Informational'\r\n    | project-rename\r\n      EventProductVersion = AgentVersion, // Not available in Windows\r\n      _ResourceId = AssociatedResourceId, \r\n      _SubscriptionId = AzureSubscriptionId, \r\n      EventOriginalUid = OriginalEventId,  // OK pending question\r\n      DvcOs = MessageSource,\r\n      NetworkProtocol = Protocol,\r\n      NetworkApplicationProtocol = ApplicationProtocol,\r\n      DvcId = DeviceId,\r\n      DvcIpAddr = LocalAddress\r\n    | project-away outbound\r\n    | extend\r\n      Dvc = DvcId,\r\n      DvcIdType = \"MD4IoTid\",\r\n      User = UserId,\r\n      IpAddr = SrcIpAddr,\r\n      Src = SrcIpAddr,\r\n      Dst = DstIpAddr\r\n  ;\r\n  NetworkSessionMD4IoT};\r\n  parser(starttime, endtime, srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix, dstportnumber, hostname_has_any, dvcaction, eventresult, disabled)", "params": "starttime:datetime = datetime(null), endtime:datetime = datetime(null), srcipaddr_has_any_prefix:dynamic = dynamic([]), dstipaddr_has_any_prefix:dynamic = dynamic([]), ipaddr_has_any_prefix:dynamic = dynamic([]), dstportnumber:int = int(null), hostname_has_any:dynamic = dynamic([]), dvcaction:dynamic = dynamic([]), eventresult:string = '*', disabled:bool = false"}}