{"_Im_NetworkSession_CheckPointFirewallV10": {"body": "let ProtocolLookup=datatable(Protocol:string,NetworkProtocol:string)\r\n    [\r\n        \"0\",\"HOPOPT\"\r\n        , \"1\",\"ICMP\"\r\n        , \"2\",\"IGMP\"\r\n        , \"3\",\"GGP\"\r\n        , \"4\",\"IPv4\"\r\n        , \"5\",\"ST\"\r\n        , \"6\",\"TCP\"\r\n        , \"7\",\"CBT\"\r\n        , \"8\",\"EGP\"\r\n        , \"9\",\"IGP\"\r\n        , \"10\",\"BBN-RCC-MON\"\r\n        , \"11\",\"NVP-II\"\r\n        , \"12\",\"PUP\"\r\n        , \"13\",\"ARGUS (deprecated)\"\r\n        , \"14\",\"EMCON\"\r\n        , \"15\",\"XNET\"\r\n        , \"16\",\"CHAOS\"\r\n        , \"17\",\"UDP\"\r\n        , \"18\",\"MUX\"\r\n        , \"19\",\"DCN-MEAS\"\r\n        , \"20\",\"HMP\"\r\n        , \"21\",\"PRM\"\r\n        , \"22\",\"XNS-IDP\"\r\n        , \"23\",\"TRUNK-1\"\r\n        , \"24\",\"TRUNK-2\"\r\n        , \"25\",\"LEAF-1\"\r\n        , \"26\",\"LEAF-2\"\r\n        , \"27\",\"RDP\"\r\n        , \"28\",\"IRTP\"\r\n        , \"29\",\"ISO-TP4\"\r\n        , \"30\",\"NETBLT\"\r\n        , \"31\",\"MFE-NSP\"\r\n        , \"32\",\"MERIT-INP\"\r\n        , \"33\",\"DCCP\"\r\n        , \"34\",\"3PC\"\r\n        , \"35\",\"IDPR\"\r\n        , \"36\",\"XTP\"\r\n        , \"37\",\"DDP\"\r\n        , \"38\",\"IDPR-CMTP\"\r\n        , \"39\",\"TP++\"\r\n        , \"40\",\"IL\"\r\n        , \"41\",\"IPv6\"\r\n        , \"42\",\"SDRP\"\r\n        , \"43\",\"IPv6-Route\"\r\n        , \"44\",\"IPv6-Frag\"\r\n        , \"45\",\"IDRP\"\r\n        , \"46\",\"RSVP\"\r\n        , \"47\",\"GRE\"\r\n        , \"48\",\"DSR\"\r\n        , \"49\",\"BNA\"\r\n        , \"50\",\"ESP\"\r\n        , \"51\",\"AH\"\r\n        , \"52\",\"I-NLSP\"\r\n        , \"53\",\"SWIPE (deprecated)\"\r\n        , \"54\",\"NARP\"\r\n        , \"55\",\"MOBILE\"\r\n        , \"56\",\"TLSP\"\r\n        , \"57\",\"SKIP\"\r\n        , \"58\",\"IPv6-ICMP\"\r\n        , \"59\",\"IPv6-NoNxt\"\r\n        , \"60\",\"IPv6-Opts\"\r\n        , \"61\",\"\"\r\n        , \"62\",\"CFTP\"\r\n        , \"63\",\"\"\r\n        , \"64\",\"SAT-EXPAK\"\r\n        , \"65\",\"KRYPTOLAN\"\r\n        , \"66\",\"RVD\"\r\n        , \"67\",\"IPPC\"\r\n        , \"68\",\"\"\r\n        , \"69\",\"SAT-MON\"\r\n        , \"70\",\"VISA\"\r\n        , \"71\",\"IPCV\"\r\n        , \"72\",\"CPNX\"\r\n        , \"73\",\"CPHB\"\r\n        , \"74\",\"WSN\"\r\n        , \"75\",\"PVP\"\r\n        , \"76\",\"BR-SAT-MON\"\r\n        , \"77\",\"SUN-ND\"\r\n        , \"78\",\"WB-MON\"\r\n        , \"79\",\"WB-EXPAK\"\r\n        , \"80\",\"ISO-IP\"\r\n        , \"81\",\"VMTP\"\r\n        , \"82\",\"SECURE-VMTP\"\r\n        , \"83\",\"VINES\"\r\n        , \"84\",\"TTP\"\r\n        , \"84\",\"IPTM\"\r\n        , \"85\",\"NSFNET-IGP\"\r\n        , \"86\",\"DGP\"\r\n        , \"87\",\"TCF\"\r\n        , \"88\",\"EIGRP\"\r\n        , \"89\",\"OSPFIGP\"\r\n        , \"90\",\"Sprite-RPC\"\r\n        , \"91\",\"LARP\"\r\n        , \"92\",\"MTP\"\r\n        , \"93\",\"AX.25\"\r\n        , \"94\",\"IPIP\"\r\n        , \"95\",\"MICP (deprecated)\"\r\n        , \"96\",\"SCC-SP\"\r\n        , \"97\",\"ETHERIP\"\r\n        , \"98\",\"ENCAP\"\r\n        , \"99\",\"\"\r\n        , \"100\",\"GMTP\"\r\n        , \"101\",\"IFMP\"\r\n        , \"102\",\"PNNI\"\r\n        , \"103\",\"PIM\"\r\n        , \"104\",\"ARIS\"\r\n        , \"105\",\"SCPS\"\r\n        , \"106\",\"QNX\"\r\n        , \"107\",\"A/N\"\r\n        , \"108\",\"IPComp\"\r\n        , \"109\",\"SNP\"\r\n        , \"110\",\"Compaq-Peer\"\r\n        , \"111\",\"IPX-in-IP\"\r\n        , \"112\",\"VRRP\"\r\n        , \"113\",\"PGM\"\r\n        , \"114\",\"\"\r\n        , \"115\",\"L2TP\"\r\n        , \"116\",\"DDX\"\r\n        , \"117\",\"IATP\"\r\n        , \"118\",\"STP\"\r\n        , \"119\",\"SRP\"\r\n        , \"120\",\"UTI\"\r\n        , \"121\",\"SMP\"\r\n        , \"122\",\"SM (deprecated)\"\r\n        , \"123\",\"PTP\"\r\n        , \"124\",\"ISIS over IPv4\"\r\n        , \"125\",\"FIRE\"\r\n        , \"126\",\"CRTP\"\r\n        , \"127\",\"CRUDP\"\r\n        , \"128\",\"SSCOPMCE\"\r\n        , \"129\",\"IPLT\"\r\n        , \"130\",\"SPS\"\r\n        , \"131\",\"PIPE\"\r\n        , \"132\",\"SCTP\"\r\n        , \"133\",\"FC\"\r\n        , \"134\",\"RSVP-E2E-IGNORE\"\r\n        , \"135\",\"Mobility Header\"\r\n        , \"136\",\"UDPLite\"\r\n        , \"137\",\"MPLS-in-IP\"\r\n        , \"138\",\"manet\"\r\n        , \"139\",\"HIP\"\r\n        , \"140\",\"Shim6\"\r\n        , \"141\",\"WESP\"\r\n        , \"142\",\"ROHC\"\r\n        , \"143\",\"Ethernet\"\r\n        , \"253\",\"\"\r\n        , \"254\",\"\"\r\n        , \"255\",\"Reserved\"];\r\n    let DirectionLookup=datatable(conn_direction:string,NetworkDirection:string)\r\n    [\r\n        \"Incoming\",\"Inbound\", \r\n        \"Outgoing\",\"Outbound\", \r\n        \"Internal\",\"Local\"];\r\n    let ActionLookup=datatable(DeviceAction:string,DvcAction:string,EventResult:string,EventSeverity:string)\r\n    [\r\n        \"Accept\",\"Allow\",\"Success\",\"Informational\",\r\n        \"Allow\",\"Allow\",\"Success\",\"Informational\",\r\n        \"Drop\",\"Drop\",\"Failure\",\"Low\",\r\n        \"Reject\",\"Deny\",\"Failure\",\"Low\",\r\n        \"Encrypt\",\"Encrypt\",\"Success\",\"Informational\",\r\n        \"Decrypt\",\"Decrypt\",\"Success\",\"Informational\",\r\n        \"Bypass\",\"Allow\",\"Success\",\"Informational\",\r\n        \"Block\",\"Deny\",\"Failure\",\"Low\",\r\n        \"\",\"\",\"NA\",\"Informational\"\r\n     ];\r\n      let NWParser=(\r\n          starttime:datetime=datetime(null), \r\n          endtime:datetime=datetime(null),\r\n          srcipaddr_has_any_prefix:dynamic=dynamic([]), \r\n          dstipaddr_has_any_prefix:dynamic=dynamic([]), \r\n          ipaddr_has_any_prefix:dynamic=dynamic([]),\r\n          dstportnumber:int=int(null), \r\n          hostname_has_any:dynamic=dynamic([]), \r\n          dvcaction:dynamic=dynamic([]), \r\n          eventresult:string='*', \r\n          disabled:bool=false)\r\n      {\r\n      let src_or_any = set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \r\n      let dst_or_any = set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix);\r\n      CommonSecurityLog\r\n      | where not(disabled)\r\n      | where\r\n                      (isnull(starttime) or TimeGenerated >= starttime) \r\n                      and (isnull(endtime) or TimeGenerated <= endtime)\r\n      | where \r\n                      array_length(hostname_has_any) == 0\r\n      | where DeviceVendor==\"Check Point\" and DeviceProduct==\"VPN-1 & FireWall-1\"\r\n      | where (isnull(dstportnumber) or (DestinationPort == dstportnumber))\r\n      | extend temp_isSrcMatch=has_any_ipv4_prefix(SourceIP,src_or_any), \r\n               temp_isDstMatch=has_any_ipv4_prefix(DestinationIP,dst_or_any)\r\n      | extend ASimMatchingIpAddr = case(\r\n                          array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, \"-\", // match not requested\r\n                          (temp_isSrcMatch and temp_isDstMatch), \"Both\", // has to be checked before the individual \r\n                          temp_isSrcMatch, \"SrcIpAddr\",\r\n                          temp_isDstMatch, \"DstIpAddr\",\r\n                          \"No match\"\r\n                      )\r\n      | where ASimMatchingIpAddr != \"No match\"\r\n      | lookup ActionLookup on DeviceAction\r\n      | where ((array_length(dvcaction) == 0) or DvcAction has_any (dvcaction))\r\n      | where ((eventresult == \"*\") or (EventResult == eventresult))\r\n      | lookup ProtocolLookup on Protocol\r\n      | extend \r\n              EventProduct = \"Firewall\",\r\n              EventCount = toint(1),\r\n              EventType = \"NetworkSession\",\r\n              EventSchema = \"NetworkSession\",\r\n              EventSchemaVersion = \"0.2.4\"\r\n      | parse-kv AdditionalExtensions as (\r\n                  rule_uid:string,\r\n                  loguid:string,\r\n                  origin:string,\r\n                  originsicname:string,\r\n                  inzone:string,\r\n                  outzone:string,\r\n                  conn_direction:string,\r\n                  alert:string,\r\n                  inspection_category:string,\r\n                  inspection_item:string\r\n              ) with (pair_delimiter=';', kv_delimiter='=')\r\n      | extend\r\n              ThreatCategory = coalesce(alert, inspection_category),\r\n              NetworkRuleName = coalesce(DeviceCustomString2, rule_uid, Activity),\r\n              EventStartTime = TimeGenerated\r\n      | parse originsicname with \"CN\\\\=\" DvcHostname \",\" *\r\n      | project-rename\r\n              Dvc = origin,                \r\n              EventOriginalUid = loguid,\r\n              ThreatName = inspection_item,\r\n              EventVendor = DeviceVendor,\r\n              DstPortNumber = DestinationPort,\r\n              DstIpAddr = DestinationIP,\r\n              SrcPortNumber = SourcePort,\r\n              SrcIpAddr = SourceIP,\r\n              DstNatIpAddr = DestinationTranslatedAddress,\r\n              DstNatPortNumber = DestinationTranslatedPort,\r\n              SrcNatIpAddr = SourceTranslatedAddress,\r\n              SrcNatPortNumber = SourceTranslatedPort,\r\n              EventProductVersion = DeviceVersion,\r\n              EventOriginalSeverity = LogSeverity,\r\n              Rule = NetworkRuleName,\r\n              DvcOriginalAction = DeviceAction,\r\n              DstAppName = Activity,\r\n              EventMessage = Message\r\n      | lookup DirectionLookup on conn_direction\r\n      | extend \r\n              EventEndTime = EventStartTime,\r\n              IpAddr = SrcIpAddr,\r\n              Dst = DstIpAddr,\r\n              Src = SrcIpAddr,\r\n              NetworkDirection = case(\r\n                                  isnotempty(NetworkDirection), NetworkDirection,\r\n                                  inzone == \"Internal\" and (outzone == \"Internal\" or outzone == \"Local\"), \"Local\",\r\n                                  (inzone == \"Internal\" or inzone == \"Local\") and outzone == \"External\", \"Outbound\",\r\n                                  inzone == \"External\" and (outzone == \"Internal\" or outzone == \"Local\"), \"Inbound\",\r\n                                  CommunicationDirection == \"0\", \"Inbound\",\r\n                                  CommunicationDirection == \"1\", \"Outbound\",\r\n                                  \"\"\r\n                                  ),\r\n              EventSeverity = iif(isnotempty(ThreatCategory),\"High\",EventSeverity),\r\n              NetworkIcmpType = coalesce(\r\n                                      tostring(column_ifexists(\"fieldDeviceCustomNumber2\", long(null))),\r\n                                      tostring(column_ifexists(\"DeviceCustomNumber2\",long(null)))\r\n                                      ),\r\n              NetworkIcmpCode = coalesce(\r\n                                      toint(column_ifexists(\"fieldDeviceCustomNumber3\", long(null))),\r\n                                      toint(column_ifexists(\"DeviceCustomNumber3\",long(null)))\r\n                                      )\r\n      | project-away ApplicationProtocol, AdditionalExtensions, CommunicationDirection, Computer, Device*, Destination*, EndTime, ExternalID, File*, Flex*, IndicatorThreatType, Malicious*, Old*, OriginalLogSeverity, Process*, Protocol, ReceiptTime, ReceivedBytes, Remote*, ReportReferenceLink, Request*, Sent*, SimplifiedDeviceAction, Source*, StartTime, TenantId, ThreatConfidence, ThreatDescription, ThreatSeverity, rule_uid, originsicname, inzone, outzone, alert, conn_direction, inspection_category, temp_isDstMatch, temp_isSrcMatch\r\n    };\r\n    NWParser (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, dstipaddr_has_any_prefix=dstipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, dstportnumber=dstportnumber, hostname_has_any=hostname_has_any, dvcaction=dvcaction, eventresult=eventresult, disabled=disabled)", "params": "starttime:datetime = datetime(null), endtime:datetime = datetime(null), srcipaddr_has_any_prefix:dynamic = dynamic([]), dstipaddr_has_any_prefix:dynamic = dynamic([]), ipaddr_has_any_prefix:dynamic = dynamic([]), dstportnumber:int = int(null), hostname_has_any:dynamic = dynamic([]), dvcaction:dynamic = dynamic([]), eventresult:string = '*', disabled:bool = false"}}