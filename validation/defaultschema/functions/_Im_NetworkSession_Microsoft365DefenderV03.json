{"_Im_NetworkSession_Microsoft365DefenderV03": {"body": "let M365Defender=\r\n  (starttime:datetime=datetime(null)\r\n  , endtime:datetime=datetime(null)\r\n  , srcipaddr_has_any_prefix:dynamic=dynamic([])\r\n  , dstipaddr_has_any_prefix:dynamic=dynamic([])\r\n  , ipaddr_has_any_prefix:dynamic=dynamic([])\r\n  , dstportnumber:int=int(null)\r\n  , hostname_has_any:dynamic=dynamic([])\r\n  , dvcaction:dynamic=dynamic([])\r\n  , eventresult:string='*'\r\n  , disabled:bool=false\r\n ){\r\nlet DirectionLookup=datatable(ActionType:string,NetworkDirection:string,Outbound:boolean)[\r\n  'ConnectionSuccess','Outbound', true\r\n  ,'ConnectionFailed', 'Outbound', true\r\n  ,'ConnectionRequest','Outbound', true\r\n  ,'InboundConnectionAccepted', 'Inbound', false\r\n  ,'ConnectionFound', 'Unknown', false\r\n  ,'ListeningConnectionCreated', 'Listen', false \r\n];\r\nlet src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \r\nlet dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix);  \r\n// -- Common preprocessing to both input and outbound events\r\nlet RawNetworkEvents = (select_outbound:boolean) {\r\n  DeviceNetworkEvents \r\n  | where    (isnull(starttime) or TimeGenerated>=starttime) \r\n         and (isnull(endtime) or TimeGenerated<=endtime) \r\n  | where not(disabled)\r\n  | lookup DirectionLookup on ActionType\r\n  | where Outbound == select_outbound\r\n  | project-away AppGuardContainerId, LocalIPType, MachineGroup, RemoteIPType, Timestamp // , SourceSystem, TenantId, \r\n  // --  Pre-filtering\r\n  |where  (array_length(dvcaction)==0 )     /// if filtered by action return nothing\r\n         and (isnull(dstportnumber) or dstportnumber == LocalPort or dstportnumber == RemotePort)\r\n         and (array_length(hostname_has_any)==0 \r\n            or RemoteUrl has_any(hostname_has_any) or DeviceName has_any(hostname_has_any)\r\n            )\r\n  | extend temp_isSrcMatch=( // only one of each pair has_any_ipv4_prefix is calculated\r\n                  (Outbound and has_any_ipv4_prefix(LocalIP,src_or_any))\r\n                  or\r\n                  (not(Outbound) and has_any_ipv4_prefix(RemoteIP,src_or_any))\r\n                  ) \r\n         , temp_isDstMatch=(\r\n                  (not(Outbound) and has_any_ipv4_prefix(LocalIP,dst_or_any))\r\n                  or\r\n                  (Outbound and has_any_ipv4_prefix(RemoteIP,dst_or_any))\r\n                  ) \r\n  | extend ASimMatchingIpAddr = case(\r\n          array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, \"-\" // match not requested: probably most common case\r\n          , (temp_isSrcMatch and temp_isDstMatch), \"Both\" // has to be checked before the individual \r\n          , temp_isSrcMatch, \"SrcIpAddr\"\r\n          , temp_isDstMatch, \"DstIpAddr\"\r\n          , \"No match\"\r\n  ) \r\n  | where ASimMatchingIpAddr != \"No match\"\r\n  | project-away temp_*\r\n  | extend EventResult = iff(ActionType=='ConnectionFailed','Failure','Success')\r\n  | where (eventresult=='*' or EventResult==eventresult)\r\n  // -- End of pre-filtering\r\n  | extend\r\n    // Event\r\n    EventOriginalUid = tostring(ReportId),\r\n    EventCount = int(1),\r\n    EventProduct = 'M365 Defender for Endpoint',\r\n    EventVendor = 'Microsoft',\r\n    EventSchema = 'NetworkSession',\r\n    EventSchemaVersion = '0.2.3',\r\n    EventStartTime = TimeGenerated,\r\n    EventEndTime = TimeGenerated,\r\n    EventType = 'NetworkSession',\r\n    EventSeverity = \"Informational\",\r\n    DvcIdType = 'MDEid'\r\n  | project-away \r\n      ReportId, Outbound\r\n  | project-rename \r\n      EventOriginalResultDetails = ActionType\r\n  | extend\r\n    RemoteUrl = extract (@\"(?:https?://)?(.*)\", 1, RemoteUrl)\r\n  | extend\r\n    User = iff (InitiatingProcessAccountDomain == '', InitiatingProcessAccountName, strcat(InitiatingProcessAccountDomain, '\\\\', InitiatingProcessAccountName)),\r\n    UsernameType = iff(InitiatingProcessAccountDomain == '','Simple', 'Windows'),\r\n    SplitHostname = split(DeviceName,\".\"),\r\n    SplitUrl = split(RemoteUrl,\".\"),\r\n    NetworkProtocol = case (\r\n      Protocol startswith \"Tcp\", \"TCP\",\r\n      Protocol == \"Unknown\", \"\",\r\n      toupper(Protocol)\r\n    )\r\n  | project-away Protocol\r\n  | extend  \r\n    DvcHostname = tostring(SplitHostname[0]),\r\n    DvcDomain = tostring(strcat_array(array_slice(SplitHostname, 1, -1), '.')),\r\n    DvcFQDN = iif (DeviceName contains \".\", DeviceName, \"\"),\r\n    UrlHostname = tostring(SplitUrl[0]),\r\n    UrlDomain = tostring(strcat_array(array_slice(SplitUrl, 1, -1), '.')),\r\n    UrlFQDN = iif(RemoteUrl contains \".\", RemoteUrl, \"\")\r\n  | project-away RemoteUrl, DeviceName\r\n  | extend\r\n    DvcDomainType = iif(DvcFQDN != \"\", \"FQDN\", \"\"),\r\n    UrlDomainType = iff(UrlFQDN != \"\", \"FQDN\", \"\"),\r\n    DvcIpAddr = LocalIP\r\n  | extend\r\n    Dvc = DvcHostname  \r\n  | project-rename\r\n    DvcId = DeviceId\r\n  | project-away SplitUrl, SplitHostname\r\n};\r\nlet OutboundNetworkEvents = \r\n  RawNetworkEvents (true)\r\n  // *************** Postfilterring *****************************************************************\r\n  | where (isnull(dstportnumber) or dstportnumber==RemotePort)\r\n  // *************** /Postfilterring *****************************************************************\r\n  | extend temp_isMatchSrcHostname=DvcHostname has_any(hostname_has_any)\r\n         , temp_isMatchDstHostname=UrlHostname has_any(hostname_has_any)\r\n  |extend ASimMatchingHostname = case(array_length(hostname_has_any) == 0 ,\"-\",\r\n                              temp_isMatchDstHostname and temp_isMatchSrcHostname, \"Both\",\r\n                              temp_isMatchDstHostname, \"DstHostname\",\r\n                              temp_isMatchSrcHostname, \"SrcHostname\",\r\n                                \"No match\"\r\n                            )\r\n  | project-away temp*\r\n  | where ASimMatchingHostname != \"No match\"\r\n  | project-rename\r\n     DstIpAddr = RemoteIP,\r\n     SrcIpAddr = LocalIP,\r\n     DstPortNumber = RemotePort,\r\n     SrcPortNumber = LocalPort,\r\n     SrcUsernameType = UsernameType,\r\n     SrcUserAadId = InitiatingProcessAccountObjectId,\r\n     SrcUserId = InitiatingProcessAccountSid,\r\n     SrcUserUpn = InitiatingProcessAccountUpn\r\n  | extend\r\n     SrcUsername = User,\r\n     SrcDvcId = DvcId,\r\n     SrcDvcIdType = 'MDEid',\r\n     SrcUserIdType = \"SID\",\r\n     DstHostname = UrlHostname\r\n  | project-rename\r\n     DstDomain = UrlDomain,\r\n     DstFQDN = UrlFQDN,\r\n     DstDomainType = UrlDomainType\r\n  | extend  \r\n     SrcHostname = DvcHostname,\r\n     SrcDomain = DvcDomain,\r\n     SrcFQDN = DvcFQDN,\r\n     SrcDomainType = DvcDomainType\r\n  // Processes\r\n  | extend\r\n     SrcProcessId = tostring(InitiatingProcessId),\r\n     ParentProcessId = tostring(InitiatingProcessParentId)\r\n  | project-rename\r\n     SrcProcessName = InitiatingProcessFileName,\r\n     SrcProcessCommandLine = InitiatingProcessCommandLine,\r\n     SrcProcessCreationTime = InitiatingProcessCreationTime,\r\n     SrcProcessIntegrityLevel = InitiatingProcessIntegrityLevel,\r\n     SrcProcessTokenElevation = InitiatingProcessTokenElevation,\r\n     ParentProcessName = InitiatingProcessParentFileName,\r\n     ParentProcessCreationTime = InitiatingProcessParentCreationTime\r\n  | extend\r\n     Process = SrcProcessName,\r\n     ProcessId = SrcProcessId,\r\n     SrcAppName = SrcProcessName,\r\n     SrcAppType = \"Process\"\r\n;\r\nlet InboundNetworkEvents = \r\n  RawNetworkEvents (false)\r\n  // *************** Postfilterring *****************************************************************\r\n  | where (isnull(dstportnumber) or dstportnumber==LocalPort)\r\n  // *************** /Postfilterring *****************************************************************\r\n    |extend ASimMatchingHostname = case(array_length(hostname_has_any) == 0 ,\"\",\r\n                                UrlHostname has_any(hostname_has_any), \"SrcHostname\",\r\n                                DvcHostname has_any(hostname_has_any), \"DstHostname\",\r\n                                \"No match\"\r\n                            )\r\n  | where ASimMatchingHostname != \"No match\"\r\n  | project-rename\r\n     SrcIpAddr = RemoteIP,\r\n     DstIpAddr = LocalIP,\r\n     SrcPortNumber = RemotePort,\r\n     DstPortNumber = LocalPort,\r\n     DstUsernameType = UsernameType,\r\n     DstUserAadId = InitiatingProcessAccountObjectId,\r\n     DstUserId = InitiatingProcessAccountSid,\r\n     DstUserUpn = InitiatingProcessAccountUpn,\r\n     SrcDomain = UrlDomain,\r\n     SrcFQDN = UrlFQDN,\r\n     SrcDomainType = UrlDomainType\r\n  | extend\r\n     DstUsername = User,\r\n     DstDvcId = DvcId,\r\n     DstDvcIdType = 'MDEid',\r\n     DstUserIdType = 'SID',\r\n     SrcHostname = UrlHostname\r\n  | extend  \r\n     DstHostname = DvcHostname,\r\n     DstDomain = DvcDomain,\r\n     DstFQDN = DvcFQDN\r\n  // Processes\r\n  | extend\r\n     DstProcessId = tostring(InitiatingProcessId),\r\n     ParentProcessId = tostring(InitiatingProcessParentId)\r\n  | project-rename\r\n     DstProcessName = InitiatingProcessFileName,\r\n     DstProcessCommandLine = InitiatingProcessCommandLine,\r\n     DstProcessCreationTime = InitiatingProcessCreationTime,\r\n     DstProcessIntegrityLevel = InitiatingProcessIntegrityLevel,\r\n     DstProcessTokenElevation = InitiatingProcessTokenElevation,\r\n     ParentProcessName = InitiatingProcessParentFileName,\r\n     ParentProcessCreationTime = InitiatingProcessParentCreationTime\r\n  | extend\r\n     Process = DstProcessName,\r\n     DstAppName = DstProcessName,\r\n     DstAppType = \"Process\"\r\n;\r\nunion InboundNetworkEvents, OutboundNetworkEvents\r\n| project-rename \r\n   Hostname = UrlHostname\r\n| extend // aliases\r\n   IpAddr = SrcIpAddr,\r\n   Src = SrcIpAddr,\r\n   Dst = DstIpAddr \r\n};\r\nM365Defender (starttime, endtime, srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix, dstportnumber, hostname_has_any, dvcaction, eventresult, disabled)\r\n", "params": "starttime:datetime = datetime(null), endtime:datetime = datetime(null), srcipaddr_has_any_prefix:dynamic = dynamic([]), dstipaddr_has_any_prefix:dynamic = dynamic([]), ipaddr_has_any_prefix:dynamic = dynamic([]), dstportnumber:int = int(null), hostname_has_any:dynamic = dynamic([]), dvcaction:dynamic = dynamic([]), eventresult:string = '*', disabled:bool = false"}}