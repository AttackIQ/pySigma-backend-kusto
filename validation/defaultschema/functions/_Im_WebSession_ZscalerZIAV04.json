{"_Im_WebSession_ZscalerZIAV04": {"body": "let DvcActionLookup = datatable (DeviceAction:string, DvcAction: string) \r\n[\r\n  'Allowed', 'Allow',\r\n  'Blocked', 'Deny'\r\n]; \r\nlet remove_protocol_from_list = (list:dynamic) \r\n{\r\n    print list \r\n    | mv-apply l = print_0 to typeof(string) on\r\n    ( extend l = replace_regex (tostring(l), \"^(?i:.*?)://\", \"\") ) \r\n    | project l\r\n};\r\nlet parser = (\r\nstarttime:datetime=datetime(null), \r\nendtime:datetime=datetime(null),\r\nsrcipaddr_has_any_prefix:dynamic=dynamic([]), \r\nipaddr_has_any_prefix:dynamic=dynamic([]), \r\nurl_has_any:dynamic=dynamic([]),\r\nhttpuseragent_has_any:dynamic=dynamic([]),\r\neventresultdetails_in:dynamic=dynamic([]),\r\neventresult:string='*',\r\ndisabled:bool=false\r\n){\r\nCommonSecurityLog | where not(disabled)\r\n| where DeviceVendor == \"Zscaler\"\r\n| where DeviceProduct == \"NSSWeblog\"\r\n// -- Pre filtering\r\n| where  \r\n  (isnull(starttime) or TimeGenerated >= starttime) \r\n  and (isnull(endtime) or TimeGenerated <= endtime) \r\n  and ((array_length(httpuseragent_has_any) == 0) or (RequestClientApplication has_any (httpuseragent_has_any)))\r\n  and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(SourceIP, srcipaddr_has_any_prefix))\r\n| extend \r\n    ASimMatchingIpAddr = case( \r\n      array_length(ipaddr_has_any_prefix) == 0 , \"-\",\r\n      has_any_ipv4_prefix(DestinationIP, ipaddr_has_any_prefix), \"DstIpAddr\",\r\n      has_any_ipv4_prefix(SourceIP,  ipaddr_has_any_prefix), \"SrcIpAddr\"\r\n                                                           , \"No match\"\r\n          )\r\n| where\r\n  (ASimMatchingIpAddr != \"No match\")\r\n  and ((array_length(eventresultdetails_in) == 0) or (AdditionalExtensions has_any (eventresultdetails_in)))\r\n  and ((array_length(url_has_any) == 0) or (RequestURL has_any (remove_protocol_from_list(url_has_any))))\r\n// -- Parse\r\n| parse AdditionalExtensions with \r\n    * \"rulelabel=\" RuleName:string \";\"\r\n    \"ruletype=\" ruletype:string \";\"\r\n    \"urlclass=\" urlclass:string \";\"\r\n    \"devicemodel=\" * \r\n // -- Post filtering\r\n| extend\r\n  // -- Adjustment to support both old and new CSL fields.\r\n  EventResultDetails = coalesce(\r\n    column_ifexists(\"EventOutcome\", \"\"),\r\n    extract(@'outcome=(.*?)(?:;|$)',1, AdditionalExtensions, typeof(string))\r\n  )\r\n| where\r\n  ((array_length(eventresultdetails_in) == 0) or (EventResultDetails in (eventresultdetails_in)))\r\n| extend\r\n  EventResult = iff (EventResultDetails == \"NA\" or toint(EventResultDetails) >= 400, \"Failure\", \"Success\")\r\n| where eventresult == \"*\" or eventresult == EventResult\r\n// -- Event fields\r\n| lookup DvcActionLookup on DeviceAction\r\n| extend \r\n  // -- Adjustment to support both old and new CSL fields.\r\n  EventOriginalResultDetails = coalesce(\r\n    column_ifexists(\"Reason\", \"\"),\r\n    extract(@'reason=(.*?)(?:;|$)',1, AdditionalExtensions, typeof(string))\r\n  ),\r\n  ThreatRiskLevel = coalesce(\r\n    toint(column_ifexists(\"fieldDeviceCustomNumber1\", int(null))),\r\n    toint(column_ifexists(\"DeviceCustomNumber1\",int(null)))\r\n  ),\r\n  EventCount=int(1), \r\n  EventStartTime=TimeGenerated,  \r\n  EventVendor = \"Zscaler\", \r\n  EventProduct = \"ZIA Proxy\", \r\n  EventSchema = \"WebSession\", \r\n  EventSchemaVersion=\"0.2.3\", \r\n  EventType = 'HTTPsession',\r\n  EventEndTime=TimeGenerated\r\n// -- Field mapping\r\n| project-rename\r\n  EventProductVersion = DeviceVersion,\r\n  NetworkApplicationProtocol = ApplicationProtocol,\r\n  HttpContentType = FileType,\r\n  HttpUserAgent = RequestClientApplication,\r\n  HttpRequestMethod = RequestMethod,\r\n  DstAppName = DestinationServiceName,\r\n  DstIpAddr = DestinationIP,\r\n  DstFQDN = DestinationHostName,\r\n  SrcIpAddr = SourceIP,\r\n  SrcUsername = SourceUserName,\r\n  SrcNatIpAddr= SourceTranslatedAddress,\r\n  SrcUserDepartment = SourceUserPrivileges, // Not part of the standard schema\r\n  UrlCategory = DeviceCustomString2,\r\n  ThreatName = DeviceCustomString5,\r\n  FileMD5 = DeviceCustomString6\r\n// -- Calculated fields\r\n| extend\r\n  Url = iff (RequestURL == \"\", \"\", strcat (tolower(NetworkApplicationProtocol), \"://\", url_decode(RequestURL))),\r\n  UrlCategory = strcat (urlclass, \"/\", UrlCategory),\r\n  ThreatCategory = iff(DeviceCustomString4 == \"None\", \"\", strcat (DeviceCustomString3, \"/\", DeviceCustomString4)),\r\n  RuleName = iff (RuleName == \"None\", \"\", strcat (ruletype, \"/\", RuleName)),\r\n  FileMD5 = iff (FileMD5 == \"None\", \"\", FileMD5),\r\n  HttpReferrer = iff (RequestContext == \"None\", \"\", url_decode(RequestContext)),\r\n  DstAppName = iff (DstAppName == \"General Browsing\", \"\", DstAppName),\r\n  DstFQDNparts = split (DstFQDN, \".\"),\r\n  DstHostnameNotAddr = DstIpAddr != DstFQDN,\r\n  DstBytes = toint(ReceivedBytes),\r\n  SrcBytes = toint(SentBytes),\r\n  DvcHostname = tostring(Computer)\r\n| extend\r\n  DstHostname = iff (DstHostnameNotAddr, tostring(DstFQDNparts[0]), DstFQDN),\r\n  DstDomain = iff (DstHostnameNotAddr, strcat_array(array_slice(DstFQDNparts,1,-1),\".\"), \"\"),\r\n  DstFQDN = iff (DstHostnameNotAddr, DstFQDN, \"\") \r\n// -- Enrichment\r\n| extend\r\n  EventSeverity = case (ThreatRiskLevel > 90, \"High\", ThreatRiskLevel > 60, \"Medium\", ThreatRiskLevel > 10, \"Low\",  \"Informational\"),\r\n  DstAppType = \"SaaS application\",\r\n  DstDomainType = iff (DstHostnameNotAddr, \"FQDN\", \"\"),\r\n  SrcUsernameType = \"UPN\"\r\n// -- Aliases\r\n| extend\r\n  Dvc = DvcHostname,\r\n  UserAgent = HttpUserAgent,\r\n  User = SrcUsername,\r\n  HttpStatusCode = EventResultDetails,\r\n  IpAddr = SrcNatIpAddr,\r\n  Src = SrcNatIpAddr,\r\n  Dst = DstFQDN,\r\n  Hash = FileMD5,\r\n  Hostname = DstHostname,\r\n  FileHashType = iff(FileMD5 == \"\", \"\", \"MD5\")\r\n| project-away \r\n  DstFQDNparts, AdditionalExtensions, DeviceCustom*\r\n};\r\nparser (starttime, endtime\r\n   , srcipaddr_has_any_prefix, ipaddr_has_any_prefix\r\n   , url_has_any, httpuseragent_has_any\r\n   , eventresultdetails_in, eventresult, disabled)\r\n", "params": "starttime:datetime = datetime(null), endtime:datetime = datetime(null), srcipaddr_has_any_prefix:dynamic = dynamic([]), ipaddr_has_any_prefix:dynamic = dynamic([]), url_has_any:dynamic = dynamic([]), httpuseragent_has_any:dynamic = dynamic([]), eventresultdetails_in:dynamic = dynamic([]), eventresult:string = '*', disabled:bool = false"}}