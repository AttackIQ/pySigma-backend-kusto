{"_Im_WebSession_SquidProxyV06": {"body": "let parser = (\r\n  starttime:datetime=datetime(null), \r\n  endtime:datetime=datetime(null),\r\n  srcipaddr_has_any_prefix:dynamic=dynamic([]), \r\n  ipaddr_has_any_prefix:dynamic=dynamic([]), \r\n  url_has_any:dynamic=dynamic([]),\r\n  httpuseragent_has_any:dynamic=dynamic([]),\r\n  eventresultdetails_in:dynamic=dynamic([]),\r\n  eventresult:string='*',\r\n  disabled:bool=false\r\n ){\r\nSquidProxy_CL | where not(disabled)\r\n  // -- Pre filtering\r\n  | where  \r\n    (isnull(starttime) or TimeGenerated >= starttime) \r\n    and (isnull(endtime) or TimeGenerated <= endtime) \r\n    and (array_length(httpuseragent_has_any) == 0)\r\n    and ((array_length(url_has_any) == 0) or (RawData has_any (url_has_any)))\r\n    and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(RawData, srcipaddr_has_any_prefix))\r\n    and ((array_length(ipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(RawData, ipaddr_has_any_prefix))\r\n    and ((array_length(eventresultdetails_in) == 0) or (RawData has_any (eventresultdetails_in)))\r\n  // -- Parse\r\n  | extend AccessRawLog = extract_all(@\"^(\\d+\\.\\d+)\\s+(\\d+)\\s(\\S+)\\s([A-Z_]+)\\/(\\d+)\\s(\\d+)\\s([A-Z]+)\\s(\\S+)\\s(\\S+)\\s([A-Z_]+)\\/(\\S+)\\s(\\S+)\",dynamic([1,2,3,4,5,6,7,8,9,10,11,12]),RawData)[0]\r\n  // -- Post filtering\r\n  | extend EventResultDetails = tostring(AccessRawLog[4])\r\n  | where array_length(eventresultdetails_in) == 0 or EventResultDetails in (eventresultdetails_in)\r\n  | extend EventOriginalResultDetails = strcat (tostring(AccessRawLog[3]), \";\", PeerStatus = tostring(AccessRawLog[9]))\r\n  | extend EventResult = iff (EventOriginalResultDetails has_any ('DENIED', 'INVALID', 'FAIL', 'ABORTED','TIMEOUT') or toint(EventResultDetails) >= 400, \"Failure\", \"Success\")\r\n  | where eventresult == \"*\" or eventresult == EventResult\r\n  // -- Map\r\n  | project-rename\r\n    Dvc = Computer\r\n  | extend\r\n    EventEndTime = unixtime_milliseconds_todatetime(todouble(tostring(AccessRawLog[0]))*1000), \r\n    NetworkDuration = toint(AccessRawLog[1]), \r\n    SrcIpAddr = tostring(AccessRawLog[2]), \r\n    DstBytes = tolong(AccessRawLog[5]), \r\n    HttpRequestMethod = tostring(AccessRawLog[6]), \r\n    // -- Squid URL might be shortened by including ellipsis (...) instead of a section in the middle. This may impact the hostname part as well.\r\n    Url = tostring(AccessRawLog[7]), \r\n    SrcUsername = tostring(AccessRawLog[8]), \r\n    DstIpAddr = tostring(AccessRawLog[10]), \r\n    HttpContentType = tostring(AccessRawLog[11]) \r\n  //\r\n  | extend \r\n    ASimMatchingIpAddr = case( \r\n      array_length(ipaddr_has_any_prefix) == 0             , \"-\",\r\n      has_any_ipv4_prefix(DstIpAddr, ipaddr_has_any_prefix), \"DstIpAddr\",\r\n      has_any_ipv4_prefix(SrcIpAddr, ipaddr_has_any_prefix), \"SrcIpAddr\"\r\n                                                           , \"No match\"\r\n          )\r\n  // Post Filter\r\n  | where \r\n      (\r\n        (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix))\r\n        and (ASimMatchingIpAddr != \"No match\")\r\n      )\r\n  // -- Constant fields\r\n  | extend \r\n    EventCount = int(1), \r\n    EventProduct = 'Squid Proxy', \r\n    EventVendor = 'Squid', \r\n    EventSchema = 'WebSession', \r\n    EventSchemaVersion = '0.2.3', \r\n    EventType = 'HTTPsession' \r\n  // -- Value normalization\r\n  | extend\r\n    SrcUsernameType = \"Unknown\",\r\n    SrcUsername = iff (SrcUsername == \"-\", \"\", SrcUsername), \r\n    HttpContentType = iff (HttpContentType in (\":\", \"-\"), \"\", HttpContentType), \r\n    DstIpAddrIsHost = DstIpAddr matches regex @\"^[^\\:]*[a-zA-Z]$\"\r\n  | extend \r\n    FQDN = iif (DstIpAddrIsHost, DstIpAddr, tostring(parse_url(Url)[\"Host\"])),\r\n    DstIpAddr = iif (DstIpAddr == \"-\" or DstIpAddrIsHost, \"\", DstIpAddr)\r\n  | extend \r\n    EventSeverity = iff(EventResult == \"Success\", \"Informational\", \"Low\")\r\n  | invoke _ASIM_ResolveDstFQDN ('FQDN')\r\n  // -- aliases\r\n  | extend \r\n    EventStartTime = EventEndTime,\r\n    Duration = NetworkDuration,\r\n    HttpStatusCode = EventResultDetails,\r\n    User = SrcUsername,\r\n    IpAddr = SrcIpAddr,\r\n    Src = SrcIpAddr,\r\n    Dst = DstHostname,\r\n    Hostname = DstHostname\r\n  | project-away AccessRawLog, RawData, *_s, MG, ManagementGroupName, SourceSystem, TenantId, DstIpAddrIsHost\r\n};\r\nparser (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, url_has_any=url_has_any, httpuseragent_has_any=httpuseragent_has_any, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)\r\n", "params": "starttime:datetime = datetime(null), endtime:datetime = datetime(null), srcipaddr_has_any_prefix:dynamic = dynamic([]), ipaddr_has_any_prefix:dynamic = dynamic([]), url_has_any:dynamic = dynamic([]), httpuseragent_has_any:dynamic = dynamic([]), eventresultdetails_in:dynamic = dynamic([]), eventresult:string = '*', disabled:bool = false"}}