{"_Im_Dns_MicrosoftNXlogV04": {"body": "let ASimDnsMicrosoftNXLog = (\r\n  starttime:datetime=datetime(null), endtime:datetime=datetime(null)\r\n  , srcipaddr:string='*'\r\n  , domain_has_any:dynamic=dynamic([]) \r\n  , responsecodename:string='*', response_has_ipv4:string='*'\r\n  , response_has_any_prefix:dynamic=dynamic([]) , eventtype:string='Query'\r\n  , disabled:bool=false\r\n  ){\r\nlet EventTypeTable=datatable(EventOriginalType:real,EventType:string)[\r\n    256, 'Query'\r\n  , 257, 'Query'\r\n  , 258, 'Query'\r\n  , 259, 'Query'\r\n  , 260, 'Query'\r\n  , 261, 'Query'\r\n  , 262, 'Query'\r\n  , 263, 'Dynamic update'\r\n  , 264, 'Dynamic update'\r\n  , 265, 'Zone XFR'\r\n  , 266, 'Zone XFR'\r\n  , 267, 'Zone XFR'\r\n  , 268, 'Zone XFR'\r\n  , 269, 'Zone XFR'\r\n  , 270, 'Zone XFR'\r\n  , 271, 'Zone XFR'\r\n  , 272, 'Zone XFR'\r\n  , 273, 'Zone XFR'\r\n  , 274, 'Zone XFR'\r\n  , 275, 'Zone XFR'\r\n  , 276, 'Zone XFR'\r\n  , 277, 'Dynamic update'\r\n  , 278, 'Dynamic update'\r\n  , 279, 'Query'\r\n  , 280, 'Query'\r\n];\r\nlet EventSubTypeTable=datatable(EventOriginalType:real,EventSubType:string)[\r\n  256, 'request'\r\n, 257, 'response'\r\n, 258, 'response'\r\n, 259, 'response'\r\n, 260, 'request'\r\n, 261, 'response'\r\n, 262, 'response'\r\n, 263, 'request'\r\n, 264, 'response'\r\n, 265, 'request'\r\n, 266, 'request'\r\n, 267, 'response'\r\n, 268, 'response'\r\n, 269, 'request'\r\n, 270, 'request'\r\n, 271, 'response'\r\n, 272, 'response'\r\n, 273, 'request'\r\n, 274, 'request'\r\n, 275, 'response'\r\n, 276, 'response'\r\n, 277, 'request'\r\n, 278, 'response'\r\n, 279, 'response'\r\n, 280, 'response'\r\n];\r\nlet EventResultTable=datatable(EventOriginalType:real,EventResult:string)[\r\n    256, 'NA'\r\n  , 257, 'Success'\r\n  , 258, 'Failure'\r\n  , 259, 'Failure'\r\n  , 260, 'NA'\r\n  , 261, 'NA'\r\n  , 262, 'Failure'\r\n  , 263, 'NA'\r\n  , 264, 'Based on RCODE'\r\n  , 265, 'NA'\r\n  , 266, 'NA'\r\n  , 267, 'Based on RCODE'\r\n  , 268, 'Based on RCODE'\r\n  , 269, 'NA'\r\n  , 270, 'NA'\r\n  , 271, 'Based on RCODE'\r\n  , 272, 'Based on RCODE'\r\n  , 273, 'NA'\r\n  , 274, 'NA'\r\n  , 275, 'Success'\r\n  , 276, 'Success'\r\n  , 277, 'NA'\r\n  , 278, 'Based on RCODE'\r\n  , 279, 'NA'\r\n  , 280, 'NA'\r\n];\r\nlet RCodeTable=datatable(DnsResponseCode:int,ResponseCodeName:string)[\r\n    0,'NOERROR'\r\n  , 1,'FORMERR'\r\n  , 2,'SERVFAIL'\r\n  , 3,'NXDOMAIN'\r\n  , 4,'NOTIMP'\r\n  , 5,'REFUSED'\r\n  , 6,'YXDOMAIN'\r\n  , 7,'YXRRSET'\r\n  , 8,'NXRRSET'\r\n  , 9,'NOTAUTH'\r\n  , 10,'NOTZONE'\r\n  , 11,'DSOTYPENI'\r\n  , 16,'BADVERS'\r\n  , 16,'BADSIG'\r\n  , 17,'BADKEY'\r\n  , 18,'BADTIME'\r\n  , 19,'BADMODE'\r\n  , 20,'BADNAME'\r\n  , 21,'BADALG'\r\n  , 22,'BADTRUNC'\r\n  , 23,'BADCOOKIE'\r\n];\r\nlet QTypeTable=datatable(DnsQueryType:int,QTypeName:string)[\r\n    0, 'Reserved'\r\n  , 1, 'A'\r\n  , 2, 'NS'\r\n  , 3, 'MD'\r\n  , 4, 'MF'\r\n  , 5, 'CNAME'\r\n  , 6, 'SOA'\r\n  , 7, 'MB'\r\n  , 8 ,'MG'\r\n  , 9 ,'MR'\r\n  , 10,'NULL'\r\n  , 11,'WKS'\r\n  , 12,'PTR'\r\n  , 13,'HINFO'\r\n  , 14,'MINFO'\r\n  , 15,'MX'\r\n  , 16,'TXT'\r\n  , 17,'RP'\r\n  , 18,'AFSDB'\r\n  , 19,'X25'\r\n  , 20,'ISDN'\r\n  , 21,'RT'\r\n  , 22,'NSAP'\r\n  , 23,'NSAP-PTR'\r\n  , 24,'SIG'\r\n  , 25,'KEY'\r\n  , 26,'PX'\r\n  , 27,'GPOS'\r\n  , 28,'AAAA'\r\n  , 29,'LOC'\r\n  , 30,'NXT'\r\n  , 31,'EID'\r\n  , 32,'NIMLOC'\r\n  , 33,'SRV'\r\n];\r\nNXLog_DNS_Server_CL | where not(disabled)\r\n| where EventID_d < 281\r\n| project-rename \r\n   EventOriginalType=EventID_d\r\n| lookup EventTypeTable on EventOriginalType\r\n| extend\r\n  eventtype = iff (eventtype == \"lookup\", \"Query\", eventtype)\r\n//  Pre-parsing filtering:\r\n  | where\r\n    // Return empty list if response IPs are passed\r\n    (response_has_ipv4=='*')\r\n    and (array_length(response_has_any_prefix) ==0) \r\n    and (eventtype=='*' or EventType == eventtype)   \r\n    and (isnull(starttime) or TimeGenerated >= starttime)\r\n    and (isnull(endtime) or TimeGenerated <= endtime) \r\n    and (srcipaddr=='*' or Source_s==srcipaddr)\r\n    and (array_length(domain_has_any) ==0 or QNAME_s has_any (domain_has_any))\r\n    and (responsecodename=='*' or RCODE_s=~responsecodename)\r\n// --\r\n| project-rename\r\n    DnsFlags=Flags_s,\r\n    DnsQuery=QNAME_s,\r\n    DnsQueryType=QTYPE_s,\r\n    DnsResponseCode=RCODE_s,\r\n    DnsResponseName=PacketData_s,\r\n    Dvc=Hostname_s,\r\n    EventOriginalUid=GUID_g,\r\n    EventStartTime=EventTime_t,\r\n    SrcIpAddr=Source_s\r\n| extend\r\n    DnsQuery=trim_end(\".\",DnsQuery),\r\n    DnsQueryType=toint(DnsQueryType),\r\n    DnsResponseCode=toint(DnsResponseCode),\r\n    SrcPortNumber=toint(Port_s),\r\n    DvcHostname=Dvc,\r\n    EventEndTime=EventStartTime,\r\n    EventProduct = \"DNS Server\",\r\n    EventSchemaVersion = \"0.1.3\",\r\n    EventVendor = \"Microsoft\",\r\n    EventSchema = \"Dns\",\r\n    EventCount = int(1),\r\n    NetworkProtocol=iff(TCP_s == \"0\",\"UDP\",\"TCP\"),\r\n    TransactionIdHex=tohex(toint(XID_s)),\r\n    DnsFlagsAuthenticated = tobool(AD_s),\r\n    DnsFlagsAuthoritative = tobool(AA_s),\r\n    DnsFlagsRecursionDesired = tobool(RD_s)\r\n| lookup EventSubTypeTable on EventOriginalType\r\n| lookup EventResultTable on EventOriginalType\r\n| lookup RCodeTable on DnsResponseCode\r\n| lookup QTypeTable on DnsQueryType\r\n| extend\r\n    EventResultDetails = case (isnotempty(ResponseCodeName), ResponseCodeName\r\n      , DnsResponseCode between (3841 .. 4095), 'Reserved for Private Use'\r\n      , 'Unassigned'),\r\n    EventOriginalType = tostring(EventOriginalType)\r\n| extend\r\n    Domain=DnsQuery,\r\n    DnsResponseCodeName=EventResultDetails,\r\n    DnsQueryTypeName = case (isnotempty(QTypeName), QTypeName\r\n      , DnsQueryType between (66 .. 98), 'Unassigned'\r\n      , DnsQueryType between (110 .. 248), 'Unassigned'\r\n      , DnsQueryType between (261 .. 32767), 'Unassigned'\r\n      , 'Unassigned'),\r\n     EventResult=iff (EventResult == \"Based on RCODE\", iff(DnsResponseCode == 0, \"Success\", \"Failure\"),EventResult)\r\n| extend\r\n  // Aliases\r\n    IpAddr = SrcIpAddr,\r\n    Src = SrcIpAddr,\r\n  // Backward compatibility\r\n    Query = DnsQuery,\r\n    QueryType = DnsQueryType,\r\n    QueryTypeName = DnsQueryTypeName,\r\n    ResponseCode = DnsResponseCode,\r\n    ResponseCodeName = DnsResponseCodeName\r\n| project-away\r\n    *_s, *_d, QTypeName, TenantId, SourceSystem, MG, ManagementGroupName, Computer, RawData\r\n};\r\nASimDnsMicrosoftNXLog (starttime, endtime, srcipaddr, domain_has_any, responsecodename, response_has_ipv4, response_has_any_prefix, eventtype, disabled)\r\n", "params": "starttime:datetime = datetime(null), endtime:datetime = datetime(null), srcipaddr:string = '*', domain_has_any:dynamic = dynamic([]), responsecodename:string = '*', response_has_ipv4:string = '*', response_has_any_prefix:dynamic = dynamic([]), eventtype:string = 'Query', disabled:bool = false"}}