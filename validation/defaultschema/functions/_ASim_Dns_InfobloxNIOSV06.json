{"_ASim_Dns_InfobloxNIOSV06": {"body": "let SyslogProjected = Syslog | project SyslogMessage, ProcessName, TimeGenerated, Computer, HostIP;\r\nlet response = (disabled: boolean=false) {\r\n   SyslogProjected\r\n   | where not(disabled)\r\n   | where ProcessName == \"named\" and SyslogMessage has_all (\"client\", \"query:\", \"response:\")\r\n   | parse SyslogMessage with *\r\n       \"client \" SrcIpAddr: string\r\n       \"#\" SrcPortNumber: int\r\n       \" \" NetworkProtocol: string\r\n       \": query: \" DnsQuery: string\r\n       \" \" DnsQueryClassName: string\r\n       \" \" DnsQueryTypeName: string\r\n       \" response: \" DnsResponseCodeName: string\r\n       \" \" DnsFlags: string\r\n   | extend DnsResponseNameIndex= indexof(DnsFlags, \" \")\r\n   | extend DnsResponseName =iif(DnsResponseNameIndex != \"-1\", substring(DnsFlags, DnsResponseNameIndex+1), \"\")\r\n   | extend DnsFlags =iif(DnsResponseNameIndex != \"-1\", substring(DnsFlags, 0, DnsResponseNameIndex), DnsFlags)\r\n   | extend EventSubType = \"response\"\r\n   | project-away SyslogMessage, ProcessName, DnsResponseNameIndex\r\n };\r\n let request = (disabled: boolean=false) {\r\n   SyslogProjected \r\n   | where not(disabled)\r\n   | where ProcessName == \"named\" and SyslogMessage has_all (\"client\", \"query:\") and SyslogMessage !has \"response:\"\r\n   | extend SyslogMessage = (split(SyslogMessage,\"client \"))[1]\r\n   | extend SyslogMessage = iif(SyslogMessage startswith \"@\", (substring(SyslogMessage, indexof(SyslogMessage, \" \")+1)), SyslogMessage)\r\n   | extend SyslogMessage = replace_string(SyslogMessage,\"\\\\ \",\"@@@\")\r\n   | parse SyslogMessage with \r\n       SrcIpAddr: string\r\n       \"#\" SrcPortNumber: int *\r\n       \"query: \" DnsQuery: string\r\n       \" \" DnsQueryClassName: string\r\n       \" \" DnsQueryTypeName: string\r\n       \" \" DnsFlags: string\r\n   | extend DnsQuery = replace_string (DnsQuery, '@@@', ' ')\r\n   | extend DnsFlags= tostring((split(DnsFlags,\" \"))[0])\r\n   | extend \r\n       EventSubType = \"request\",\r\n       DnsResponseCodeName = \"NA\"\r\n   | project-away SyslogMessage, ProcessName\r\n };\r\n let parser = (disabled:boolean=false) {\r\n   union response (disabled), request (disabled)\r\n   | extend\r\n       EventCount=int(1),\r\n       EventStartTime=todatetime(TimeGenerated),\r\n       EventEndTime=todatetime(TimeGenerated),\r\n       EventProduct=\"NIOS\",\r\n       EventVendor=\"Infoblox\",\r\n       EventSchema=\"Dns\",\r\n       EventSchemaVersion=\"0.1.3\",\r\n       EventType=\"Query\", \r\n       EventResult=iff(EventSubType==\"request\" or DnsResponseCodeName==\"NOERROR\",\"Success\",\"Failure\"),\r\n       DvcIpAddr=iff (HostIP == \"Unknown IP\", \"\", HostIP)\r\n   // -- Aliases\r\n   | invoke _ASIM_ResolveDvcFQDN (\"Computer\")\r\n   | project-away Computer\r\n   | extend\r\n       Dvc=DvcHostname,\r\n       Domain=DnsQuery,\r\n       IpAddr=SrcIpAddr,\r\n       Src=SrcIpAddr,\r\n       EventResultDetails = DnsResponseCodeName\r\n   | project-away HostIP\r\n };\r\n parser (disabled)", "params": "disabled:bool = false"}}