{"_Im_NetworkSession_MD4IoTSensorV02": {"body": "let parser = (\r\n      starttime:datetime=datetime(null), \r\n      endtime:datetime=datetime(null), \r\n      srcipaddr_has_any_prefix:dynamic=dynamic([]), \r\n      dstipaddr_has_any_prefix:dynamic=dynamic([]), \r\n      ipaddr_has_any_prefix:dynamic=dynamic([]),\r\n      dstportnumber:int=int(null), \r\n      hostname_has_any:dynamic=dynamic([]), \r\n      dvcaction:dynamic=dynamic([]), \r\n      eventresult:string='*', \r\n      disabled:bool=false)\r\n{\r\n  let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \r\n  let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix); \r\n  DefenderIoTRawEvent\r\n  | where RawEventName == \"NetworkConnectionData\"\r\n  | where (isnull(starttime) or TimeGenerated>=starttime)\r\n    and (isnull(endtime) or TimeGenerated<=endtime)\r\n    and not(disabled)\r\n    and (array_length(dvcaction) == 0)\r\n    and (array_length(hostname_has_any) == 0)\r\n    and (eventresult in (\"*\",\"Success\"))\r\n  | extend\r\n    DstIpAddr = tostring(EventDetails.Destination.IPAddress),\r\n    SrcIpAddr = tostring(EventDetails.Source.IPAddress)\r\n  | extend temp_SrcMatch=has_any_ipv4_prefix(SrcIpAddr,src_or_any)\r\n         , temp_DstMatch=has_any_ipv4_prefix(DstIpAddr,dst_or_any)\r\n  | extend ASimMatchingIpAddr=case(\r\n      array_length(src_or_any) == 0 and array_length(dst_or_any) == 0 ,\"-\",\r\n      temp_SrcMatch and temp_DstMatch, \"Both\",\r\n      temp_SrcMatch, \"SrcIpAddr\",\r\n      temp_DstMatch, \"DstIpAddr\",\r\n      \"No match\"\r\n    )\r\n  | where ASimMatchingIpAddr != \"No match\" \r\n  | project-away temp_*\r\n  | extend\r\n    DstPortNumber = toint(EventDetails.Destination.Port)\r\n  | where (isnull(dstportnumber) or DstPortNumber==dstportnumber)\r\n  | project-rename \r\n      DvcSubscriptionId = AzureSubscriptionId\r\n  | extend \r\n      Dvc = tostring(EventDetails.SourceId),\r\n      DstDvcId = tostring(EventDetails.Destination.DeviceId),\r\n      DstMacAddr = tostring(EventDetails.Destination.MacAddress),\r\n      DstDescription = tostring(EventDetails.Destination.DeviceName),\r\n      SrcDvcId = tostring(EventDetails.Source.DeviceId),\r\n      SrcMacAddr = tostring(EventDetails.Source.MacAddress),\r\n      SrcPortNumber = toint(EventDetails.Source.Port),\r\n      SrcDescription = tostring(EventDetails.Source.DeviceName),\r\n      EventOriginalUid = tostring(EventDetails.Id),\r\n      EventEndTime = todatetime(EventDetails.LastSeen),\r\n      EventStartTime = todatetime(EventDetails.StartTime),\r\n      NetworkProtocol = tostring(EventDetails.TransportProtocol)\r\n  | extend\r\n      EventProduct = 'Defender for IoT',\r\n      EventResult = 'Success',\r\n      EventSchema = 'NetworkSession',\r\n      EventSchemaVersion='0.2.4',\r\n      EventCount = toint(1),\r\n      EventSeverity = 'Informational',\r\n      EventType = iff(DstIpAddr=='' and SrcIpAddr == '','L2NetworkSession','NetworkSession'),\r\n      NetworkDirection = iff(tobool(EventDetails.IsInternal), 'Local',''),\r\n      EventVendor = 'Microsoft',\r\n      DstDvcIdType = 'MD4IoTid',\r\n      SrcDvcIdType = 'MD4IoTid'\r\n  | extend // -- Aliases\r\n      Dst = coalesce(DstIpAddr,DstMacAddr),\r\n      Src = coalesce(SrcIpAddr,SrcMacAddr),\r\n      IpAddr = SrcIpAddr,\r\n      EventStartTime = EventEndTime\r\n  | project-away \r\n      RawEventCategory, RawEventName, RawEventType, SourceSystem, TenantId, AgentVersion, IoTRawEventId, IsEmpty, AgentId, DeviceId, TimeStamp\r\n  | project-away EventDetails, AssociatedResourceId\r\n};\r\nparser (\r\n  starttime=starttime, \r\n  endtime=endtime, \r\n  srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, \r\n  dstipaddr_has_any_prefix=dstipaddr_has_any_prefix, \r\n  ipaddr_has_any_prefix=ipaddr_has_any_prefix, \r\n  dstportnumber=dstportnumber, \r\n  hostname_has_any=hostname_has_any, \r\n  dvcaction=dvcaction,\r\n  eventresult=eventresult,\r\n  disabled=disabled\r\n)", "params": "starttime:datetime = datetime(null), endtime:datetime = datetime(null), srcipaddr_has_any_prefix:dynamic = dynamic([]), dstipaddr_has_any_prefix:dynamic = dynamic([]), ipaddr_has_any_prefix:dynamic = dynamic([]), dstportnumber:int = int(null), hostname_has_any:dynamic = dynamic([]), dvcaction:dynamic = dynamic([]), eventresult:string = '*', disabled:bool = false"}}