{"_Im_NetworkSession_LinuxSysmonV04": {"body": "let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \r\nlet dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix); \r\nlet ip_any = set_union(srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix);    \r\nlet DirectionNetworkEvents =\r\n    Syslog \r\n    | where (isnull(starttime) or TimeGenerated>=starttime) \r\n        and (isnull(endtime) or TimeGenerated<=endtime) \r\n    | where not(disabled)\r\n    | project SyslogMessage, TimeGenerated, HostIP\r\n    | where SyslogMessage has_all ('<Provider Name=\"Linux-Sysmon\"', '<EventID>3</EventID>')\r\n    // ***************  Prefilterring *****************************************************************\r\n    | where  \r\n             (eventresult=='*' or eventresult=='Success')\r\n        and (array_length(dvcaction) ==0  )     /// if filtered by action return nothing\r\n        and (array_length(ip_any)==0 \r\n              or has_any_ipv4_prefix(SyslogMessage,ip_any)\r\n            ) \r\n       and (array_length(hostname_has_any)==0 \r\n              or SyslogMessage has_any(hostname_has_any)) \r\n        and (isnull(dstportnumber) or SyslogMessage has (tostring(dstportnumber))) \r\n    // *************** / Prefilterring ***************************************************************\r\n    | parse SyslogMessage with * '<Data Name=\"SourceIp\">' SrcIpAddr:string '</Data>' *\r\n    | where (array_length(srcipaddr_has_any_prefix)==0 \r\n              or has_any_ipv4_prefix(SrcIpAddr,srcipaddr_has_any_prefix)\r\n            ) \r\n    | extend outbound = (SrcIpAddr == HostIP or SrcIpAddr in ('127.0.0.1', '0.0.0.0'))\r\n;\r\nlet parser = (T: (SyslogMessage: string)) {\r\n  T \r\n  | parse SyslogMessage with \r\n      *\r\n      '<EventRecordID>' EventOriginalUid:string '</EventRecordID>'\r\n      *\r\n      '<Computer>' SysmonComputer:string '</Computer>'\r\n      *\r\n      '<Data Name=\"RuleName\">' RuleName:string '</Data>'\r\n      '<Data Name=\"UtcTime\">' EventEndTime:datetime '</Data>'\r\n      '<Data Name=\"ProcessGuid\">{' ProcessGuid:string '}</Data>'\r\n      '<Data Name=\"ProcessId\">' ProcessId:string '</Data>'\r\n      '<Data Name=\"Image\">' Process:string '</Data>'\r\n      '<Data Name=\"User\">' User:string '</Data>'\r\n      '<Data Name=\"Protocol\">' Protocol:string '</Data>' // -- source is lowercase\r\n      '<Data Name=\"Initiated\">' Initiated:bool '</Data>' \r\n      '<Data Name=\"SourceIsIpv6\">' SourceIsIpv6:bool '</Data>'\t\t\r\n      '<Data Name=\"SourceIp\">' * '</Data>'\r\n      '<Data Name=\"SourceHostname\">' SrcHostname:string '</Data>'\r\n      '<Data Name=\"SourcePort\">' SrcPortNumber:int '</Data>'\r\n      '<Data Name=\"SourcePortName\">' SrcPortName:string '</Data>'\r\n      '<Data Name=\"DestinationIsIpv6\">' DestinationIsIpv6:bool '</Data>'\r\n      '<Data Name=\"DestinationIp\">' DstIpAddr:string '</Data>'\r\n      '<Data Name=\"DestinationHostname\">' DstHostname:string '</Data>'\r\n      '<Data Name=\"DestinationPort\">' DstPortNumber:int '</Data>'\r\n      '<Data Name=\"DestinationPortName\">' DstPortName:string '</Data>'\r\n      *\r\n    | project-away DstPortName, DestinationIsIpv6, Initiated, SourceIsIpv6, SrcPortName, RuleName\r\n};\r\nlet OutboundNetworkEvents = \r\n  DirectionNetworkEvents\r\n  | where outbound\r\n  | invoke parser ()\r\n  | extend \r\n         temp_isSrcMatch=has_any_ipv4_prefix(SrcIpAddr,src_or_any) \r\n       , temp_isDstMatch=has_any_ipv4_prefix(DstIpAddr,dst_or_any)\r\n| extend ASimMatchingIpAddr = case(\r\n        array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, \"-\" // match not requested: probably most common case\r\n        , (temp_isSrcMatch and temp_isDstMatch), \"Both\" // has to be checked before the individual \r\n        , temp_isSrcMatch, \"SrcIpAddr\"\r\n        , temp_isDstMatch, \"DstIpAddr\"\r\n        , \"No match\"\r\n)\r\n | where ASimMatchingIpAddr != \"No match\"\r\n | extend temp_isSrcHostMatch= (SrcHostname has_any (hostname_has_any))\r\n        , temp_isDstHostMatch = (DstHostname has_any (hostname_has_any))\r\n  | extend ASimMatchingHostname = case(\r\n        array_length(hostname_has_any) == 0, \"-\" // match not requested: probably most common case\r\n        , (temp_isSrcHostMatch and temp_isDstHostMatch), \"Both\" // has to be checked before the individual \r\n        , temp_isSrcHostMatch, \"SrcHostname\"\r\n        , temp_isDstHostMatch, \"DstHostname\"\r\n        , \"No match\"\r\n)\r\n | where ASimMatchingHostname != \"No match\"\r\n | project-away temp_*\r\n | extend\r\n    SrcUsernameType = 'Simple',\r\n    SrcUsername = User,\r\n    SrcAppType = 'Process'\r\n  | project-rename\r\n    SrcProcessId = ProcessId, \r\n    SrcProcessGuid = ProcessGuid,\r\n    SrcProcessName = Process\r\n  | extend\r\n    SrcAppName = SrcProcessName\r\n  | project-away SyslogMessage\r\n;\r\nlet InboundNetworkEvents = \r\n    DirectionNetworkEvents\r\n    | where not(outbound)\r\n    | invoke parser ()\r\n    // *************** Postfilterring ***************************************************************\r\n    | where (array_length(hostname_has_any)==0 or DstHostname has_any (hostname_has_any)or SrcHostname has_any (hostname_has_any) )\r\n    and  (isnull(dstportnumber) or DstPortNumber ==dstportnumber)\r\n    // *************** Postfilterring ***************************************************************\r\n    | extend \r\n        temp_isSrcMatch=has_any_ipv4_prefix(SrcIpAddr,src_or_any) \r\n      , temp_isDstMatch=has_any_ipv4_prefix(DstIpAddr,dst_or_any)\r\n    | extend ASimMatchingIpAddr = case(\r\n      array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, \"-\" // match not requested: probably most common case\r\n      , (temp_isSrcMatch and temp_isDstMatch), \"Both\" // has to be checked before the individual \r\n      , temp_isSrcMatch, \"SrcIpAddr\"\r\n      , temp_isDstMatch, \"DstIpAddr\"\r\n      , \"No match\"\r\n  )\r\n  | project-away temp_*\r\n  | where ASimMatchingIpAddr != \"No match\"\r\n  | extend\r\n    DstUsernameType = 'Simple',\r\n    DstAppType = 'Process' \r\n  | project-rename\r\n    DstUsername = User,\r\n    DstProcessId = ProcessId, \r\n    DstProcessGuid = ProcessGuid,\r\n    DstProcessName = Process\r\n  | extend\r\n    DstAppName = DstProcessName\r\n  | project-away SyslogMessage\r\n;\r\nlet SysmonForLinuxNetwork=\r\n    union OutboundNetworkEvents, InboundNetworkEvents\r\n    | extend \r\n        EventType = 'NetworkSession',\r\n        EventStartTime = EventEndTime,\r\n        EventCount = int(1),\r\n        EventVendor = 'Microsoft',\r\n        EventSchemaVersion = '0.2.3',\r\n        EventSchema = 'NetworkSession', \r\n        EventProduct = 'Sysmon for Linux',\r\n        EventResult = 'Success',\r\n        EventSeverity = 'Informational',\r\n        DvcOs = 'Linux',\r\n        NetworkProtocol = toupper(Protocol),\r\n        NetworkDirection = iff(outbound, \"Outbound\", \"Inbound\"),\r\n        EventOriginalType = '3' // Set with a constant value to avoid parsing\r\n    | project-away outbound, Protocol\r\n    | project-rename \r\n        DvcIpAddr = HostIP,\r\n        DvcHostname = SysmonComputer\r\n    | extend // aliases\r\n        Dvc = DvcHostname,\r\n        Hostname = DstHostname,\r\n        IpAddr = SrcIpAddr,\r\n        Src = SrcIpAddr,\r\n        Dst = DstIpAddr\r\n;\r\nSysmonForLinuxNetwork ", "params": "starttime:datetime = datetime(null), endtime:datetime = datetime(null), srcipaddr_has_any_prefix:dynamic = dynamic([]), dstipaddr_has_any_prefix:dynamic = dynamic([]), ipaddr_has_any_prefix:dynamic = dynamic([]), dstportnumber:int = int(null), hostname_has_any:dynamic = dynamic([]), dvcaction:dynamic = dynamic([]), eventresult:string = '*', disabled:bool = false"}}