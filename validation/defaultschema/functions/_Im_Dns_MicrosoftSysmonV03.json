{"_Im_Dns_MicrosoftSysmonV03": {"body": "let RCodeTable=datatable(DnsResponseCode:int,DnsResponseCodeName:string)[\r\n  // See https://docs.microsoft.com/windows/win32/debug/system-error-codes--9000-11999-\r\n  0, 'NOERROR'\r\n, 9001, \"FORMERR\"\r\n, 9002,\"SERVFAIL\"\r\n, 9003,'NXDOMAIN'\r\n, 9004,'NOTIMP'\r\n, 9005,'REFUSED'\r\n, 9006,'YXDOMAIN'\r\n, 9007,'YXRRSET'\r\n, 9008,'NXRRSET'\r\n, 9009,'NOTAUTH'\r\n, 9010,'NOTZONE'\r\n, 9011,'DSOTYPENI'\r\n, 9016,'BADVERS'\r\n, 9016,'BADSIG'\r\n, 9017,'BADKEY'\r\n, 9018,'BADTIME'\r\n, 9019,'BADMODE'\r\n, 9020,'BADNAME'\r\n, 9021,'BADALG'\r\n, 9022,'BADTRUNC'\r\n, 9023,'BADCOOKIE'\r\n, 1460, 'TIMEOUT'\r\n];\r\nlet ParsedDnsEvent_Event =(\r\n  starttime:datetime=datetime(null), endtime:datetime=datetime(null)\r\n  , srcipaddr:string='*'\r\n  , domain_has_any:dynamic=dynamic([]) \r\n  , responsecodename:string='*', response_has_ipv4:string='*'\r\n  , response_has_any_prefix:dynamic=dynamic([]) , eventtype:string='Query'\r\n  , disabled:bool=false\r\n) \r\n{\r\n  Event | where not(disabled)\r\n    | project EventID, EventData, Computer, TimeGenerated, _ResourceId, _SubscriptionId, Source // , _ItemId \r\n    | where Source == \"Microsoft-Windows-Sysmon\" and EventID==22\r\n    | project-away Source, EventID\r\n    // -- Pre-parsing filtering (srcipaddr not available, responsecodename not optimizable)\r\n    | where\r\n      (eventtype in~ ('Query', 'lookup'))\r\n      and (srcipaddr=='*')\r\n      and (isnull(starttime) or TimeGenerated >= starttime)\r\n      and (isnull(endtime) or TimeGenerated <= endtime)\r\n      and (array_length(domain_has_any) ==0 or EventData has_any (domain_has_any))\r\n      and (response_has_ipv4=='*' or has_ipv4(EventData,response_has_ipv4) )\r\n      and (array_length(response_has_any_prefix) == 0 or has_any_ipv4_prefix(EventData, response_has_any_prefix))\r\n    // --\r\n    | parse EventData with \r\n      * \r\n      '<Data Name=\"RuleName\">' RuleName:string '</Data>' \r\n      '<Data Name=\"UtcTime\">' EventEndTime:datetime '</Data>'\r\n      '<Data Name=\"ProcessGuid\">{' SrcProcessGuid:string '}</Data>'\r\n      '<Data Name=\"ProcessId\">' SrcProcessId:string '</Data>'\r\n      '<Data Name=\"QueryName\">' DnsQuery:string '</Data>'\r\n      '<Data Name=\"QueryStatus\">' DnsResponseCode:int  '</Data>'\r\n      '<Data Name=\"QueryResults\">' DnsResponseName:string '</Data>'\r\n      '<Data Name=\"Image\">' SrcProcessName:string '</Data>'\r\n      *\r\n    | parse EventData with * '<Data Name=\"User\">'SrcUsername:string '</Data>' *\r\n    | project-away EventData \r\n    // -- Post-filtering tests differnt for Event and WindowsEvent\r\n    | lookup RCodeTable on DnsResponseCode\r\n    | where  (responsecodename==\"*\" or DnsResponseCodeName has responsecodename) // -- filter is not optimized\r\n    // --\r\n  };\r\nlet ParsedDnsEvent_WindowsEvent =(\r\n  starttime:datetime=datetime(null), endtime:datetime=datetime(null)\r\n  , srcipaddr:string='*'\r\n  , domain_has_any:dynamic=dynamic([]) \r\n  , responsecodename:string='*', response_has_ipv4:string='*'\r\n  , response_has_any_prefix:dynamic=dynamic([]) , eventtype:string='lookup'\r\n  , disabled:bool=false\r\n) \r\n{\r\n  WindowsEvent | where not(disabled)\r\n  | project EventID, EventData, Computer, TimeGenerated, _ResourceId, _SubscriptionId, Provider //, _ItemId \r\n  | where Provider == \"Microsoft-Windows-Sysmon\" and EventID == 22\r\n  | project-away Provider, EventID\r\n    // -- Pre-parsing filtering (srcipaddr not available)\r\n  | where\r\n    (eventtype=='lookup')\r\n    and (srcipaddr=='*')\r\n    and (isnull(starttime) or TimeGenerated >= starttime)\r\n    and (isnull(endtime) or TimeGenerated <= endtime)\r\n    and (array_length(domain_has_any) ==0 or EventData has_any (domain_has_any))\r\n    and (response_has_ipv4=='*' or has_ipv4(EventData,response_has_ipv4) )\r\n    and (array_length(response_has_any_prefix) == 0 or has_any_ipv4_prefix(EventData, response_has_any_prefix))\r\n  | extend DnsResponseCode = toint(EventData.QueryStatus)\r\n  | lookup RCodeTable on DnsResponseCode\r\n  | where  (responsecodename==\"*\" or DnsResponseCodeName has responsecodename) // -- filter is not optimized\r\n  // --\r\n  | extend \r\n      RuleName = tostring(EventData.RuleName),\r\n      EventEndTime = todatetime(EventData.UtcTime),\r\n      SrcProcessGuid = extract ('^{(.*)}$', 1, tostring(EventData.ProcessGuid), typeof(string)),\r\n      SrcProcessId = tostring(EventData.ProcessId),  \r\n      DnsQuery = tostring(EventData.QueryName),\r\n      DnsResponseName = tostring(EventData.QueryResults),\r\n      SrcProcessName = tostring(EventData.Image),\r\n      SrcUsername = tostring(EventData.User)\r\n  | project-away EventData\r\n};\r\nlet ParsedDnsEvent=(\r\n  starttime:datetime=datetime(null), endtime:datetime=datetime(null)\r\n  , srcipaddr:string='*'\r\n  , domain_has_any:dynamic=dynamic([]) \r\n  , responsecodename:string='*', response_has_ipv4:string='*'\r\n  , response_has_any_prefix:dynamic=dynamic([]) , eventtype:string='lookup'\r\n  , disabled:bool=false\r\n) \r\n{\r\n  union isfuzzy=true \r\n    ParsedDnsEvent_Event        (starttime, endtime, srcipaddr, domain_has_any, responsecodename, response_has_ipv4, response_has_any_prefix, eventtype, disabled),\r\n    ParsedDnsEvent_WindowsEvent (starttime, endtime, srcipaddr, domain_has_any, responsecodename, response_has_ipv4, response_has_any_prefix, eventtype, disabled)\r\n// -- Post-filtering accurately now that message is parsed\r\n| where\r\n  (array_length(domain_has_any) == 0 or DnsQuery has_any (domain_has_any))\r\n  and (response_has_ipv4=='*' or has_ipv4(DnsResponseName,response_has_ipv4) )\r\n  and (array_length(response_has_any_prefix) == 0 or has_any_ipv4_prefix(DnsResponseName, response_has_any_prefix))\r\n// --\r\n| project-rename \r\n    DvcHostname = Computer,\r\n    //EventUid = _ItemId,\r\n    DvcScopeId = _SubscriptionId\r\n| extend\r\n    EventOriginalType = '22',\r\n    EventCount=int(1),\r\n    EventProduct = 'Sysmon',\r\n    EventVendor = 'Microsoft',\r\n    EventSchema = 'Dns',\r\n    EventSchemaVersion=\"0.1.3\",\r\n    EventType = 'lookup',\r\n    EventResult = iff (DnsResponseCode == 0,'Success','Failure'),\r\n    EventStartTime = EventEndTime,\r\n    EventSubType= 'response',\r\n    EventSeverity= iif (DnsResponseCode == 0, 'Informational', 'Low'),\r\n    SrcUsernameType = 'Windows'\r\n// -- Aliases\r\n| extend \r\n    EventResultDetails = DnsResponseCodeName,\r\n    Domain = DnsQuery,\r\n    Dvc = DvcHostname,\r\n    SrcHostname = DvcHostname,\r\n    Src = DvcHostname,\r\n    Hostname=DvcHostname,\r\n    DnsResponseCode = toint(iff (DnsResponseCode > 9000 and DnsResponseCode < 9100, DnsResponseCode-9000, DnsResponseCode)),\r\n    User = SrcUsername,\r\n    Process = SrcProcessName\r\n};\r\nParsedDnsEvent (starttime=starttime, endtime=endtime, srcipaddr=srcipaddr, domain_has_any=domain_has_any, responsecodename=responsecodename, response_has_ipv4=response_has_ipv4, response_has_any_prefix=response_has_any_prefix, eventtype=eventtype, disabled=disabled)", "params": "starttime:datetime = datetime(null), endtime:datetime = datetime(null), srcipaddr:string = '*', domain_has_any:dynamic = dynamic([]), responsecodename:string = '*', response_has_ipv4:string = '*', response_has_any_prefix:dynamic = dynamic([]), eventtype:string = 'Query', disabled:bool = false"}}