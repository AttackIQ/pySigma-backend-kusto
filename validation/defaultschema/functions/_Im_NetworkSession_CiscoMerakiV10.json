{"_Im_NetworkSession_CiscoMerakiV10": {"body": "let NWParser = (\r\n    starttime:datetime=datetime(null), \r\n    endtime:datetime=datetime(null),\r\n    srcipaddr_has_any_prefix:dynamic=dynamic([]), \r\n    dstipaddr_has_any_prefix:dynamic=dynamic([]), \r\n    ipaddr_has_any_prefix:dynamic=dynamic([]),\r\n    dstportnumber:int=int(null), \r\n    hostname_has_any:dynamic=dynamic([]), \r\n    dvcaction:dynamic=dynamic([]), \r\n    eventresult:string='*', \r\n    disabled:bool=false)\r\n  {\r\n    let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \r\n    let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix);\r\n    CiscoMerakiNativePoller_CL\r\n      | where not(disabled)\r\n      // Pre-filtering\r\n      | where  \r\n            (isnull(starttime) or TimeGenerated >= starttime) \r\n            and (isnull(endtime) or TimeGenerated <= endtime)\r\n            and EventOriginalType == \"IDS Alert\"\r\n            and (isnull(dstportnumber) or (DstPortNumber == dstportnumber))\r\n            and ((array_length(dvcaction) == 0) or DvcAction has_any (dvcaction))\r\n            and ((eventresult == \"*\") or (EventResult == eventresult))\r\n      | extend temp_isSrcMatch=has_any_ipv4_prefix(SrcIpAddr,src_or_any), \r\n               temp_isDstMatch=has_any_ipv4_prefix(DstIpAddr,dst_or_any)\r\n      | extend ASimMatchingIpAddr = case(\r\n                        array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, \"-\", // match not requested\r\n                        (temp_isSrcMatch and temp_isDstMatch), \"Both\", // has to be checked before the individual \r\n                        temp_isSrcMatch, \"SrcIpAddr\",\r\n                        temp_isDstMatch, \"DstIpAddr\",\r\n                        \"No match\"\r\n                    )\r\n      | where ASimMatchingIpAddr != \"No match\"\r\n      | extend temp_isMatchSrcHostname= SrcHostname has_any (hostname_has_any),\r\n               temp_isMatchDstHostname = DstHostname has_any (hostname_has_any)\r\n      | extend ASimMatchingHostname = case(\r\n                        array_length(hostname_has_any) == 0 , \"-\", \r\n                        (temp_isMatchSrcHostname and temp_isMatchDstHostname), \"Both\" , \r\n                        temp_isMatchSrcHostname, \"SrcHostname\", \r\n                        temp_isMatchDstHostname, \"DstHostname\", \r\n                        \"No match\"\r\n                    )\r\n      | project-away temp*\r\n      | where ASimMatchingHostname != \"No match\"\r\n      | extend  \r\n          EventResult = iff(DvcAction == \"Deny\", \"Failure\", \"Success\"),\r\n          EventResultDetails = \"\",\r\n          NetworkDuration = toint(NetworkDuration)\r\n      | extend \r\n          InnerVlanId = SrcVlanId,\r\n          OuterVlanId = DstVlanId,\r\n          SessionId = NetworkSessionId,\r\n          Hostname = DstHostname,\r\n          IpAddr = SrcIpAddr,\r\n          Duration = NetworkDuration, \r\n          Dst = DstIpAddr,\r\n          Src = SrcIpAddr,\r\n          User = DstUsername\r\n    | project-away Url*, Http*, File*, Rule*, UserAgent, Hash\r\n  };\r\nNWParser (starttime, endtime, srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix, dstportnumber, hostname_has_any, dvcaction, eventresult, disabled)", "params": "starttime:datetime = datetime(null), endtime:datetime = datetime(null), srcipaddr_has_any_prefix:dynamic = dynamic([]), dstipaddr_has_any_prefix:dynamic = dynamic([]), ipaddr_has_any_prefix:dynamic = dynamic([]), dstportnumber:int = int(null), hostname_has_any:dynamic = dynamic([]), dvcaction:dynamic = dynamic([]), eventresult:string = '*', disabled:bool = false"}}