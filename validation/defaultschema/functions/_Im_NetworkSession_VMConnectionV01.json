{"_Im_NetworkSession_VMConnectionV01": {"body": "let SeverityLookup = datatable (EventOriginalSeverity: string, EventSeverity:string) [\r\n  '', 'Informational', \r\n  '0', 'Informational',\r\n  '1', 'Low',\r\n  '2', 'Medium',\r\n  '3', 'High'\r\n];\r\nlet parser = (\r\n  starttime:datetime=datetime(null), \r\n  endtime:datetime=datetime(null), \r\n  srcipaddr_has_any_prefix:dynamic=dynamic([]), \r\n  dstipaddr_has_any_prefix:dynamic=dynamic([]), \r\n  ipaddr_has_any_prefix:dynamic=dynamic([]), \r\n  dstportnumber:int=int(null), \r\n  hostname_has_any:dynamic=dynamic([]), \r\n  dvcaction:dynamic=dynamic([]), \r\n  eventresult:string='*', \r\n  disabled:bool=false)\r\n{\r\n  let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \r\n  let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix);  \r\n  let outbound = \r\n      VMConnection\r\n      | where (isnull(starttime) or TimeGenerated >= starttime)\r\n          and (isnull(endtime) or TimeGenerated <= endtime)\r\n      | where not (disabled)\r\n      | where array_length(hostname_has_any)==0 \r\n      or (Computer has_any (hostname_has_any)) or ( RemoteDnsCanonicalNames has_any (hostname_has_any))\r\n      | where Direction == \"outbound\"\r\n      // -- Pre-filtering:\r\n      | where\r\n          eventresult in (\"*\", \"Success\") \r\n          and array_length(dvcaction) == 0\r\n          and  (isnull(dstportnumber) or (DestinationPort == dstportnumber))\r\n      | extend temp_isSrcMatch=has_any_ipv4_prefix(SourceIp,src_or_any)\r\n         , temp_isDstMatch=has_any_ipv4_prefix(DestinationIp,dst_or_any)\r\n      | extend ASimMatchingIpAddr = case(\r\n          array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, \"-\" // match not requested: probably most common case\r\n          , (temp_isSrcMatch and temp_isDstMatch), \"Both\" // has to be checked before the individual \r\n          , temp_isSrcMatch, \"SrcIpAddr\"\r\n          , temp_isDstMatch, \"DstIpAddr\"\r\n          , \"No match\"\r\n          )\r\n      | where ASimMatchingIpAddr != \"No match\"\r\n      | extend hostelements = split(Computer,'.')\r\n      | extend \r\n          SrcHostname = tostring(hostelements[0]),\r\n          SrcDomain = strcat_array(array_slice(hostelements,1,-1), '.')\r\n      // -- End pre-filtering\r\n      | extend DstFQDN = iff(RemoteDnsCanonicalNames == \"\", \"\", todynamic(RemoteDnsCanonicalNames)[0])\r\n      | extend DstDomainType = iff(DstFQDN != \"\", \"FQDN\", \"\")\r\n      | extend hostelements = split(DstFQDN,'.')\r\n      | extend \r\n          DstHostname = iff(DstFQDN != \"\", tostring(hostelements[0]), \"\"),\r\n          DstDomain = iff(DstFQDN != \"\", strcat_array(array_slice(hostelements,1,-1), '.'), \"\")\r\n      | project-away temp_*\r\n      | extend temp_isMatchSrcHostname= SrcHostname has_any (hostname_has_any)\r\n            ,  temp_isMatchDstHostname = DstHostname has_any (hostname_has_any)\r\n      | extend ASimMatchingHostname = case(\r\n          array_length(hostname_has_any) == 0 , \"-\"\r\n          , (temp_isMatchSrcHostname and temp_isMatchDstHostname), \"Both\" \r\n          , temp_isMatchSrcHostname, \"SrcHostname\"\r\n          , temp_isMatchDstHostname, \"DstHostname\"\r\n          , \"No match\"\r\n          )\r\n          | where ASimMatchingHostname != \"No match\"\r\n          | project-away temp_*\r\n      | extend\r\n          SrcAppType = \"Process\",\r\n          SrcHostnameType = \"Simple\",\r\n          DstGeoCountry = RemoteCountry,\r\n          DstGeoLongitude = RemoteLongitude,\r\n          DstGeoLatitude = RemoteLatitude,\r\n          SrcAppId = Process,\r\n          SrcAppName = ProcessName,\r\n          SrcHostname = Computer,\r\n          SrcDvcId = Machine\r\n     | extend\r\n          SrcDomainType = iff(SrcDomain != \"\", \"FQDN\", \"\"),\r\n          SrcFQDN = iff(SrcDomain != \"\", Computer, \"\")\r\n      | extend DstFQDN = iff(RemoteDnsCanonicalNames == \"\", \"\", todynamic(RemoteDnsCanonicalNames)[0])\r\n      | extend DstDomainType = iff(DstFQDN != \"\", \"FQDN\", \"\")\r\n      | extend hostelements = split(DstFQDN,'.')\r\n      | extend \r\n          DstHostname = iff(DstFQDN != \"\", tostring(hostelements[0]), \"\"),\r\n          DstDomain = iff(DstFQDN != \"\", strcat_array(array_slice(hostelements,1,-1), '.'), \"\")\r\n      | project-away hostelements\r\n      | extend\r\n          RemoteFQDN = DstFQDN,\r\n          RemoteHostname = DstHostname,\r\n          RemoteDomain = DstDomain,\r\n          RemoteDomainType = DstDomainType,\r\n          LocalFQDN = SrcFQDN,\r\n          LocalHostname = SrcHostname,\r\n          LocalDomain = SrcDomain,\r\n          LocalDomainType = SrcDomainType,\r\n          LocalIpAddr = SourceIp\r\n  ;\r\n  let inbound =\r\n      VMConnection\r\n      | where (starttime == datetime(null) or TimeGenerated >= starttime)\r\n          and (endtime == datetime(null) or TimeGenerated <= endtime)\r\n      | where not (disabled)\r\n      | where Direction == \"inbound\"\r\n      // -- Pre-filtering:\r\n      | where\r\n          eventresult  in (\"*\", \"Success\") \r\n          and array_length(dvcaction) == 0\r\n          and  (dstportnumber==int(null) or DestinationPort == dstportnumber)\r\n          and (array_length(hostname_has_any)==0 \r\n               or Computer has_any (hostname_has_any) or RemoteDnsCanonicalNames has_any (hostname_has_any)\r\n               )\r\n      | extend temp_isSrcMatch=has_any_ipv4_prefix(SourceIp,src_or_any)\r\n         , temp_isDstMatch=has_any_ipv4_prefix(DestinationIp,dst_or_any)\r\n      | extend ASimMatchingIpAddr = case(\r\n          array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, \"-\" // match not requested: probably most common case\r\n          , (temp_isSrcMatch and temp_isDstMatch), \"Both\" // has to be checked before the individual \r\n          , temp_isSrcMatch, \"SrcIpAddr\"\r\n          , temp_isDstMatch, \"DstIpAddr\"\r\n          , \"No match\"\r\n          )\r\n      | where ASimMatchingIpAddr != \"No match\"\r\n      | project-away temp_*\r\n      // -- End pre-filtering\r\n      | extend hostelements = split(Computer,'.')\r\n      | extend \r\n          DstHostname = tostring(hostelements[0]),\r\n          DstDomain = strcat_array(array_slice(hostelements,1,-1), '.')\r\n      | extend SrcFQDN = iff(RemoteDnsCanonicalNames == \"\", \"\", todynamic(RemoteDnsCanonicalNames)[0])\r\n      | extend \r\n          SrcHostname = iff(SrcFQDN != \"\", tostring(hostelements[0]), \"\"),\r\n          SrcDomain = iff(SrcFQDN != \"\", strcat_array(array_slice(hostelements,1,-1), '.'), \"\")\r\n              | extend temp_isMatchSrcHostname= SrcHostname has_any (hostname_has_any)\r\n            ,  temp_isMatchDstHostname = DstHostname has_any (hostname_has_any)\r\n      | extend ASimMatchingHostname = case(\r\n          array_length(hostname_has_any) == 0 , \"-\"\r\n          , (temp_isMatchSrcHostname and temp_isMatchDstHostname), \"Both\" \r\n          , temp_isMatchSrcHostname, \"SrcHostname\"\r\n          , temp_isMatchDstHostname, \"DstHostname\"\r\n          , \"No match\"\r\n          )\r\n          | where ASimMatchingHostname != \"No match\"\r\n          | project-away temp_*\r\n      | extend\r\n          DstAppType = \"Process\",\r\n          DstDvcIdType = \"VMConnectionId\",\r\n          SrcGeoCountry = RemoteCountry,\r\n          SrcGeoLongitude = RemoteLongitude,\r\n          SrcGeoLatitude = RemoteLatitude,\r\n          DstAppId = Process,\r\n          DstAppName = ProcessName,\r\n          DstDvcId = Machine\r\n      | extend\r\n          DstDomainType = iff(DstDomain != \"\", \"FQDN\", \"\"),\r\n          DstFQDN = iff(DstDomain != \"\", Computer, \"\")\r\n      | extend SrcDomainType = iff(SrcFQDN != \"\", \"FQDN\", \"\")\r\n      | extend hostelements = split(SrcFQDN,'.')\r\n      | project-away hostelements\r\n      | extend\r\n          RemoteFQDN = SrcFQDN,\r\n          RemoteHostname = SrcHostname,\r\n          RemoteDomain = SrcDomain,\r\n          RemoteDomainType = SrcDomainType,\r\n          LocalFQDN = DstFQDN,\r\n          LocalHostname = DstHostname,\r\n          LocalDomain = DstDomain,\r\n          LocalDomainType = DstDomainType,\r\n          LocalIpAddr = DestinationIp\r\n  ;\r\n  union outbound, inbound\r\n  // Event fields\r\n  | extend \r\n    EventCount = toint(LinksEstablished), // -- prioritized over LinksLive and LinksTerminated\r\n    EventStartTime = TimeGenerated,\r\n    EventVendor = \"Microsoft\",\r\n    EventProduct = \"VMConnection\",\r\n    EventSchema = \"NetworkSession\",\r\n    EventSchemaVersion = \"0.2.3\",\r\n    EventType = \"EndpointNetworkSession\",\r\n    EventEndTime = TimeGenerated\r\n  | project-rename\r\n    DstIpAddr = DestinationIp,\r\n    DstPortNumber = DestinationPort, \r\n    SrcIpAddr = SourceIp, \r\n    NetworkSessionId = ConnectionId,\r\n    ThreatName = IndicatorThreatType,\r\n    NetworkDirection = Direction,\r\n    RemoteGeoCountry = RemoteCountry,\r\n    RemoteGeoLatitude = RemoteLatitude, \r\n    RemoteGeoLongitude = RemoteLongitude,\r\n    LocalAppId = Process,\r\n    LocalAppName = ProcessName,\r\n    DvcId = Machine,\r\n    RemoteIpAddr = RemoteIp\r\n  // -- Calculated fields\r\n  | extend EventOriginalSeverity = tostring(Severity)\r\n  | lookup SeverityLookup on EventOriginalSeverity\r\n  | extend\r\n    EventResult = \"Success\",\r\n    LocalAppType = \"Process\",\r\n    NetworkDuration = toint(ResponseTimeMax),\r\n    ThreatRiskLevel = toint(Confidence),\r\n    NetworkProtocol = toupper(Protocol),\r\n    SrcBytes = tolong(BytesSent),\r\n    DstBytes = tolong(BytesReceived)\r\n  // -- Aliases\r\n  | extend\r\n    IpAddr = RemoteIpAddr,\r\n    Src = SrcIpAddr,\r\n    Local = LocalIpAddr,\r\n    DvcIpAddr = LocalIpAddr,\r\n    Dst = DstIpAddr,\r\n    Remote = RemoteIpAddr,\r\n    Dvc = LocalHostname,\r\n    DvcHostname = LocalHostname,\r\n    DvcDomain = LocalDomain,\r\n    DvcDomainType = LocalDomainType,\r\n    DvcFQDN = LocalFQDN,\r\n    Hostname = RemoteHostname,\r\n    Duration = NetworkDuration,\r\n    SessionId = NetworkSessionId\r\n};\r\nparser (starttime, endtime, srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix, dstportnumber, hostname_has_any, dvcaction, eventresult, disabled)", "params": "starttime:datetime = datetime(null), endtime:datetime = datetime(null), srcipaddr_has_any_prefix:dynamic = dynamic([]), dstipaddr_has_any_prefix:dynamic = dynamic([]), ipaddr_has_any_prefix:dynamic = dynamic([]), dstportnumber:int = int(null), hostname_has_any:dynamic = dynamic([]), dvcaction:dynamic = dynamic([]), eventresult:string = '*', disabled:bool = false"}}