{"_Im_Dns_AzureFirewallV03": {"body": "let DNS_query=(\r\n  starttime:datetime=datetime(null), endtime:datetime=datetime(null)\r\n  , srcipaddr:string='*'\r\n  , domain_has_any:dynamic=dynamic([]) \r\n  , responsecodename:string='*', response_has_ipv4:string='*'\r\n  , response_has_any_prefix:dynamic=dynamic([]) , eventtype:string='Query'\r\n  , disabled:bool=false\r\n  ){\r\n  AzureDiagnostics | where not(disabled)\r\n  // | where ResourceType == \"AZUREFIREWALLS\" -- Implicit in the next line\r\n  | where Category == \"AzureFirewallDnsProxy\"\r\n  | project msg_s, TimeGenerated, ResourceId\r\n  | where msg_s startswith \"DNS Request:\"\r\n  //  --Pre-parsing filtering:\r\n  | where\r\n    // Return empty list if response IPs are passed\r\n    (response_has_ipv4=='*')\r\n    and (array_length(response_has_any_prefix) ==0) \r\n    and (eventtype=='*' or eventtype in (\"Query\", \"lookup\")) // -- support both legacy and standard value \r\n    and (isnull(starttime) or TimeGenerated >= starttime)\r\n    and (isnull(endtime) or TimeGenerated <= endtime) \r\n    and (srcipaddr=='*' or has_ipv4(msg_s, srcipaddr))\r\n    and (array_length(domain_has_any) ==0 or  msg_s has_any (domain_has_any))\r\n    and (responsecodename=='*' or  msg_s has(responsecodename))\r\n  // --\r\n      | parse msg_s with\r\n      \"DNS Request: \" \r\n      SrcIpAddr:string \":\" SrcPortNumber:int \r\n      \" - \" EventOriginalUid:string \r\n      \" \" DnsQueryTypeName:string \r\n      \" \" DnsQueryClassName:string\r\n      \" \" DnsQuery:string\r\n      \". \" NetworkProtocol:string \r\n      \" \" SrcBytes:int \r\n      \" \" DnsDNSSECflag:bool \r\n      \" \" DnsDNSSECBufferSize:int \r\n      \" \" EventResultDetails:string \r\n      \" \" DnsFlags:string\r\n      \" \" DstBytes:int\r\n      \" \" DnsNetworkDuration:double\r\n      \"s\"\r\n  // -- Post-filtering accurately now that message is parsed\r\n  | where\r\n      (srcipaddr==\"*\" or  SrcIpAddr==srcipaddr)\r\n        and (array_length(domain_has_any) ==0 or DnsQuery has_any (domain_has_any))\r\n        and (responsecodename==\"*\" or EventResultDetails has responsecodename)\r\n  | project-away msg_s\r\n  | extend\r\n    EventResult = iff (EventResultDetails == \"NOERROR\", \"Success\", \"Failure\"),\r\n    EventSubType = \"response\",\r\n    DnsNetworkDuration = toint(DnsNetworkDuration*1000)     \r\n};\r\nlet DNS_error=(\r\n  starttime:datetime=datetime(null), endtime:datetime=datetime(null)\r\n  , srcipaddr:string='*'\r\n  , domain_has_any:dynamic=dynamic([]) \r\n  , responsecodename:string='*', response_has_ipv4:string='*'\r\n  , response_has_any_prefix:dynamic=dynamic([]) , eventtype:string='Query'\r\n  , disabled:bool=false\r\n  ) {\r\n  AzureDiagnostics\r\n  // | where ResourceType == \"AZUREFIREWALLS\" -- Implicit in the next line\r\n  | where Category == \"AzureFirewallDnsProxy\"\r\n  | project msg_s, TimeGenerated, ResourceId\r\n  | where msg_s startswith \" Error:\"\r\n  //  --Pre-parsing filtering:\r\n  | where\r\n    (response_has_ipv4=='*') // Return empty list if response IPs are passed\r\n    and (array_length(response_has_any_prefix) ==0) // Return empty list if response IPs are passed\r\n    and (eventtype=='*' or eventtype in (\"Query\", \"lookup\")) // -- support both legacy and standard value \r\n    and (isnull(starttime) or TimeGenerated >= starttime)\r\n    and (isnull(endtime) or TimeGenerated <= endtime) \r\n    and (srcipaddr=='*' or has_ipv4(msg_s, srcipaddr))\r\n    and (array_length(domain_has_any) ==0 or  msg_s has_any (domain_has_any))\r\n    and (responsecodename=='*') // Return empty list if response code is passed\r\n  // --\r\n  | parse msg_s with \r\n      \" Error: \" nu:string \r\n      \" \" DnsQuery:string \r\n      \". \" DnsQueryTypeName:string \r\n      \": \" op:string \r\n      \" \" NetworkProtocol:string\r\n      \" \" SrcIpAddr:string \":\" SrcPortNumber:int \r\n      \"->\" DstIpAddr:string \":\" DstPortNumber:int  \r\n      \": \" EventResultOriginalDetails:string\r\n  // -- Post-filtering accurately now that message is parsed\r\n  | where\r\n      (srcipaddr==\"*\" or  SrcIpAddr==srcipaddr)\r\n        and (array_length(domain_has_any) ==0 or DnsQuery has_any (domain_has_any))\r\n  | project-away msg_s\r\n  | extend \r\n    EventResult = \"Failure\",\r\n    EventSubType = \"request\"\r\n};\r\nlet DNS = (\r\n  starttime:datetime=datetime(null), endtime:datetime=datetime(null)\r\n  , srcipaddr:string='*'\r\n  , domain_has_any:dynamic=dynamic([]) \r\n  , responsecodename:string='*', response_has_ipv4:string='*'\r\n  , response_has_any_prefix:dynamic=dynamic([]) , eventtype:string='Query'\r\n  , disabled:bool=false\r\n  ) {\r\n  union \r\n    DNS_query (starttime, endtime, srcipaddr, domain_has_any, responsecodename, response_has_ipv4, response_has_any_prefix, eventtype, disabled),\r\n    DNS_error (starttime, endtime, srcipaddr, domain_has_any, responsecodename, response_has_ipv4, response_has_any_prefix, eventtype, disabled)\r\n  | extend\r\n    NetworkProtocol = toupper(NetworkProtocol)\r\n  | project-rename\r\n      DvcId = ResourceId\r\n  | extend\r\n      DvcIdType = \"AzureResourceId\",\r\n      EventCount = int(1),\r\n      EventStartTime = TimeGenerated,\r\n      EventVendor = \"Microsoft\",\r\n      EventProduct = \"Azure Firewall\",\r\n      EventSchema = \"Dns\",\r\n      EventSchemaVersion = \"0.1.3\",\r\n      EventEndTime = TimeGenerated, \r\n      EventType = 'Query',\r\n      DnsFlagsAuthenticated = DnsFlags has \"aa\",\r\n      DnsFlagsAuthoritative = DnsFlags has \"ad\",\r\n      DnsFlagsCheckingDisabled = DnsFlags has \"cd\",\r\n      DnsFlagsRecursionAvailable = DnsFlags has \"ra\",\r\n      DnsFlagsRecursionDesired = DnsFlags has \"rd\",\r\n      DnsFlagsTruncates = DnsFlags has \"tc\"\r\n  | extend\r\n    // -- Aliases\r\n      DnsResponseCodeName=EventResultDetails,\r\n      Domain=DnsQuery,\r\n      IpAddr=SrcIpAddr,\r\n      Src=SrcIpAddr,\r\n      Dst=DstIpAddr,\r\n      Duration = DnsNetworkDuration,\r\n      Dvc=DvcId\r\n  | extend\r\n      // -- Backward Compatibility\r\n      Query = DnsQuery,\r\n      QueryTypeName = DnsQueryTypeName,\r\n      ResponseCodeName = DnsResponseCodeName,\r\n      Flags = DnsFlags\r\n};\r\nDNS (starttime, endtime, srcipaddr, domain_has_any, responsecodename, response_has_ipv4, response_has_any_prefix, eventtype, disabled)", "params": "starttime:datetime = datetime(null), endtime:datetime = datetime(null), srcipaddr:string = '*', domain_has_any:dynamic = dynamic([]), responsecodename:string = '*', response_has_ipv4:string = '*', response_has_any_prefix:dynamic = dynamic([]), eventtype:string = 'Query', disabled:bool = false"}}