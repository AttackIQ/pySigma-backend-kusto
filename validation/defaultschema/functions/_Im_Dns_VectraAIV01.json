{"_Im_Dns_VectraAIV01": {"body": "let parser=\r\n(\r\n  starttime:datetime=datetime(null), \r\n  endtime:datetime=datetime(null),\r\n  srcipaddr:string='*',\r\n  domain_has_any:dynamic=dynamic([]),\r\n  responsecodename:string='*', \r\n  response_has_ipv4:string='*',\r\n  response_has_any_prefix:dynamic=dynamic([]),\r\n  eventtype:string='Query',\r\n  disabled:bool=false\r\n) \r\n{\r\n  let NetworkProtocolLookup = datatable(proto_d:real, NetworkProtocol:string)[\r\n      6, 'TCP',\r\n      17, 'UDP'];\r\n  let DnsClassLookup = datatable(DnsQueryClass:int, DnsQueryClassName: string)[\r\n      0, 'Reserved',\r\n      1, 'IN',\r\n      2, 'Unassigned',\r\n      3, 'CH',\r\n      4, 'HS',\r\n      254, 'None',\r\n      255, 'Any'\r\n  ];\r\n  let HostnameRegex = @'^[a-zA-Z0-9-]{1,61}$';\r\n  VectraStream_CL\r\n  | where not(disabled)\r\n  | where (isnull(starttime) or TimeGenerated >= starttime)\r\n      and (isnull(endtime) or TimeGenerated <= endtime)\r\n  | project-away MG, ManagementGroupName, RawData, SourceSystem, Computer\r\n  | where metadata_type_s == 'metadata_dns'\r\n  | where (srcipaddr == '*' or id_orig_h_s == srcipaddr)\r\n  | where (array_length(domain_has_any) == 0 or query_s has_any(domain_has_any))\r\n  | where (responsecodename == '*' or rcode_name_s =~ responsecodename)\r\n  | where (response_has_ipv4 == '*' or has_ipv4(answers_s, response_has_ipv4))\r\n  | where (array_length(response_has_any_prefix) == 0 or has_any_ipv4_prefix(answers_s, response_has_any_prefix))\r\n  | where (eventtype == '*' or eventtype in~ ('Query', 'lookup'))\r\n  | project-rename\r\n      DvcDescription = hostname_s,\r\n      DstDescription = resp_hostname_s,\r\n      SrcDescription = orig_hostname_s,\r\n      DnsFlagsAuthoritative = AA_b,\r\n      DnsFlagsRecursionAvailable = RA_b,\r\n      DnsFlagsRecursionDesired = RD_b,\r\n      DnsFlagsTruncated = TC_b,\r\n      DnsResponseName = answers_s,\r\n      DnsQuery = query_s,\r\n      DnsQueryTypeName = qtype_name_s,\r\n      DstIpAddr = id_resp_h_s,\r\n      DnsSessionId = community_id_s,\r\n      SrcIpAddr = id_orig_h_s,\r\n      DstDvcId = resp_huid_s,\r\n      SrcDvcId = orig_huid_s,\r\n      DvcId = sensor_uid_s,\r\n      EventOriginalUid = uid_s\r\n  | extend\r\n      DstHostname = iff (DstDescription startswith \"IP-\" or not(DstDescription matches regex HostnameRegex), \"\", DstDescription),\r\n      SrcHostname = iff (SrcDescription startswith \"IP-\" or not(SrcDescription matches regex HostnameRegex), \"\", SrcDescription),\r\n      DvcHostname = iff (DvcDescription startswith \"IP-\" or not(DvcDescription matches regex HostnameRegex), \"\", DvcDescription),\r\n      NetworkProtocolVersion = toupper(id_ip_ver_s),\r\n      DnsResponseCode = toint(rcode_d),\r\n      DnsResponseCodeName = toupper(rcode_name_s),\r\n      DnsQueryClass = toint(qclass_d),\r\n      DnsQueryType = toint(qtype_d),\r\n      DstPortNumber = toint(id_resp_p_d),\r\n      EventCount = toint(1),\r\n      EventEndTime = unixtime_milliseconds_todatetime(ts_d),\r\n      EventOriginalSubType = tostring(split(metadata_type_s, '_')[1]),\r\n      EventProduct = 'Vectra Stream',\r\n      EventResult = case(tolong(rcode_d) > 0, \"Failure\", \"Success\"),\r\n      EventSchema = 'Dns', \r\n      EventSchemaVersion='0.1.3',\r\n      EventType = 'Query',\r\n      EventVendor = 'Vectra AI',\r\n      SrcDvcIdType = 'VectraId',\r\n      DstDvcIdType = 'VectraId',\r\n      DvcIdType = 'VectraId',\r\n      SrcPortNumber = toint(id_orig_p_d),\r\n      TransactionIdHex = tostring(toint(trans_id_d)),\r\n      EventSubType = iff (saw_reply_b, \"response\", \"request\")\r\n  | lookup DnsClassLookup on DnsQueryClass\r\n  | lookup NetworkProtocolLookup on proto_d\r\n  | extend\r\n      EventResultDetails = DnsResponseCodeName,\r\n      EventStartTime = EventEndTime,\r\n      SessionId = DnsSessionId,\r\n      Domain = DnsQuery,\r\n      Hostname = DstHostname,\r\n      IpAddr = SrcIpAddr,\r\n      Dvc = coalesce (DvcId, DvcDescription),\r\n      Src = SrcIpAddr,\r\n      Dst = DstIpAddr\r\n  | project-away\r\n      *_d, *_s, *_b, *_g\r\n    };\r\nparser(starttime, endtime, srcipaddr, domain_has_any, responsecodename, response_has_ipv4, response_has_any_prefix, eventtype, disabled)", "params": "starttime:datetime = datetime(null), endtime:datetime = datetime(null), srcipaddr:string = '*', domain_has_any:dynamic = dynamic([]), responsecodename:string = '*', response_has_ipv4:string = '*', response_has_any_prefix:dynamic = dynamic([]), eventtype:string = 'Query', disabled:bool = false"}}