{"_ASim_NetworkSession_ForcePointFirewallV01": {"body": "let ApplicationProtocolLookup=datatable(ApplicationProtocol:string,NetworkApplicationProtocol:string)\r\n   [\r\n         \"HTTPS\",\"HTTPS\",\r\n         \"HTTP-Over-QUIC\",\"HTTP\",\r\n         \"HTTP\",\"HTTP\",\r\n         \"DNS Over TLS\",\"DNS\",\r\n         \"HTTP proxy\",\"HTTP\",\r\n         \"IMAPS\",\"IMAPS\",\r\n         \"SMTP\",\"SMTP\",\r\n         \"IMAP\",\"IMAP\",\r\n         \"POP3S\",\"POP3\",\r\n         \"SMTP Submission Service\",\"SMTP\",\r\n         \"X11\",\"X11\",\r\n         \"RTSP\",\"RTSP\",\r\n         \"Telnet\",\"TELNET\",\r\n         \"NNTP\",\"NNTP\",\r\n         \"ISAKMP\",\"ISAKMP\",\"ISAKMP\",\"ISAKMP\",\r\n         \"POP3\",\"POP3\",\r\n         \"BGP\",\"BGP\",\r\n         \"FTP\",\"FTP\",\r\n         \"RIP\",\"RIP\",\r\n         \"Squid HTTP proxy\",\"HTTP\",\r\n         \"TFTP\",\"TFTP\",\r\n         \"QOTD\",\"QOTD\",\r\n         \"SCCP\",\"SCCP\",\r\n         \"Modbus\",\"MODBUS\",\r\n         \"SVN\",\"SVN\",\r\n         \"RADIUS (Accounting)\",\"RADIUS\",\r\n         \"Kerberos\",\"KERBEROS\",\r\n         \"GRE\",\"GRE\",\r\n         \"UUCP-rlogin\",\"UUCP\",\r\n         \"GTP User Data Tunneling\",\"GTP\",\r\n         \"NNTPS\",\"NNTP\",\r\n         \"GTP Control\",\"GTP\",\r\n         \"IRC-default\",\"IRC\",\r\n         \"FTPS (Control)\",\"FTPS\",\r\n         \"ICCP\",\"ICCP\",\r\n         \"IRCS\",\"IRC\",\r\n         \"Telnets\",\"TELNET\",\r\n         \"Finger\",\"FINGER\",\r\n         \"ESP\",\"ESP\",\r\n         \"Rlogin\",\"RLP\",\r\n         \"IMAP3\",\"IMAP\",\r\n         \"MGCP\",\"MGCP\",\r\n         \"RADIUS Accounting (Old)\",\"RADIUS\",\r\n         \"RADIUS (Old)\",\"RADIUS\",\r\n         \"CVS\",\"CVS\",\r\n         \"Ident\",\"IDENT\",\r\n         \"Gopher\",\"GOPHER\",\r\n         \"BGMP\",\"BGMP\",\r\n         \"FTPS (Data)\",\"FTPS\",\r\n         \"POP2\",\"POP\",\r\n         \"TLISRV\",\"TLISRV\",\r\n         \"INGRES-NET\",\"INGRES-NET\",\r\n         \"IPIP\",\"IPIP\",\r\n         \"XTP\",\"XTP\",\r\n         \"UUCP\",\"UUCP\",\r\n         \"IRC\",\"IRC\",\r\n         \"Photuris (ICMP)\",\"ICMP\",\r\n         \"TACACS-DS\",\"TACACS-DS\",\r\n         \"WESP\",\"WESP\",\r\n         \"EGP\",\"EGP\",\r\n         \"WSN\",\"WSN\",\r\n         \"XDMCP\",\"XDMCP\",\r\n         \"Kerberos IV\",\"KERBEROS\",\r\n         \"IRTP\",\"IRTP\",\r\n         \"TTP\",\"TTP\",\r\n         \"IRC-SERV\",\"IRC\",\r\n         \"I-NLSP\",\"NLSP\",\r\n         \"SNP\",\"SNP\",\r\n         \"XNS-IDP\",\"XNS\",\r\n         \"SECURE-VMTP\",\"VMTP\",\r\n         \"VMTP\",\"VMTP\",\r\n         \"IPLT\",\"IPLT\",\r\n         \"GGP\",\"GGP\",\r\n         \"MFE-NSP\",\"NSP\",\r\n         \"HIP\",\"HIP\",\r\n         \"MERIT-NSP\",\"NSP\",\r\n         \"NSFNET-IGP\",\"IGP\",\r\n         \"DCN-MEAS\",\"DCN\",\r\n         \"STP\",\"STP\",\r\n         \"SRP\",\"SRP\",\r\n         \"HMP\",\"HMP\",\r\n         \"XNET\",\"XNET\",\r\n         \"VRRP\",\"VRRP\",\r\n         \"ENCAP\",\"ENCAP\",\r\n         \"CPNX\",\"CPNX\",\r\n         \"PTP\",\"PTP\",\r\n         \"SKIP\",\"SKIP\",\r\n         \"SCPS\",\"SCPS\",\r\n         \"Sprite-RPC\",\"RPC\",\r\n         \"IPv6 ICMP\",\"ICMP\",\r\n         \"MUX\",\"MUX\",\r\n         \"CHAOS\",\"CHAOS\",\r\n         \"SSCOPMCE\",\"SSCOPMCE\",\r\n         \"CBT\",\"CBT\",\r\n         \"SPS\",\"SPS\",\r\n         \"ETHERIP\",\"ETHERIP\",\r\n         \"MTP\",\"MTP\",\r\n         \"ROHC\",\"ROHC\",\r\n         \"CRTP\",\"CRTP\",\r\n         \"PNNI\",\"PNNI\",\r\n         \"NETBLT\",\"NETBLT\",\r\n         \"TLSP\",\"TLSP\",\r\n         \"IDPR\",\"IDPR\",\r\n         \"DDX\",\"DDX\",\r\n         \"PUP\",\"PUP\",\r\n         \"DSR\",\"DSR\",\r\n         \"NARP\",\"NARP\",\r\n         \"CPHB\",\"CPHB\",\r\n         \"SMP\",\"SMP\",\r\n         \"L2TP\",\"L2TP\",\r\n         \"IPv6 ICMP/143/0\",\"ICMP\",\r\n         \"MICP\",\"MICP\",\r\n         \"GMTP\",\"GMTP\",\r\n         \"LARP\",\"LARP\",\r\n         \"IFMP\",\"IFMP\",\r\n         \"IGP\",\"IGP\",\r\n         \"CFTP\",\"CFTP\",\r\n         \"PGM\",\"PGM\",\r\n         \"DDP\",\"DDP\",\r\n         \"PIPE\",\"PIPE\",\r\n         \"IATP\",\"IATP\",\r\n         \"IGMP\",\"IGMP\",\r\n         \"3PC\",\"3PC\",\r\n         \"DGP\",\"DGP\",\r\n         \"TCF\",\"TCF\",\r\n         \"UTI\",\"UTI\",\r\n         \"DCCP\",\"DCCP\",\r\n         \"SWIPE\",\"SWIPE\",\r\n         \"EMCON\",\"EMCON\",\r\n         \"PIM\",\"PIM\",\r\n         \"RVD\",\"RVD\",\r\n   ];\r\n let ActionLookup=datatable(DeviceAction:string,DvcAction_ActionLookup:string,EventResult_ActionLookup:string,EventSeverity_ActionLookup:string)\r\n [\r\n           \"Allow\",\"Allow\",\"Success\",\"Informational\",          \r\n           \"Discard\",\"Drop\",\"Failure\",\"Low\",\r\n           \"Permit\",\"Allow\",\"Success\",\"Informational\",          \r\n           \"Refuse\",\"Deny\",\"Failure\",\"Low\",\r\n           \"Terminate\",\"Reset Source\",\"Failure\",\"Low\",          \r\n           \"Terminate (failed)\",\"\",\"Failure\",\"Low\",\r\n           \"Terminate (passive)\",\"Reset Destination\",\"Failure\",\"Low\",          \r\n           \"Terminate (reset)\",\"Reset\",\"Failure\",\"Low\",\r\n           \"Wait for Authentication\",\"\",\"Success\",\"Informational\",\r\n           \"Wait for Further Actions\",\"\",\"Success\",\"Informational\",          \r\n           \"Wait for RPC Reply\",\"\",\"Success\",\"Informational\"\r\n ];\r\n let DeviceEventClassIDLookup_Packet=datatable(DeviceEventClassID:string,EventSubType:string,DvcAction_DeviceEventClassIDLookup:string,EventResult_DeviceEventClassIDLookup:string,EventSeverity_DeviceEventClassIDLookup:string) //Add more codes if needed\r\n [\r\n           \"70018\",\"Start\",\"Allow\",\"Success\",\"Informational\", // Connection_Allowed\r\n           \"70019\",\"End\",\"Deny\",\"Failure\",\"Low\", // Connection_Discarded\r\n           \"70021\",\"End\",\"Reset\",\"Failure\",\"Low\", // Connection_Closed\r\n           \"70022\",\"End\",\"Reset\",\"Failure\",\"Low\", // Connection_Closed-Abnormally\r\n           \"70026\",\"\",\"\",\"Success\",\"Informational\", // Connection_Progress\r\n ];\r\n let DeviceEventClassIDLookup_File=datatable(DeviceEventClassID:string,DvcAction_DeviceEventClassIDLookup:string,EventResult_DeviceEventClassIDLookup:string,EventSeverity_DeviceEventClassIDLookup:string)\r\n [\r\n           \"76506\",\"Allow\",\"Success\",\"Informational\", // File_Allowed\r\n           \"76508\",\"Deny\",\"Failure\",\"Low\", // File_Malware-Blocked\r\n           \"76509\",\"\",\"Failure\",\"Low\" // File_Malware-Detected\r\n ];\r\n let MessageLookup = datatable (Message:string, DvcAction_MessageLookup:string, EventResult_MessageLookup:string, EventResultDetails:string, EventOriginalResultDetails:string)  \r\n [\r\n         \"Connection dropped\", \"Drop\", \"Failure\",\"Terminated\", \"Connection dropped\",\r\n         \"Connection removed because NGFW Engine is low on memory.\",\"Drop\", \"Failure\",\"Terminated\",\"Connection removed because NGFW Engine is low on memory.\",\r\n         \"Connection timeout in state TCP_CLOSE_WAIT\", \"\", \"Success\", \"Timeout\",\t\"One end of the Connection waits for the FIN packet (passive close).\",\r\n         \"Connection timeout in state TCP_CLOSE_WAIT_ACK\", \"\", \"Success\", \"Timeout\", \"One end of the Connection waits for the FIN packet (passive close)\",\r\n         \"Connection timeout in state TCP_CLOSING\", \"\", \"Success\", \"Timeout\", \"Closing packet (FIN) sent by one end of the Connection (simultaneous).\",\r\n         \"Connection timeout in state TCP_CLOSING_ACK\", \"\", \"Success\", \"Timeout\", \"Waiting for ACK for the FIN before going to closing status (active close).\",\r\n         \"Connection timeout in state TCP_ESTABLISHED\", \"\", \"Failure\", \"Timeout\", \"Normal status of TCP Connections for data transfer.\",\r\n         \"Connection timeout in state TCP_FIN_WAIT_1\", \"\", \"Success\", \"Timeout\",\t\"One end of the Connection waits for sending the FIN packet (active close).\",\r\n         \"Connection timeout in state TCP_FIN_WAIT_2\", \"\", \"Success\", \"Timeout\", \"One end of the Connection waits for receiving ACK packet.\",\r\n         \"Connection timeout in state TCP_LAST_ACK\", \"\",\t\"Success\", \"Timeout\", \"One end of the Connection sent a FIN packet (passive close).\",\r\n         \"Connection timeout in state TCP_LAST_ACK_WAIT\", \"\", \"Failure\",\t\"Timeout\", \"Waiting for the FIN packet to be acknowledged.\",\r\n         \"Connection timeout in state TCP_SYN_ACK_SEEN\", \"\", \"Failure\",\t\"Timeout\", \"Second phase of the TCP three-way handshake, the server has replied to client sent SYN with SYN+ACK, next status will be established.\",\r\n         \"Connection timeout in state TCP_SYN_FIN_SEEN\", \"\",\t\"Success\", \"Timeout\", \"T/TCP (Transactional TCP) Connection, RFC 1644.\",\r\n         \"Connection timeout in state TCP_SYN_RETURN\", \"\", \"Failure\", \"Timeout\", \"Received simultaneous SYN from the other end (simultaneous open).\",\r\n         \"Connection timeout in state TCP_SYN_SEEN\", \"\", \"Failure\", \"Timeout\", \"First packet sent by one end of the Connection.\",\r\n         \"Connection timeout in state TCP_TIME_WAIT\", \"\", \"Success\", \"Timeout\", \"One end of the Connection acknowledged closing packet (FIN).\",\r\n         \"Connection timeout in state TCP_TIME_WAIT_ACK\", \"\", \"Failure\",\t\"Timeout\", \"Waiting for ACK for the FIN status before going to time wait status (active close).\",\r\n         \"Connection timeout in state ICMP_ECHO\", \"\", \"Failure\", \"Timeout\", \"Ping reply is expected.\",\r\n         \"Connection timeout in state ICMP_REPLY_WAIT\", \"\", \"Failure\", \"Timeout\", \"Other ICMP request or reply types.\",\r\n         \"Connection was reset by client\", \"Reset Source\", \"Failure\",\"Reset\", \"\",\r\n         \"Connection was reset by server\", \"Reset Destination\", \"Failure\",\"Reset\", \"\",\r\n         \"invalid packet (CT)\", \"\", \"Failure\", \"Invalid TCP\", \"\",\r\n         \"not a (valid) SYN packet [A] (CT)\", \"\", \"Failure\", \"Invalid TCP\", \"\",\r\n         \"not a (valid) SYN packet [FA] (CT)\", \"\", \"Failure\", \"Invalid TCP\", \"\",\r\n         \"not a (valid) SYN packet [FPA] (CT)\", \"\", \"Failure\", \"Invalid TCP\", \"\",\r\n         \"not a (valid) SYN packet [PA] (CT)\", \"\", \"Failure\", \"Invalid TCP\", \"\",\r\n         \"not a (valid) SYN packet [RA] (CT)\", \"\", \"Failure\", \"Invalid TCP\", \"\",\r\n         \"not a (valid) SYN packet [SA] (CT)\", \"\", \"Failure\", \"Invalid TCP\", \"\",\r\n         \"TCP state violation\",\"Deny\",\"Failure\", \"Invalid TCP\", \"\",\r\n         \"TCP state violation: Connection end-point replied with ACK to SYN-packet. Connection refused.\", \"Deny\", \"Failure\", \"Invalid TCP\", \"\",\r\n         \"TSC error: Query timed out\", \"\", \"Failure\", \"Timeout\", \"\"\r\n ];\r\n let parser = (disabled:bool) { \r\n let ForcePointNetwork = CommonSecurityLog\r\n         | where not(disabled)\r\n         | where DeviceVendor==\"FORCEPOINT\" and DeviceProduct==\"Firewall\"\r\n         | where DeviceFacility in~ (\"Inspection\",\"Packet Filtering\",\"File Filtering\") and isnotempty(DeviceEventClassID) and DeviceEventClassID != \"0\" \r\n         ;\r\n let PacketFilteringData = ForcePointNetwork\r\n         | where DeviceFacility == \"Packet Filtering\" and DeviceEventClassID !in (\"70383\",\"70393\",\"70734\",\"71009\",\"71040\")\r\n         | lookup DeviceEventClassIDLookup_Packet on DeviceEventClassID\r\n         | lookup MessageLookup on Message\r\n         | extend DvcAction = coalesce(DvcAction_MessageLookup, DvcAction_DeviceEventClassIDLookup), \r\n                 EventResult = case (Message startswith \"Referred connection not known\", \"Failure\",\r\n                                     coalesce(EventResult_MessageLookup, EventResult_DeviceEventClassIDLookup)), \r\n                 EventSeverity = case(Message startswith \"Referred connection not known\", \"Low\",\r\n                                     EventSeverity_DeviceEventClassIDLookup),\r\n                 EventOriginalResultDetails = case(Message startswith \"Referred connection not known\", Message,\r\n                                                 EventOriginalResultDetails),\r\n                 EventType = \"NetworkSession\"\r\n         | project-away DvcAction_*, EventResult_*, EventSeverity_DeviceEventClassIDLookup;\r\n let FileFilteringData = ForcePointNetwork\r\n         | where DeviceFacility == \"File Filtering\"\r\n         | lookup DeviceEventClassIDLookup_File on DeviceEventClassID\r\n         | extend ThreatName = case (DeviceEventClassID in (\"76508\", \"76509\"), Activity,\r\n                                     \"\")\r\n         | project-rename DvcAction = DvcAction_DeviceEventClassIDLookup\r\n         | extend EventResult = case(isnotempty(Message), \"Failure\",\r\n                                     EventResult_DeviceEventClassIDLookup), \r\n                  EventSeverity = case(isnotempty(Message), \"Low\",\r\n                                     EventSeverity_DeviceEventClassIDLookup),\r\n                  EventOriginalResultDetails = case(isnotempty(Message), Message,\r\n                                                 \"\"),\r\n                 EventType = \"NetworkSession\"\r\n         | project-away *_DeviceEventClassIDLookup;\r\n let InspectionData = ForcePointNetwork\r\n         | where DeviceFacility == \"Inspection\" or DeviceEventClassID == \"70734\"\r\n         | extend MessageCode = toint(DeviceEventClassID)\r\n         | extend EventSeverity = case (DeviceAction in~ (\"Allow\",\"Permit\"), \"Informational\",\r\n                                     MessageCode >= 200000, \"High\",\r\n                                     MessageCode < 200000, \"Low\",\r\n                                     \"\"),\r\n                 EventType = case (MessageCode < 80000, \"NetworkSession\",\r\n                                  \"IDS\")\r\n         | extend ThreatName = Activity\r\n         | project-away MessageCode;\r\n union PacketFilteringData, FileFilteringData, InspectionData\r\n         | extend NetworkProtocol = _ASIM_LookupNetworkProtocol(Protocol)\r\n         | lookup ActionLookup on DeviceAction\r\n         | extend DvcAction = coalesce(DvcAction,DvcAction_ActionLookup), \r\n                  EventResult = coalesce(EventResult,EventResult_ActionLookup), \r\n                  EventSeverity = coalesce(EventSeverity, EventSeverity_ActionLookup)\r\n         | project-away *_ActionLookup\r\n         | lookup ApplicationProtocolLookup on ApplicationProtocol\r\n         | extend \r\n                 EventCount = toint(1),\r\n                 EventSchema = \"NetworkSession\",\r\n                 EventSchemaVersion = \"0.2.6\",\r\n                 EventVendor = \"Forcepoint\",\r\n                 EventProduct = \"Firewall\"\r\n         | parse AdditionalExtensions with * \"requestURL=\" requestURL            \r\n         | project-rename\r\n                 EventOriginalType = DeviceEventClassID,\r\n                 DstPortNumber = DestinationPort,\r\n                 DstIpAddr = DestinationIP,\r\n                 SrcPortNumber = SourcePort,\r\n                 SrcIpAddr = SourceIP,\r\n                 DstNatIpAddr = DestinationTranslatedAddress,\r\n                 DstNatPortNumber = DestinationTranslatedPort,\r\n                 SrcNatIpAddr = SourceTranslatedAddress,\r\n                 SrcNatPortNumber = SourceTranslatedPort,\r\n                 EventProductVersion = DeviceVersion,\r\n                 EventMessage = Message,\r\n                 DvcOriginalAction = DeviceAction,\r\n                 SrcBytes = SentBytes,\r\n                 DstBytes = ReceivedBytes,\r\n                 EventOriginalSubType = DeviceFacility,\r\n                 DvcId = DeviceExternalID,\r\n                 DvcInboundInterface = DeviceInboundInterface,\r\n                 DvcOutboundInterface = DeviceOutboundInterface,\r\n                 DvcIpAddr = DeviceAddress,\r\n                 EventOriginalSeverity = LogSeverity,\r\n                 ThreatId = DeviceCustomString3\r\n         | invoke _ASIM_ResolveDvcFQDN('Computer')\r\n         | extend\r\n                 ThreatCategory = column_ifexists(\"DeviceEventCategory\",\"\"),\r\n                 EventStartTime = todatetime(ReceiptTime),\r\n                 EventEndTime = todatetime(ReceiptTime),\r\n                 ipv6_parts = extract_all (@'^\\[(.+)\\](?:\\:(\\d+))?$',requestURL)[0],\r\n                 ipv4_parts = extract_all (@'^(\\d+\\.\\d+\\.\\d+\\.\\d+)(?:\\:(\\d+))?$',requestURL)[0],\r\n                 host_parts = extract_all (@'^([^\\\\\\d:]+)(?:\\:(\\d+))?$',requestURL)[0]\r\n         | extend \r\n                  NetworkRuleName = case(isnotempty(DeviceCustomString2), strcat(DeviceCustomString1,',',DeviceCustomString2),\r\n                                         DeviceCustomString1),\r\n                  DstDomainPart = tostring(host_parts[0]),\r\n                  DstIpAddr = coalesce(DstIpAddr, tostring(ipv4_parts[0]), tostring(ipv6_parts[0])),\r\n                  DstPortNumber = coalesce(DstPortNumber, toint(host_parts[1]), toint(ipv4_parts[1]), toint(ipv6_parts[1]))\r\n         | invoke _ASIM_ResolveDstFQDN('DstDomainPart')\r\n         | extend\r\n                  DvcIdType = case(isnotempty(DvcId), \"ForcepointId\",\r\n                                 \"\"),\r\n                  DstPortNumber = case(\r\n                                 isnotempty(DstPortNumber), DstPortNumber,\r\n                                 ApplicationProtocol startswith \"TCP\", toint(split(ApplicationProtocol,'/')[1]),\r\n                                 ApplicationProtocol startswith \"UDP\", toint(split(ApplicationProtocol,'/')[1]),\r\n                                 int(null)),\r\n                  AdditionalFields = pack(iff(isnotempty(RequestMethod) and RequestMethod != \"UNKNOWN\", \"RequestMethod\", \"\"),RequestMethod,\r\n                                          iff(isnotempty(DeviceCustomString4),\"VirusId\",\"\"),DeviceCustomString4),\r\n                  DstAppName = case(DestinationServiceName in~ (\"Generic-Web-HTTP\",\"Application-Unknown\",\"Unknown-Encrypted-Application\"), \"\",\r\n                                     DestinationServiceName),\r\n                  DvcIpAddr = coalesce(DvcIpAddr,DeviceName)\r\n         | extend\r\n                 Dvc = DvcIpAddr,\r\n                 IpAddr = SrcIpAddr,\r\n                 Rule = NetworkRuleName,\r\n                 Dst = DstIpAddr,\r\n                 Src = SrcIpAddr,\r\n                 DvcInterface = DvcInboundInterface,\r\n                 Hostname = DstHostname\r\n         | project-away AdditionalExtensions, CommunicationDirection, Device*, Destination*, EndTime, ExternalID, File*, Flex*, IndicatorThreatType, Malicious*, Old*, OriginalLogSeverity, Process*, Protocol, ReceiptTime, Remote*, ReportReferenceLink, Request*, SimplifiedDeviceAction, Source*, StartTime, TenantId, ThreatConfidence, ThreatDescription, ThreatSeverity, ExtID, EventOutcome, FieldDevice*, Reason, ApplicationProtocol, Activity, requestURL, Computer, DstDomainPart, host_parts, ipv4_parts, ipv6_parts\r\n     };\r\n     parser(disabled=disabled)", "params": "disabled:bool = false"}}