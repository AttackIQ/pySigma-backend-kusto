{"_ASim_Dns_CorelightZeekV04": {"body": "let query_type_lookup=datatable(DnsQueryType:int,DnsQueryTypeName:string)[\r\n  0, \"Reserved\",\r\n  1, \"A\",\r\n  2, \"NS\",\r\n  3, \"MD\",\r\n  4, \"MF\",\r\n  5, \"CNAME\",\r\n  6, \"SOA\",\r\n  7, \"MB\",\r\n  8, \"MG\",\r\n  9, \"MR\",\r\n  10, \"NULL\",\r\n  11, \"WKS\",\r\n  12, \"PTR\",\r\n  13, \"HINFO\",\r\n  14, \"MINFO\",\r\n  15, \"MX\",\r\n  16, \"TXT\",\r\n  17, \"RP\",\r\n  18, \"AFSDB\",\r\n  19, \"X25\",\r\n  20, \"ISDN\",\r\n  21, \"RT\",\r\n  22, \"NSAP\",\r\n  23, \"NSAP-PTR\",\r\n  24, \"SIG\",\r\n  25, \"KEY\",\r\n  26, \"PX\",\r\n  27, \"GPOS\",\r\n  28, \"AAAA\",\r\n  29, \"LOC\",\r\n  30, \"NXT\",\r\n  31, \"EID\",\r\n  32, \"NIMLOC\",\r\n  33, \"SRV\",\r\n  34, \"ATMA\",\r\n  35, \"NAPTR\",\r\n  36, \"KX\",\r\n  37, \"CERT\",\r\n  38, \"A6\",\r\n  39, \"DNAME\",\r\n  40, \"SINK\",\r\n  41, \"OPT\",\r\n  42, \"APL\",\r\n  43, \"DS\",\r\n  44, \"SSHFP\",\r\n  45, \"IPSECKEY\",\r\n  46, \"RRSIG\",\r\n  47, \"NSEC\",\r\n  48, \"DNSKEY\",\r\n  49, \"DHCID\",\r\n  50, \"NSEC3\",\r\n  51, \"NSEC3PARAM\",\r\n  52, \"TLSA\",\r\n  53, \"SMIMEA\",\r\n  54, \"Unassigned\",\r\n  55, \"HIP\",\r\n  56, \"NINFO\",\r\n  57, \"RKEY\",\r\n  58, \"TALINK\",\r\n  59, \"CDS\",\r\n  60, \"CDNSKEY\",\r\n  61, \"OPENPGPKEY\",\r\n  62, \"CSYNC\",\r\n  99, \"SPF\",\r\n  100, \"UINFO\",\r\n  101, \"UID\",\r\n  102, \"GID\",\r\n  103, \"UNSPEC\",\r\n  104, \"NID\",\r\n  105, \"L32\",\r\n  106, \"L64\",\r\n  107, \"LP\",\r\n  108, \"EUI48\",\r\n  109, \"EUI64\",\r\n  249, \"TKEY\",\r\n  250, \"TSIG\",\r\n  251, \"IXFR\",\r\n  252, \"AXFR\",\r\n  253, \"MAILB\",\r\n  254, \"MAILA\",\r\n  255, \"ANY\",\r\n  256, \"URI\",\r\n  257, \"CAA\",\r\n  258, \"AVC\",\r\n  259, \"DOA\",\r\n  32768, \"TA\",\r\n  32769, \"DLV\"];\r\nlet class_lookup = datatable(DnsQueryClass:int, DnsQueryClassName: string)[\r\n    0, 'Reserved',\r\n    1, 'IN',\r\n    2, 'Unassigned',\r\n    3, 'CH',\r\n    4, 'HS',\r\n    254, 'None',\r\n    255, 'Any'];\r\nlet parser=(disabled:bool=false){\r\n  Corelight_CL | where not(disabled)\r\n  | where Message has '\"_path\":\"dns\"' or Message has '\"_path\":\"dns_red\"'\r\n  | parse-kv Message as (\r\n      ['\"_system_name\"']:string,\r\n      ['\"_write_ts\"']:datetime,\r\n      ['\"ts\"']:datetime,\r\n      ['\"uid\"']:string,\r\n      ['\"id.orig_h\"']:string,\r\n      ['\"id.orig_p\"']:int,\r\n      ['\"id.resp_h\"']:string,\r\n      ['\"id.resp_p\"']:int,\r\n      ['\"proto\"']:string,\r\n      ['\"trans_id\"']:int,\r\n      ['\"query\"']:string,\r\n      ['\"qclass\"']:int,\r\n      ['\"qtype\"']:int,\r\n      ['\"AA\"']:bool,\r\n      ['\"TC\"']:bool,\r\n      ['\"CD\"']:bool,\r\n      ['\"RD\"']:bool,\r\n      ['\"RA\"']:bool,\r\n      ['\"Z\"']:int,\r\n      ['\"rejected\"']:bool,\r\n      ['\"rcode\"']:int,\r\n      ['\"rcode_name\"']:string,\r\n      ['\"rtt\"']:real,\r\n  ) \r\n  with (quote = '\"')\r\n  | parse Message with * '\"answers\":' answers:string ',\"TTLs\":' TTLs:string ',\"rejected\"' *\r\n  | extend \r\n      EventCount=int(1),\r\n      EventProduct=\"Zeek\",\r\n      EventVendor=\"Corelight\",\r\n      EventSchema = \"Dns\",\r\n      EventSchemaVersion=\"0.1.4\",\r\n      EventType=\"Query\"\r\n  | project-rename\r\n      EventStartTime= ['\"ts\"'],\r\n      EventEndTime = ['\"_write_ts\"'],\r\n      EventOriginalUid = ['\"uid\"'],\r\n      SrcIpAddr = ['\"id.orig_h\"'],\r\n      SrcPortNumber = ['\"id.orig_p\"'],\r\n      DstIpAddr = ['\"id.resp_h\"'],\r\n      DstPortNumber = ['\"id.resp_p\"'],\r\n      NetworkProtocol = ['\"proto\"'],\r\n      DnsQuery = ['\"query\"'],\r\n      DnsResponseCode = ['\"rcode\"'],\r\n      EventResultDetails = ['\"rcode_name\"'],\r\n      DnsFlagsAuthoritative = ['\"AA\"'],\r\n      DnsFlagsTruncated = ['\"TC\"'],\r\n      DnsFlagsRecursionDesired = ['\"RD\"'],\r\n      DnsFlagsCheckingDisabled = ['\"CD\"'],\r\n      DnsFlagsRecursionAvailable = ['\"RA\"'],\r\n      DnsQueryClass = ['\"qclass\"'],\r\n      DnsQueryType = ['\"qtype\"'],\r\n      rtt = ['\"rtt\"'],\r\n      Z = ['\"Z\"'],\r\n      trans_id = ['\"trans_id\"'],\r\n      rejected = ['\"rejected\"'],\r\n      Dvc = ['\"_system_name\"']\r\n  | lookup query_type_lookup on DnsQueryType\r\n  | lookup class_lookup on DnsQueryClass\r\n  | extend\r\n      EventSubType=iff(isnull(DnsResponseCode),'request','response'),\r\n      DnsNetworkDuration = toint(rtt*1000),\r\n      EventResult = iff (EventResultDetails!~'NOERROR' or rejected,'Failure','Success'),\r\n      DnsQueryTypeName = case (DnsQueryTypeName == \"\" and not(isnull(DnsQueryType)), strcat(\"TYPE\", DnsQueryType), DnsQueryTypeName),\r\n      DnsQueryClassName = case (DnsQueryClassName == \"\" and not(isnull(DnsQueryClass)), strcat(\"CLASS\", DnsQueryClass), DnsQueryClassName),\r\n      TransactionIdHex = tohex(toint(trans_id)),\r\n      DnsFlagsZ = (Z != 0),\r\n      DnsResponseName = tostring(pack ('answers', answers, 'ttls', TTLs)) // support of auth & addl to be added.\r\n  // Aliases\r\n  | extend \r\n      DnsResponseCodeName=EventResultDetails, \r\n      Domain=DnsQuery,\r\n      IpAddr=SrcIpAddr,\r\n      Src=SrcIpAddr,\r\n      //Duration=DnsNetworkDuration,\r\n      Dst=DstIpAddr\r\n  | project-away Message, MG, ManagementGroupName, RawData, SourceSystem, Computer, Z, TTLs, answers, trans_id, rejected, hostname_s\r\n};\r\nparser (disabled=disabled)", "params": "disabled:bool = false"}}