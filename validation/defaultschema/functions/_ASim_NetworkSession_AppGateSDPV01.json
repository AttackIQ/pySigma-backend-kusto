{"_ASim_NetworkSession_AppGateSDPV01": {"body": "let parser = (disabled:bool=false) \r\n{\r\n  let DirectionLookup = datatable (direction:string, NetworkDirection:string) \r\n  [\r\n    'up', 'Inbound',\r\n    'down', 'Outbound'\r\n  ];\r\n  let ActionLookup = datatable (DvcOriginalAction:string, DvcAction:string, EventSeverity:string, EventResult:string)\r\n  [\r\n    'allow', 'Allow', 'Informational', 'Success',\r\n    'drop', 'Drop', 'Low', 'Failure',\r\n    'reject', 'Deny', 'Low', 'Failure',\r\n    'block', 'Deny', 'Low', 'Failure',\r\n    'block_report', 'Deny', 'Low', 'Failure',\r\n    'allow_report', 'Allow', 'Informational', 'Success'\r\n  ];\r\n  let tcpupd_success = Syslog\r\n  | where \r\n    ProcessName in (\"cz-sessiond\", \"cz-vpnd\")\r\n    and SyslogMessage has_all (\"[AUDIT]\",\"ip_access\",'\"rule_name\"')\r\n    and SyslogMessage has_any ('\"protocol\":\"UDP\"','\"protocol\":\"TCP\"') \r\n  | project TimeGenerated, SyslogMessage, Computer\r\n  | extend type = extract (@'\"event_type\"\\:\\\"(.*?)\\\"', 1,  SyslogMessage)\r\n  | where type == \"ip_access\"\r\n  | parse-where SyslogMessage with \r\n      *\r\n      '\"action\":\"' DvcOriginalAction:string '\",' * \r\n      '\"client_ip\":\"' SrcIpAddr:string '\",' *\r\n      '\"client_port\":' SrcPortNumber:int ',' *\r\n      '\"destination_ip\":\"' DstIpAddr:string '\",' *\r\n      '\"destination_port\":' DstPortNumber:int ',' *\r\n      '\"direction\":\"' direction:string '\",' * \r\n      '\"distinguished_name_device_id\":\"' SrcDvcId:string '\",' *\r\n      '\"distinguished_name_user\":\"' SrcUsername:string '\",' *\r\n      '\"entitlement_token_id\":\"' NetworkSessionId:string '\",' *\r\n      '\"packet_size\":' SrcBytes:long ',' *\r\n      '\"protocol\":\"' NetworkProtocol:string '\",' *          \r\n      '\"rule_name\":\"' NetworkRuleName:string '\",' *  \r\n      '\"source_ip\":\"' SrcNatIpAddr:string '\",' *\r\n      '\"source_port\":' SrcNatPortNumber:int ',' * \r\n      '\"version\":' EventProductVersion:string '}' *\r\n  ;\r\n  let tcpupd_fail = \r\n    Syslog\r\n    | where \r\n      ProcessName in (\"cz-sessiond\", \"cz-vpnd\")\r\n      and SyslogMessage has_all (\"[AUDIT]\",\"ip_access\",'\"drop-reason\"')\r\n      and SyslogMessage has_any ('\"protocol\":\"UDP\"','\"protocol\":\"TCP\"') \r\n    | project TimeGenerated, SyslogMessage, Computer\r\n    | extend type = extract (@'\"event_type\"\\:\\\"(.*?)\\\"', 1,  SyslogMessage)\r\n    | where type == \"ip_access\"\r\n    | parse-where SyslogMessage with \r\n        *\r\n        '\"action\":\"' DvcOriginalAction:string '\",' * \r\n        '\"client_ip\":\"' SrcIpAddr:string '\",' *\r\n        '\"client_port\":' SrcPortNumber:int ',' *\r\n        '\"destination_ip\":\"' DstIpAddr:string '\",' *\r\n        '\"destination_port\":' DstPortNumber:int ',' *\r\n        '\"direction\":\"' direction:string '\",' * \r\n        '\"distinguished_name_device_id\":\"' SrcDvcId:string '\",' *\r\n        '\"distinguished_name_user\":\"' SrcUsername:string '\",' *\r\n        '\"drop-reason\":\"' EventOriginalResultDetails:string '\",' *\r\n        '\"entitlement_token_id\":\"' NetworkSessionId:string '\",' *\r\n        '\"packet_size\":' SrcBytes:long ',' *\r\n        '\"protocol\":\"' NetworkProtocol:string '\",' *\r\n        '\"source_ip\":\"' SrcNatIpAddr:string '\",' *\r\n        '\"source_port\":' SrcNatPortNumber:int ',' * \r\n        '\"version\":' EventProductVersion:string '}' *\r\n     ;\r\n  let icmp_success = Syslog\r\n  | where \r\n    ProcessName in (\"cz-sessiond\", \"cz-vpnd\")\r\n    and SyslogMessage has_all (\"[AUDIT]\",\"ip_access\",'\"protocol\":\"ICMP\"') \r\n  | project TimeGenerated, SyslogMessage, Computer\r\n  | extend type = extract (@'\"event_type\"\\:\\\"(.*?)\\\"', 1,  SyslogMessage)\r\n  | where type == \"ip_access\"\r\n  | parse-where SyslogMessage with \r\n      *\r\n      '\"action\":\"' DvcOriginalAction:string '\",' * \r\n      '\"client_ip\":\"' SrcIpAddr:string '\",' *\r\n      '\"client_port\":' SrcPortNumber:int ',' *\r\n      '\"destination_ip\":\"' DstIpAddr:string '\",' *\r\n      '\"direction\":\"' direction:string '\",' * \r\n      '\"distinguished_name_device_id\":\"' SrcDvcId:string '\",' *\r\n      '\"distinguished_name_user\":\"' SrcUsername:string '\",' *\r\n      '\"entitlement_token_id\":\"' NetworkSessionId:string '\",' *\r\n      '\"icmp_code\":' NetworkIcmpSubCode:int ',' *\r\n      '\"icmp_type\":' NetworkIcmpCode:int ',' *  \r\n      '\"packet_size\":' SrcBytes:long ',' *\r\n      '\"protocol\":\"' NetworkProtocol:string '\",' *          \r\n      '\"rule_name\":\"' NetworkRuleName:string '\",' *  \r\n      '\"source_ip\":\"' SrcNatIpAddr:string '\",' *\r\n      '\"version\":' EventProductVersion:string '}' *\r\n  ;\r\n  union  tcpupd_success, tcpupd_fail, icmp_success \r\n  | parse SyslogMessage with \r\n      *\r\n      '\"country_name\":\"' SrcGeoCountry:string '\",' *\r\n      '\"lat\":' SrcGeoLatitude:real ',' *        \r\n      '\"lon\":' SrcGeoLongitude:real '}' *\r\n  | parse SyslogMessage with \r\n       *\r\n      '\"city_name\":\"' SrcGeoCity:string '\",' *\r\n      '\"region_name\":\"' SrcGeoRegion:string '\",' *\r\n  | extend \r\n      SrcDvcIdType = 'AppGateId',\r\n      SrcUsernameType = 'UPN'\r\n  // -- Event fields\r\n  | project-rename \r\n      DvcHostname = Computer\r\n  | extend \r\n      EventCount = int(1),\r\n      EventEndTime = TimeGenerated,\r\n      EventStartTime = TimeGenerated,\r\n      EventSchema = 'NetworkSession',\r\n      EventSchemaVersion = '0.2.3',\r\n      EventVendor = 'AppGate',\r\n      EventProduct = 'SDP',\r\n      EventType = 'NetworkSession'\r\n  | lookup DirectionLookup on direction\r\n  | lookup ActionLookup on DvcOriginalAction\r\n  // -- Aliases\r\n  | extend \r\n      Src = SrcIpAddr,\r\n      Dst = DstIpAddr,\r\n      Dvc = DvcHostname,\r\n      SessionId = NetworkSessionId,\r\n      IpAddr = SrcIpAddr,\r\n      Rule = NetworkRuleName\r\n  | project-away \r\n      SyslogMessage, type, direction\r\n};\r\nparser (disabled)", "params": "disabled:bool = false"}}