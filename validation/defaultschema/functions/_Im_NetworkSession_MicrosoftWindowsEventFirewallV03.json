{"_Im_NetworkSession_MicrosoftWindowsEventFirewallV03": {"body": "// Data tables for mapping raw values into string\r\nlet LayerCodeTable = datatable (LayerCode:string,LayerName:string)[\r\n  '%%14596', 'IP Packet',\r\n  '%%14597', 'Transport',\r\n  '%%14598', 'Forward',\r\n  '%%14599', 'Stream',\r\n  '%%14600', 'Datagram Data',\r\n  '%%14601', 'ICMP Error',\r\n  '%%14602', 'MAC 802.3',\r\n  '%%14603', 'MAC Native',\r\n  '%%14604', 'vSwitch',\r\n  '%%14608', 'Resource Assignment',\r\n  '%%14609', 'Listen',\r\n  '%%14610', 'Receive/Accept',\r\n  '%%14611', 'Connect',\r\n  '%%14612', 'Flow Established',\r\n  '%%14614', 'Resource Release',\r\n  '%%14615', 'Endpoint Closure',\r\n  '%%14616', 'Connect Redirect',\r\n  '%%14617', 'Bind Redirect',\r\n  '%%14624', 'Stream Packet'];\r\nlet ProtocolTable = datatable (Protocol:int, NetworkProtocol: string)[\r\n  1, 'ICMP',\r\n  3, 'GGP',\r\n  6, 'TCP',\r\n  8, 'EGP',\r\n  12, 'PUP',\r\n  17, 'UDP',\r\n  20, 'HMP',\r\n  27, 'RDP',\r\n  46, 'RSVP',\r\n  47, 'PPTP data over GRE',\r\n  50, 'ESP',\r\n  51, 'AH',\r\n  66, 'RVD',\r\n  88, 'IGMP',\r\n  89, 'OSPF'];\r\nlet Directions = datatable (DirectionCode:string,NetworkDirection:string, isOutBound:bool)[\r\n  '%%14592', 'Inbound', false,\r\n  '%%14593', 'Outbound', true,\r\n  '%%14594', 'Forward',false,\r\n  '%%14595', 'Bidirectional', false,\r\n  '%%14609', 'Listen', false];\r\n///////////////////////////////////////////////////////\r\n// this query extract data fields from EventData column from SecurityEvent table\r\n///////////////////////////////////////////////////////\r\nlet WindowsFirewall_SecurityEvent=\r\n  (starttime:datetime=datetime(null)\r\n  , endtime:datetime=datetime(null)\r\n  , srcipaddr_has_any_prefix:dynamic=dynamic([])\r\n  , dstipaddr_has_any_prefix:dynamic=dynamic([])\r\n  , ipaddr_has_any_prefix:dynamic=dynamic([])\r\n  , dstportnumber:int=int(null)\r\n  , hostname_has_any:dynamic=dynamic([])\r\n  , dvcaction:dynamic=dynamic([])\r\n  , eventresult:string='*'\r\n  , disabled:bool=false\r\n    )\r\n    {    \r\n    let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \r\n    let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix); \r\n    let ip_any =set_union(srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix);\r\n    let SecurityEventProjected =\r\n      SecurityEvent\r\n      | project EventID, EventData, Computer, TimeGenerated, _ResourceId, _SubscriptionId, Type\r\n    ;\r\n    // Event IDs between (5151 .. 5159)\r\n    // will be extracting Event specific fields from 'EventData' field\r\n    let SecurityEvent_5152 = \r\n      SecurityEventProjected \r\n      | where (isnull(starttime) or TimeGenerated>=starttime)\r\n        and  (isnull(endtime) or TimeGenerated<=endtime)\r\n      | where not(disabled)\r\n      | where EventID==5152\r\n      // ***************  Prefilterring *****************************************************************\r\n      |where  (isnull(dstportnumber) or EventData has tostring(dstportnumber) ) \r\n        and  (array_length(ip_any)==0 \r\n              or has_any_ipv4_prefix(EventData ,ip_any)\r\n              ) \r\n        and (array_length(dvcaction)==0 or (dvcaction=='Deny') ) \r\n        and (array_length(hostname_has_any)==0 )\r\n        and (eventresult=='*' or eventresult=='Failure')\r\n        // *************** / Prefilterring *****************************************************************\r\n      | extend EventResult =  \"Failure\"\r\n        | parse EventData with * \r\n            '<Data Name=\"ProcessId\">'ProcessId:string'</Data>'\r\n            '\\x0d\\x0a  <Data Name=\"Application\">'Application'</Data>'\r\n            '\\x0d\\x0a  <Data Name=\"Direction\">'DirectionCode'</Data>'\r\n            '\\x0d\\x0a  <Data Name=\"SourceAddress\">'SrcIpAddr:string'</Data>'\r\n            '\\x0d\\x0a  <Data Name=\"SourcePort\">'SrcPortNumber:int'</Data>'\r\n            '\\x0d\\x0a  <Data Name=\"DestAddress\">'DstIpAddr'</Data>'\r\n            '\\x0d\\x0a  <Data Name=\"DestPort\">'DstPortNumber:int'</Data>'\r\n            '\\x0d\\x0a  <Data Name=\"Protocol\">'Protocol:int'</Data>'\r\n            '\\x0d\\x0a  <Data Name=\"FilterRTID\">'NetworkRuleNumber:int'</Data>'\r\n            '\\x0d\\x0a  <Data Name=\"LayerName\">'LayerCode'</Data>'\r\n            '\\x0d\\x0a  <Data Name=\"LayerRTID\">'LayerRTID'</Data>'*\r\n        | extend temp_isSrcMatch=has_any_ipv4_prefix(SrcIpAddr,src_or_any)\r\n        , temp_isDstMatch=has_any_ipv4_prefix(DstIpAddr,dst_or_any)\r\n        | extend ASimMatchingIpAddr = case(\r\n          array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, \"-\" // match not requested: probably most common case\r\n          , (temp_isSrcMatch and temp_isDstMatch), \"Both\" // has to be checked before the individual \r\n          , temp_isSrcMatch, \"SrcIpAddr\"\r\n          , temp_isDstMatch, \"DstIpAddr\"\r\n          , \"No match\"\r\n          )\r\n        | where ASimMatchingIpAddr != \"No match\"\r\n        | project-away temp_*, EventData\r\n      ;\r\n    let SecurityEvent_5154_5155_5158_5159 =\r\n    SecurityEventProjected \r\n      | where (isnull(starttime) or TimeGenerated>=starttime)\r\n          and  (isnull(endtime) or TimeGenerated<=endtime)\r\n        | where not(disabled)\r\n        | where EventID in (5154, 5155, 5158, 5159)\r\n        // ***************  Prefilterring *****************************************************************\r\n        |where   (array_length(dstipaddr_has_any_prefix)==0 ) \r\n          and  (array_length(hostname_has_any)==0 ) \r\n          and  (isnull(dstportnumber) ) \r\n          and  (array_length(ip_any)==0 \r\n                or has_any_ipv4_prefix(EventData ,ip_any)\r\n              ) \r\n          and (array_length(dvcaction)==0 \r\n              or (dvcaction=='Allow' and EventID in  (5154,5158))  \r\n              or (dvcaction=='Deny'  and EventID !in (5154,5158))\r\n              ) \r\n        | extend EventResult = iff(EventID in (5154, 5158), \"Success\", \"Failure\")\r\n        | where (eventresult=='*' or EventResult==eventresult)\r\n        // *************** / Prefilterring *****************************************************************\r\n        | parse EventData with * '<Data Name=\"ProcessId\">'ProcessId:string'</Data>' \r\n            '\\x0d\\x0a  <Data Name=\"Application\">'Application:string'</Data>'\r\n            '\\x0d\\x0a  <Data Name=\"SourceAddress\">'SrcIpAddr:string'</Data>'\r\n            '\\x0d\\x0a  <Data Name=\"SourcePort\">'SrcPortNumber:int'</Data>'\r\n            '\\x0d\\x0a  <Data Name=\"Protocol\">'Protocol:int'</Data>'\r\n            '\\x0d\\x0a  <Data Name=\"FilterRTID\">'NetworkRuleNumber:int'</Data>'\r\n            '\\x0d\\x0a  <Data Name=\"LayerName\">'LayerCode'</Data>'\r\n            '\\x0d\\x0a  <Data Name=\"LayerRTID\">'LayerRTID'</Data>'*\r\n        | extend DirectionCode = \"%%14609\"\r\n        | extend temp_isSrcMatch=has_any_ipv4_prefix(SrcIpAddr,src_or_any)\r\n          , temp_isDstMatch=false\r\n        | extend ASimMatchingIpAddr = case(\r\n            array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, \"-\" // match not requested: probably most common case\r\n          , (temp_isSrcMatch and temp_isDstMatch), \"Both\" // has to be checked before the individual \r\n          , temp_isSrcMatch, \"SrcIpAddr\"\r\n          , temp_isDstMatch, \"DstIpAddr\"\r\n          , \"No match\"\r\n          )\r\n        | where ASimMatchingIpAddr != \"No match\"\r\n        | project-away temp_* , EventData\r\n        ;\r\n    let SecurityEvent_5156_5157 =\r\n        SecurityEventProjected \r\n        | where (isnull(starttime) or TimeGenerated>=starttime)\r\n          and  (isnull(endtime) or TimeGenerated<=endtime)\r\n        | where not(disabled)\r\n        | where EventID in (5156, 5157)\r\n         | extend EventResult = iff(EventID == 5156, \"Success\", \"Failure\")\r\n        // ***************  Prefilterring *****************************************************************\r\n        | where (isnull(starttime) or TimeGenerated>=starttime)\r\n          and  (isnull(endtime) or TimeGenerated<=endtime)\r\n                      and  (array_length(ip_any)==0 \r\n                or has_any_ipv4_prefix(EventData ,ip_any)\r\n              ) \r\n          and  (isnull(dstportnumber) or EventData has tostring(dstportnumber) ) \r\n          and (array_length(dvcaction)==0 \r\n              or (dvcaction=='Allow' and EventID == 5156)  \r\n              or (dvcaction=='Deny'  and EventID <> 5156)\r\n              )\r\n          and (array_length(hostname_has_any)==0 )\r\n          and (eventresult=='*' or EventResult==eventresult) \r\n        // *************** / Prefilterring *****************************************************************\r\n        | parse EventData with * '<Data Name=\"ProcessID\">'ProcessId:string'</Data>'\r\n            '\\x0d\\x0a  <Data Name=\"Application\">'Application:string'</Data>'\r\n            '\\x0d\\x0a  <Data Name=\"Direction\">'DirectionCode:string'</Data>'\r\n            '\\x0d\\x0a  <Data Name=\"SourceAddress\">'SrcIpAddr:string'</Data>'\r\n            '\\x0d\\x0a  <Data Name=\"SourcePort\">'SrcPortNumber:int'</Data>'\r\n            '\\x0d\\x0a  <Data Name=\"DestAddress\">'DstIpAddr:string'</Data>'\r\n            '\\x0d\\x0a  <Data Name=\"DestPort\">'DstPortNumber:int'</Data>'\r\n            '\\x0d\\x0a  <Data Name=\"Protocol\">'Protocol:int'</Data>'\r\n            '\\x0d\\x0a  <Data Name=\"FilterRTID\">'NetworkRuleNumber:int'</Data>'\r\n            '\\x0d\\x0a  <Data Name=\"LayerName\">'LayerCode'</Data>'\r\n            '\\x0d\\x0a  <Data Name=\"LayerRTID\">'LayerRTID'</Data>'\r\n            '\\x0d\\x0a  <Data Name=\"RemoteUserID\">'RemoteUserID:string'</Data>'\r\n            '\\x0d\\x0a  <Data Name=\"RemoteMachineID\">'RemoteMachineID:string'</Data>'*\r\n            | project-away EventData\r\n            | extend temp_isSrcMatch=has_any_ipv4_prefix(SrcIpAddr,src_or_any)\r\n             , temp_isDstMatch=has_any_ipv4_prefix(DstIpAddr,dst_or_any)\r\n            | extend ASimMatchingIpAddr = case(\r\n            array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, \"-\" // match not requested: probably most common case\r\n            , (temp_isSrcMatch and temp_isDstMatch), \"Both\" // has to be checked before the individual \r\n            , temp_isSrcMatch, \"SrcIpAddr\"\r\n            , temp_isDstMatch, \"DstIpAddr\"\r\n            , \"No match\"\r\n            )\r\n           | where ASimMatchingIpAddr != \"No match\"\r\n           | project-away temp_*\r\n        ;\r\n    union SecurityEvent_5154_5155_5158_5159, SecurityEvent_5156_5157, SecurityEvent_5152\r\n    | lookup Directions on DirectionCode\r\n    | project-rename DvcHostname = Computer\r\n    | extend\r\n          SrcAppName = iff(isOutBound, Application, \"\"),\r\n          DstAppName = iff(not(isOutBound), Application, \"\"),\r\n          SrcDvcId = iff(isOutBound, RemoteMachineID, \"\"),\r\n          DstDvcId = iff(not(isOutBound), RemoteMachineID, \"\"),\r\n          SrcProcessId =  iff(isOutBound, tostring(ProcessId), \"\"),\r\n          DstProcessId =  iff(not(isOutBound), tostring(ProcessId), \"\"),\r\n          DstUserId = iff(isOutBound, RemoteUserID, \"\"),\r\n          SrcUserId = iff(not(isOutBound), RemoteUserID, \"\"),\r\n          DstHostname = iff(isOutBound, \"\", DvcHostname),\r\n          SrcHostname = iff(isOutBound, DvcHostname, \"\")\r\n        | project-away Application, RemoteMachineID, ProcessId, RemoteUserID\r\n          // *************** Postfilterring *****************************************************************\r\n        | where  (isnull(dstportnumber) or DstPortNumber == dstportnumber )\r\n        // *************** / Postfilterring *****************************************************************\r\n    };\r\n//////////////////////////////////////////////////////\r\n// this query extract the data from WindowsEvent table\r\n//////////////////////////////////////////////////////\r\nlet WindowsFirewall_WindowsEvent=(starttime:datetime=datetime(null), endtime:datetime=datetime(null)\r\n, srcipaddr_has_any_prefix:dynamic=dynamic([]), dstipaddr_has_any_prefix:dynamic=dynamic([]), ipaddr_has_any_prefix:dynamic=dynamic([]),dstportnumber:int=int(null)\r\n, hostname_has_any:dynamic=dynamic([]), dvcaction:dynamic=dynamic([]),eventresult:string='*', disabled:bool=false\r\n ){ \r\n    let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \r\n    let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix); \r\n    let ip_any =set_union(srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix);\r\n    WindowsEvent \r\n    | project EventID, EventData, Computer, TimeGenerated, _ResourceId, _SubscriptionId, Type\r\n    | where (isnull(starttime) or TimeGenerated>=starttime) \r\n            and (isnull(endtime) or TimeGenerated<=endtime) \r\n    |where not(disabled)\r\n    | where EventID between (5150 .. 5159)\r\n    | extend EventResult = iff(EventID in (5154, 5156, 5158), \"Success\", \"Failure\")\r\n    // ***************  Prefilterring *****************************************************************\r\n    | where  (isnull(dstportnumber) or EventData has tostring(dstportnumber)) \r\n            and (array_length(ip_any)==0 \r\n                    or has_any_ipv4_prefix(EventData,ip_any)\r\n                 ) \r\n            and (array_length(hostname_has_any)==0 ) \r\n            and (array_length(dvcaction)==0  ) \r\n            and (eventresult=='*' or EventResult==eventresult)\r\n    // *************** Prefilterring *****************************************************************\r\n     | extend SrcIpAddr = tostring(EventData.SourceAddress)\r\n              , DstIpAddr = tostring(EventData.DestAddress)\r\n     | extend temp_isSrcMatch=has_any_ipv4_prefix(SrcIpAddr,src_or_any)\r\n         , temp_isDstMatch=has_any_ipv4_prefix(DstIpAddr,dst_or_any)\r\n     | extend ASimMatchingIpAddr = case(\r\n          array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, \"-\" // match not requested: probably most common case\r\n          , (temp_isSrcMatch and temp_isDstMatch), \"Both\" // has to be checked before the individual \r\n          , temp_isSrcMatch, \"SrcIpAddr\"\r\n          , temp_isDstMatch, \"DstIpAddr\"\r\n          , \"No match\"\r\n  )\r\n  | where ASimMatchingIpAddr != \"No match\"\r\n  | project-away temp_*\r\n  | extend \r\n              EventSeverity=tostring(EventData.Severity),\r\n              LayerCode = tostring(EventData.LayerName),\r\n              NetworkRuleNumber = toint(EventData.FilterRTID),\r\n              Protocol = toint(EventData.Protocol),\r\n              DirectionCode = iff(EventID in (5154, 5155, 5158, 5159), \"%%14609\",tostring(EventData.Direction))\r\n          | lookup Directions on DirectionCode \r\n          | project-rename DvcHostname = Computer\r\n          | extend  SrcAppName = iff(isOutBound, tostring(EventData.Application), \"\"),\r\n                    DstAppName = iff(not(isOutBound), tostring(EventData.Application), \"\"),\r\n                    SrcDvcId = iff(isOutBound, tostring(EventData.RemoteMachineID), \"\"),\r\n                    DstDvcId = iff(not(isOutBound), tostring(EventData.RemoteMachineID), \"\"),\r\n                    SrcPortNumber = toint(EventData.SourcePort),\r\n                    DstPortNumber = toint(EventData.DestPort),\r\n                    SrcProcessId =  iff(isOutBound, tostring(EventData.ProcessId), \"\"),\r\n                    DstProcessId =  iff(not(isOutBound), tostring(EventData.ProcessId), \"\"),\r\n                    DstUserId = iff(isOutBound, tostring(EventData.RemoteUserID), \"\"),\r\n                    SrcUserId = iff(not(isOutBound), tostring(EventData.RemoteUserID), \"\"),\r\n                    DstHostname = iff(isOutBound, \"\", DvcHostname),\r\n                    SrcHostname = iff(isOutBound, DvcHostname, \"\")\r\n          | project-away EventData\r\n        // *************** Postfilterring *****************************************************************\r\n        | where  (isnull(dstportnumber) or DstPortNumber == dstportnumber ) \r\n        // *************** / Postfilterring *****************************************************************\r\n      };\r\n// Main query -> outputs both schemas as one normalized table\r\nunion isfuzzy=true\r\n  WindowsFirewall_SecurityEvent  (starttime, endtime, srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix, dstportnumber, hostname_has_any, dvcaction, eventresult, disabled)\r\n  , WindowsFirewall_WindowsEvent (starttime, endtime, srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix, dstportnumber, hostname_has_any, dvcaction, eventresult, disabled)\r\n    | extend \r\n            DvcAction = iff(EventID in (5154, 5156, 5158), \"Allow\", \"Deny\"),\r\n            DvcOs = 'Windows',\r\n            DstAppType = \"Process\",\r\n            DstUserIdType = \"SID\",\r\n            SrcAppType = \"Process\",\r\n            SrcUserIdType = \"SID\",\r\n            EventType = \"NetworkSession\",\r\n            EventSchema = \"NetworkSession\",\r\n            EventSchemaVersion=\"0.2.3\",\r\n            EventCount=toint(1),\r\n            EventVendor = \"Microsoft\",\r\n            EventProduct = \"Windows Firewall\",\r\n            EventStartTime = TimeGenerated,\r\n            EventEndTime = TimeGenerated,\r\n            EventSeverity = iff(EventID  in (5154, 5156, 5158), \"Informational\", \"Low\")\r\n    // -- Aliases\r\n    | extend \r\n        Dvc = DvcHostname,\r\n        Hostname = DvcHostname,\r\n        IpAddr = SrcIpAddr,\r\n        Src = SrcIpAddr,\r\n        Dst = DstIpAddr,\r\n        Rule = tostring(NetworkRuleNumber),\r\n        DstDvcIdType = iff (DstDvcId != \"\", \"SID\", \"\"),\r\n        SrcDvcIdType = iff (SrcDvcId != \"\", \"SID\", \"\")\r\n    | lookup LayerCodeTable on LayerCode\r\n    | lookup ProtocolTable on Protocol\r\n    | project-away LayerCode, DirectionCode, Protocol, isOutBound, LayerName, EventID, LayerRTID", "params": "starttime:datetime = datetime(null), endtime:datetime = datetime(null), srcipaddr_has_any_prefix:dynamic = dynamic([]), dstipaddr_has_any_prefix:dynamic = dynamic([]), ipaddr_has_any_prefix:dynamic = dynamic([]), dstportnumber:int = int(null), hostname_has_any:dynamic = dynamic([]), dvcaction:dynamic = dynamic([]), eventresult:string = '*', disabled:bool = false"}}