{"_Im_Dns_InfobloxNIOSV03": {"body": "let Sources_by_SourceType=(sourcetype:string){_GetWatchlist('ASimSourceType') | where SearchKey == tostring(sourcetype) | extend Source=column_ifexists('Source','') | where isnotempty(Source)|summarize make_set(Source)};\r\nlet Infoblox=(\r\n  starttime:datetime=datetime(null), endtime:datetime=datetime(null)\r\n  , srcipaddr:string=\"*\"\r\n  , domain_has_any:dynamic=dynamic([]) \r\n  , responsecodename:string=\"*\", response_has_ipv4:string=\"*\"\r\n  , response_has_any_prefix:dynamic=dynamic([]) , eventtype:string=\"Query\"\r\n  , disabled:bool=false\r\n  ){\r\n  let RawData = Syslog | where not(disabled)\r\n  | where ProcessName == \"named\" and SyslogMessage has \"client\"\r\n  | where Computer in (Sources_by_SourceType('InfobloxNIOS'))\r\n  // *****************************************************************\r\n  //  Pre-parsing filterring:\r\n  // This filtering is not accurate. Further filtering down the line\r\n      | where\r\n        (eventtype in~ ('lookup', 'Query'))\r\n        and (isnull(starttime) or TimeGenerated >= starttime)\r\n        and (isnull(endtime) or TimeGenerated <= endtime) \r\n        and (srcipaddr==\"*\" or  has_ipv4( SyslogMessage ,srcipaddr))\r\n        and (array_length(domain_has_any) ==0 or SyslogMessage has_any (domain_has_any))\r\n        and (responsecodename==\"*\" or SyslogMessage has responsecodename)\r\n        and (array_length(response_has_any_prefix)==0 or has_any_ipv4_prefix(SyslogMessage, response_has_any_prefix))\r\n        and (response_has_ipv4=='*' or has_ipv4(SyslogMessage,response_has_ipv4))\r\n  // *****************************************************************\r\n    | extend Parser = extract_all(@\"^(\\d{2}\\-[a-zA-Z]{3}\\-\\d{4}\\s[0-9\\.\\:]+)?\\s?([a-zA-Z-_]+)(\\s|\\:)?(.*)\", dynamic([1,2,3,4]), SyslogMessage)[0]\r\n    | extend ResponseTime = todatetime(Parser[0]),\r\n             Log_Type = tostring(Parser[1]),\r\n             RawData_subString = tostring(Parser[3])\r\n    | where Log_Type == \"client\"\r\n    | project-away Parser;\r\n  RawData \r\n  | extend dnsdata=tostring(extract_all(@\"^(\\d{2}\\-[a-zA-Z]{3}\\-\\d{4}\\s[0-9\\.\\:]+)?\\s?([a-zA-Z-_]+)(\\s|\\:)?(.*)\", dynamic([1,2,3,4]), SyslogMessage)[0][3])\r\n  | extend EventSubType=iff(dnsdata has \"response:\", \"response\", \"request\")\r\n  | extend dnsclient=iff(EventSubType==\"response\"\r\n              //<client ip>#port <UDP or TCP>: [view: DNS view] query: <queried domain name> <class name> <type name> response: <rcode> <flags> [<RR in text format>; [<RR in text format>;] ...]\r\n              , extract_all(@\"^(\\@[a-z0-9]+\\s)?([0-9\\.]+)\\#(\\d+):? (UDP|TCP):? (view: DNS view)?query: (\\S+) ([A-Z]+) (\\S+) response:? ([A-Z]+) (\\S+)(([^;]+;\\s*)*)\",dnsdata)[0]\r\n              //<client IP>#<port> query: <query_Domain name> <class name> <type name> <- or +>[SETDC] <(name server ip)>\r\n              , extract_all(@\"^(\\@[a-z0-9]+\\s)?([0-9\\.]+)\\#(\\d+):? query: (\\S+) (\\S+) (\\S+) ([+-]) \\(([0-9.]+)\\)\",dnsdata)[0])\r\n  | project-away SyslogMessage\r\n  | extend \r\n      SrcIpAddr = tostring(dnsclient[1]),\r\n      DnsQuery = iff (EventSubType==\"response\",tostring(dnsclient[5]), tostring(dnsclient[3])),\r\n      DnsResponseCodeName = iff (EventSubType==\"response\",tostring(dnsclient[8]),\"\")\r\n  // Post-filtering accurately now that message is parsed\r\n  | where\r\n       (srcipaddr==\"*\" or  SrcIpAddr==srcipaddr)\r\n        and (array_length(domain_has_any) ==0 or DnsQuery has_any (domain_has_any))\r\n        and (responsecodename==\"*\" or DnsResponseCodeName has responsecodename)\r\n  | extend\r\n  // ******************* Mandatory\r\n       EventCount=int(1),\r\n       EventStartTime=todatetime(TimeGenerated),\r\n       EventEndTime=todatetime(TimeGenerated),\r\n       EventProduct=\"NIOS\",\r\n       EventVendor=\"Infoblox\",\r\n       EventSchema=\"Dns\",\r\n       EventSchemaVersion=\"0.1.3\",\r\n       EventType=\"Query\", \r\n      EventResult=iff(EventSubType==\"request\" or tostring(dnsclient[8])==\"NOERROR\",\"Success\",\"Failure\"),\r\n       EventResultDetails=iff (EventSubType==\"response\",tostring(dnsclient[8]),\"\"),\r\n       EventSubType=iff(dnsclient has \"response:\", \"response\",\"request\"), \r\n      // \r\n      SrcPortNumber = toint(dnsclient[2]),\r\n      NetworkProtocol = iff (EventSubType==\"response\", tostring(dnsclient[3]),\"\"),        \r\n      DnsQueryClassName = iff (EventSubType==\"response\",tostring(dnsclient[6]),tostring(dnsclient[4])),\r\n      DnsQueryTypeName = iff (EventSubType==\"response\",tostring(dnsclient[7]),tostring(dnsclient[5])),\r\n      DnsFlags =iff (EventSubType==\"response\", tostring(dnsclient[9]),tostring(dnsclient[6])),\r\n      // \r\n      DnsResponseName = iff (EventSubType==\"response\",tostring(dnsclient[-2]),\"\"),\r\n      DstIpAddr=iff(EventSubType==\"response\",\"\",dnsclient[-1])\r\n  // Post filtering step 2\r\n  | where \r\n      (array_length(domain_has_any) ==0 or has_any_ipv4_prefix(DnsResponseName, response_has_any_prefix)) and\r\n      (response_has_ipv4 == '*' or has_ipv4(DnsResponseName,response_has_ipv4))\r\n  | project-rename\r\n     // * Added in version 0.1.1\r\n       DvcHostname=Computer\r\n       , DvcIpAddr=HostIP\r\n     // *\r\n     // **************Aliases\r\n  | extend\r\n    Dvc=DvcHostname,\r\n    Domain=DnsQuery,\r\n    IpAddr=SrcIpAddr,\r\n    Src=SrcIpAddr,\r\n    Dst=DstIpAddr,\r\n  // Backward Compatibility\r\n    Query=DnsQuery\r\n    , QueryTypeName=DnsQueryTypeName\r\n    , ResponseCodeName=DnsResponseCodeName\r\n    , QueryClassName=DnsQueryClassName\r\n    , Flags=DnsFlags\r\n  };\r\n  Infoblox(starttime, endtime, srcipaddr, domain_has_any, responsecodename, response_has_ipv4, response_has_any_prefix, eventtype, disabled)", "params": "starttime:datetime = datetime(null), endtime:datetime = datetime(null), srcipaddr:string = '*', domain_has_any:dynamic = dynamic([]), responsecodename:string = '*', response_has_ipv4:string = '*', response_has_any_prefix:dynamic = dynamic([]), eventtype:string = 'Query', disabled:bool = false"}}