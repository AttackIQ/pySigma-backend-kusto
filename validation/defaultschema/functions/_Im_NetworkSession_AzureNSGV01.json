{"_Im_NetworkSession_AzureNSGV01": {"body": "let DvcActionLookup = datatable(FlowStatus_s:string, DvcAction:string, EventResult:string) [\r\n    'A', 'Allow', 'Success',\r\n    'D', 'Deny', 'Failure',\r\n];\r\nlet NetworkDirectionLookup = datatable(FlowDirection_s:string, NetworkDirection:string, isOutBound:bool) [\r\n    'I', 'Inbound', false,\r\n    'O', 'Outbound', true\r\n];\r\nlet NetworkProtocolLookup = datatable(L4Protocol_s:string, NetworkProtocol:string)[\r\n    'T', 'TCP',\r\n    'U', 'UDP'\r\n];\r\nlet parser = (\r\n      starttime:datetime=datetime(null), \r\n      endtime:datetime=datetime(null),\r\n      srcipaddr_has_any_prefix:dynamic=dynamic([]), \r\n      dstipaddr_has_any_prefix:dynamic=dynamic([]), \r\n      ipaddr_has_any_prefix:dynamic=dynamic([]),\r\n      dstportnumber:int=int(null), \r\n      hostname_has_any:dynamic=dynamic([]), \r\n      dvcaction:dynamic=dynamic([]), \r\n      eventresult:string='*', \r\n      disabled:bool=false)\r\n{\r\n  let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \r\n  let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix); \r\n  let prefilter = (T:(TimeGenerated:datetime, SrcIP_s:string, SrcPublicIPs_s:string, DestIP_s:string, DestPublicIPs_s:string, DestPort_d:real, FlowStatus_s:string, VM1_s:string, VM2_s:string)) { \r\n    T\r\n    | where\r\n      (isnull(dstportnumber) or dstportnumber == toint(DestPort_d)) \r\n    | extend dataSrcIPs = strcat(SrcIP_s,\" \",SrcPublicIPs_s),\r\n             dataDstIPs = strcat(DestIP_s,\" \",DestPublicIPs_s)\r\n    | extend temp_isSrcMatch=has_any_ipv4_prefix(dataSrcIPs,src_or_any)\r\n           , temp_isDstMatch=has_any_ipv4_prefix(dataDstIPs,dst_or_any)\r\n    | extend ASimMatchingIpAddr = case(\r\n          array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, \"-\" // match not requested: probably most common case\r\n          , (temp_isSrcMatch and temp_isDstMatch), \"Both\" // has to be checked before the individual \r\n          , temp_isSrcMatch, \"SrcIpAddr\"\r\n          , temp_isDstMatch, \"DstIpAddr\"\r\n          , \"No match\"\r\n        )\r\n    | where ASimMatchingIpAddr != \"No match\"\r\n    | extend temp_is_MatchSrcHostname = VM1_s has_any (hostname_has_any)\r\n            , temp_is_MatchDstHostname = VM2_s has_any (hostname_has_any)\r\n    | extend ASimMatchingHostname = case(array_length(hostname_has_any) == 0 ,\"-\",\r\n                                temp_is_MatchSrcHostname and temp_is_MatchDstHostname, \"Both\",\r\n                                temp_is_MatchSrcHostname, \"SrcHostname\",\r\n                                temp_is_MatchDstHostname, \"DstHostname\",\r\n                                \"No match\"\r\n                              )\r\n    | where ASimMatchingHostname != \"No match\"\r\n    | project-away temp_*\r\n    | lookup DvcActionLookup on FlowStatus_s\r\n    | where array_length(dvcaction) == 0 or DvcAction in (dvcaction)\r\n    | where (eventresult=='*' or EventResult == eventresult)\r\n  }; // prefilter ends\r\n  let AzureNetworkAnalytics = \r\n    AzureNetworkAnalytics_CL\r\n    | where\r\n     (isnull(starttime) or TimeGenerated >= starttime)\r\n      and  (isnull(endtime) or TimeGenerated <= endtime)\r\n    | where not(disabled) and isnotempty(FlowType_s)\r\n    | lookup NetworkDirectionLookup on FlowDirection_s\r\n  ;\r\n  let AzureNetworkAnalyticsInbound =\r\n    AzureNetworkAnalytics\r\n    | where not(isOutBound)\r\n    | invoke prefilter()\r\n    | project-rename\r\n        DstMacAddr = MACAddress_s\r\n    | extend\r\n        DstBytes = tolong(OutboundBytes_d), // -- size fields seem not to be populated for inbound\r\n        DstPackets = tolong(OutboundPackets_d),\r\n        SrcBytes = tolong(InboundBytes_d),\r\n        SrcPackets = tolong(InboundPackets_d),\r\n        SrcInterfaceName = tostring(split(NIC_s, '/')[1]),\r\n        SrcGeoCountry = toupper(Country_s)\r\n    | extend hostelements=split(VM2_s,'/')\r\n    | extend \r\n        DstFQDN = strcat(hostelements[0], @\"\\\", hostelements[1]),\r\n        DstHostname = tostring(hostelements[1]),\r\n        DstDomain = tostring(hostelements[0]),\r\n        DstDomainType = \"ResourceGroup\"\r\n    | extend Hostname = DstHostname\r\n    | project-away hostelements, isOutBound\r\n  ;  \r\n  let AzureNetworkAnalyticsOutbound =\r\n    AzureNetworkAnalytics\r\n    | where isOutBound\r\n    | invoke prefilter()\r\n    | project-rename\r\n        SrcMacAddr = MACAddress_s\r\n    | extend\r\n        SrcBytes   = tolong(OutboundBytes_d), \r\n        SrcPackets = tolong(OutboundPackets_d),\r\n        DstBytes   = tolong(InboundBytes_d),\r\n        DstPackets = tolong(InboundPackets_d),\r\n        DstInterfaceName = tostring(split(NIC_s, '/')[1]),\r\n        DstGeoCountry = toupper(Country_s)\r\n    | extend hostelements=split(VM1_s,'/')\r\n    | extend \r\n        SrcFQDN = strcat(hostelements[0], @\"\\\", hostelements[1]),\r\n        SrcHostname = tostring(hostelements[1]),\r\n        SrcDomain = tostring(hostelements[0]),\r\n        SrcDomainType = \"ResourceGroup\"\r\n    | extend Hostname = SrcHostname\r\n    | project-away hostelements, isOutBound\r\n  ;\r\n  union AzureNetworkAnalyticsInbound, AzureNetworkAnalyticsOutbound\r\n  | project-rename\r\n      Dvc = NSGList_s,\r\n      DvcSubscriptionId = Subscription_g,\r\n      EventEndTime = FlowEndTime_t,\r\n      EventStartTime = FlowStartTime_t,\r\n      NetworkApplicationProtocol = L7Protocol_s,\r\n      NetworkRuleName = NSGRule_s,\r\n      NetworkSessionId = ConnectionName_s,\r\n      EventOriginalSubType = FlowType_s\r\n  | extend\r\n      DstPortNumber = toint(DestPort_d),\r\n      EventProduct = 'NSGFlow',\r\n      EventSchema = 'NetworkSession',\r\n      EventSchemaVersion='0.2.3',\r\n      EventSeverity = 'Informational', //??\r\n      EventType = 'Flow',\r\n      EventVendor = 'Microsoft',\r\n      EventCount = toint(AllowedInFlows_d+DeniedInFlows_d+AllowedOutFlows_d+DeniedOutFlows_d),\r\n      NetworkDuration = toint((((EventEndTime - datetime(1970-01-01)) / 1s) - ((EventStartTime - datetime(1970-01-01)) / 1s )) * 1000),\r\n      Rule = NetworkRuleName,\r\n      SessionId = NetworkSessionId\r\n  | extend \r\n      DstIpAddr = iff(isnotempty(DestIP_s),\r\n                      DestIP_s,\r\n                      split(DestPublicIPs_s, '|')[0]),\r\n      Duration = NetworkDuration,\r\n      NetworkBytes = tolong(DstBytes + SrcBytes),\r\n      NetworkPackets = tolong(DstPackets + SrcPackets),\r\n      SrcIpAddr = iff(isnotempty(SrcIP_s),\r\n                      SrcIP_s,\r\n                      split(SrcPublicIPs_s, '|')[0])\r\n  | extend\r\n      Dst = DstIpAddr,\r\n      IpAddr = SrcIpAddr,\r\n      Src = SrcIpAddr\r\n  | lookup NetworkProtocolLookup on L4Protocol_s\r\n  | project-keep\r\n      Src*,\r\n      Dst*,\r\n      Event*,\r\n      Dvc*,\r\n      Network*,\r\n      IpAddr,\r\n      Hostname,\r\n      Type,\r\n      Duration,\r\n      SessionId,\r\n      _ResourceId,\r\n      TimeGenerated,\r\n      ASim*\r\n  | project-away *_s\r\n};\r\nparser (starttime, endtime, srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix, dstportnumber, hostname_has_any, dvcaction, eventresult, disabled)", "params": "starttime:datetime = datetime(null), endtime:datetime = datetime(null), srcipaddr_has_any_prefix:dynamic = dynamic([]), dstipaddr_has_any_prefix:dynamic = dynamic([]), ipaddr_has_any_prefix:dynamic = dynamic([]), dstportnumber:int = int(null), hostname_has_any:dynamic = dynamic([]), dvcaction:dynamic = dynamic([]), eventresult:string = '*', disabled:bool = false"}}