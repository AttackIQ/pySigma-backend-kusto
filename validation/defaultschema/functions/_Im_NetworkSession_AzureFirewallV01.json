{"_Im_NetworkSession_AzureFirewallV01": {"body": "let parser = (\r\n      starttime:datetime=datetime(null), \r\n      endtime:datetime=datetime(null), \r\n      srcipaddr_has_any_prefix:dynamic=dynamic([]), \r\n      dstipaddr_has_any_prefix:dynamic=dynamic([]), \r\n      ipaddr_has_any_prefix:dynamic=dynamic([]),\r\n      dstportnumber:int=int(null), \r\n      hostname_has_any:dynamic=dynamic([]), \r\n      dvcaction:dynamic=dynamic([]), \r\n      eventresult:string='*', \r\n      disabled:bool=false)\r\n{\r\n    let ip_any=set_union(srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix);\r\n    let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \r\n    let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix); \r\n    let AzureFirewallNetworkRuleLogs = \r\n        AzureDiagnostics\r\n        | where (isnull(starttime) or TimeGenerated >= starttime) \r\n          and (isnull(endtime)   or TimeGenerated <= endtime) \r\n          and not(disabled)\r\n        | where Category == \"AzureFirewallNetworkRule\"\r\n        | where isnotempty(msg_s)\r\n        | project msg_s, OperationName, SubscriptionId, ResourceId, TimeGenerated, Type, _ResourceId;\r\n    let prefilter = (T: (msg_s:string, TimeGenerated:datetime, OperationName:string)) {\r\n      T | where  \r\n      //(isnull(starttime) or TimeGenerated >= starttime) \r\n       // and (isnull(endtime)   or TimeGenerated <= endtime) \r\n       (array_length(hostname_has_any) == 0)\r\n       and (isnull(dstportnumber) or msg_s has (tostring(dstportnumber)))\r\n       and (array_length(ip_any)==0 \r\n          or has_any_ipv4_prefix(msg_s,ip_any)\r\n        ) \r\n    };\r\n    let AzureFirewallSessionLogs = \r\n        AzureFirewallNetworkRuleLogs\r\n        | where OperationName in (\"AzureFirewallNetworkRuleLog\",\"AzureFirewallThreatIntelLog\")\r\n        // -- pre-filter\r\n        | where (array_length(dvcaction) == 0) or (msg_s has_any (dvcaction))\r\n        | where (eventresult == \"*\") or ((eventresult == \"Success\") and (msg_s has \"Allow\")) or ((eventresult == \"Failure\") and (msg_s has \"Deny\"))\r\n        | invoke prefilter()\r\n        // -- end pre-filter\r\n        | parse-where\r\n            msg_s with           NetworkProtocol:string \r\n            \" request from \"     SrcIpAddr:string\r\n            \":\"                  SrcPortNumber:int\r\n            \" to \"               DstIpAddr:string\r\n            \":\"                  DstPortNumber:int\r\n            \". Action: \"         DvcAction:string\r\n            \".\"                  *\r\n        | project-away msg_s\r\n        | extend temp_isSrcMatch=has_any_ipv4_prefix(SrcIpAddr,src_or_any)\r\n               , temp_isDstMatch=has_any_ipv4_prefix(DstIpAddr,dst_or_any)\r\n         | extend ASimMatchingIpAddr = case(\r\n              array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, \"-\" \r\n              , (temp_isSrcMatch and temp_isDstMatch), \"Both\" // has to be checked before the individual \r\n              , temp_isSrcMatch, \"SrcIpAddr\"\r\n              , temp_isDstMatch, \"DstIpAddr\"\r\n              , \"No match\"\r\n           )\r\n        | project-away temp_*\r\n        | extend NetworkIcmpCode = iff(NetworkProtocol startswith \"ICMP\", toint(extract (\"type=(\\\\d+)\",1,NetworkProtocol)), int(null))\r\n        | extend NetworkIcmpType = iff(isnotnull(NetworkIcmpCode), _ASIM_LookupICMPType(NetworkIcmpCode), \"\")\r\n        | extend NetworkProtocol = iff(NetworkProtocol startswith \"ICMP\", \"ICMP\", NetworkProtocol)\r\n        | extend EventSeverity = case (\r\n            OperationName  == \"AzureFirewallThreatIntelLog\", \"Medium\",\r\n            DvcAction == \"Deny\", \"Low\",\r\n            \"Informational\")\r\n        | extend EventResult = iff(DvcAction == \"Allow\", \"Success\", \"Failure\")\r\n        ;\r\n    let AzureFirewallNATLogs = \r\n        AzureFirewallNetworkRuleLogs\r\n        | where OperationName == \"AzureFirewallNatRuleLog\"\r\n        // -- pre-filter\r\n        | where (array_length(dvcaction) == 0) or (\"Allow\" in (dvcaction))\r\n        | where eventresult in (\"*\", \"Success\")\r\n        | invoke prefilter()\r\n        // -- end pre-filter\r\n        | parse-where\r\n            msg_s with           NetworkProtocol:string \r\n            \" request from \"     SrcIpAddr:string\r\n            \":\"                  SrcPortNumber:int\r\n            \" to \"               DstIpAddr:string\r\n            \":\"                  DstPortNumber:int\r\n            \" was DNAT'ed to \"   DstNatIpAddr:string\r\n            \":\"                  DstNatPortNumber:int\r\n        | project-away msg_s\r\n        | extend temp_isSrcMatch=has_any_ipv4_prefix(SrcIpAddr,src_or_any)\r\n               , temp_isDstMatch=has_any_ipv4_prefix(DstIpAddr,dst_or_any)\r\n         | extend ASimMatchingIpAddr = case(\r\n              array_length(src_or_any) == 0 and array_length(dst_or_any) == 0, \"-\" \r\n              , (temp_isSrcMatch and temp_isDstMatch), \"Both\" // has to be checked before the individual \r\n              , temp_isSrcMatch, \"SrcIpAddr\"\r\n              , temp_isDstMatch, \"DstIpAddr\"\r\n              , \"No match\"\r\n           )\r\n        | project-away temp_*\r\n        | where ASimMatchingIpAddr != \"No match\"\r\n        | extend EventSeverity = \"Informational\"\r\n        | extend EventResult = \"Success\"\r\n        | extend DvcAction = \"Allow\"\r\n        ;\r\n    union AzureFirewallSessionLogs, AzureFirewallNATLogs\r\n    | where \r\n        (isnull(dstportnumber) or DstPortNumber ==dstportnumber)\r\n    // -- end post-filtering\r\n    | extend\r\n        EventVendor=\"Microsoft\",\r\n        EventProduct=\"Azure Firewall\",\r\n        EventType=\"NetworkSession\",\r\n        EventCount=toint(1),\r\n        EventSchemaVersion=\"0.2.3\",\r\n        EventSchema=\"NetworkSession\",\r\n        DvcIdType = \"AzureResourceId\"\r\n    | project-rename\r\n        DvcSubscriptionId = SubscriptionId,\r\n        DvcId = ResourceId\r\n    // -- Aliases\r\n    | extend\r\n        IpAddr = SrcIpAddr,\r\n        Src = SrcIpAddr,\r\n        Dst = DstIpAddr,\r\n        Dvc = DvcId,\r\n        EventStartTime = TimeGenerated,\r\n        EventEndTime = TimeGenerated // ??\r\n    | project-keep\r\n        ASim*,\r\n        Src*,\r\n        Dst*,\r\n        Event*,\r\n        Dvc*,\r\n        IpAddr,\r\n        NetworkIcmpCode,\r\n        NetworkIcmpType,\r\n        NetworkProtocol,\r\n        Type,\r\n        _ResourceId,\r\n        TimeGenerated\r\n};\r\nparser  (starttime, endtime, srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix, dstportnumber, hostname_has_any, dvcaction, eventresult, disabled)", "params": "starttime:datetime = datetime(null), endtime:datetime = datetime(null), srcipaddr_has_any_prefix:dynamic = dynamic([]), dstipaddr_has_any_prefix:dynamic = dynamic([]), ipaddr_has_any_prefix:dynamic = dynamic([]), dstportnumber:int = int(null), hostname_has_any:dynamic = dynamic([]), dvcaction:dynamic = dynamic([]), eventresult:string = '*', disabled:bool = false"}}