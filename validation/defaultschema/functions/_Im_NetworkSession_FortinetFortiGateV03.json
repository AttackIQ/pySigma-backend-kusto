{"_Im_NetworkSession_FortinetFortiGateV03": {"body": "let EventLookup=datatable(DeviceAction:string,DvcAction:string,EventResult:string,EventResultDetails:string)\r\n  [\r\n    \"accept\",\"Allow\",\"Success\",\"\"\r\n    , \"client-rst\",\"Reset Source\",\"Failure\",\"\"\r\n    , \"close\",\"\",\"Success\",\"\"\r\n    , \"deny\",\"Deny\",\"Failure\",\"\"\r\n    , \"ip-conn\",\"\",\"Failure\",\"IP connection error\"\r\n    , \"server-rst\",\"Reset Destination\",\"Failure\",\"\"\r\n    , \"timeout\",\"\",\"Failure\",\"\"\r\n  ];\r\n  // -- See https://docs.fortinet.com/document/fortigate/7.2.4/fortios-log-message-reference/671442/cef-priority-levels\r\n  let SeverityLookup = datatable (EventOriginalSeverity:string, EventSeverity:string)\r\n  [\r\n    \"1\", \"Informational\", // Debug\r\n    \"2\", \"Informational\", // Information\r\n    \"3\", \"Informational\", // Notification\r\n    \"4\", \"Low\", // Warning\r\n    \"5\", \"Low\", // Error\r\n    \"6\", \"Critical\", // High\r\n    \"7\", \"Alert\", // Medium\r\n    \"8\", \"High\" // Emergency\r\n  ];\r\n  let Parser=(starttime:datetime=datetime(null), endtime:datetime=datetime(null), srcipaddr_has_any_prefix:dynamic=dynamic([]), dstipaddr_has_any_prefix:dynamic=dynamic([]), ipaddr_has_any_prefix:dynamic=dynamic([]), dstportnumber:int=int(null), hostname_has_any:dynamic=dynamic([]), dvcaction:dynamic=dynamic([]), eventresult:string='*', disabled:bool=false){\r\n    let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \r\n    let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix); \r\n    CommonSecurityLog\r\n    | where not(disabled)\r\n    | where (isnull(starttime) or TimeGenerated>=starttime) and (isnull(endtime) or TimeGenerated<=endtime)\r\n    | where DeviceVendor == \"Fortinet\" and DeviceProduct startswith \"FortiGate\" and AdditionalExtensions has \"cat=traffic\"\r\n    | where DeviceAction != \"dns\" and Activity !has \"dns\" \r\n    | where (array_length(hostname_has_any)==0)\r\n    | where  (isnull(dstportnumber) or DestinationPort==dstportnumber)\r\n    | extend temp_ResultMatch = case (\r\n        eventresult==\"*\", true,\r\n        (eventresult == \"Success\") and (DeviceAction in (\"accept\", \"close\") or Activity has_any (\"accept\", \"close\")), true,\r\n        (eventresult == \"Failure\") and (DeviceAction !in (\"accept\", \"close\") and not(Activity has_any (\"accept\", \"close\"))), true,\r\n        false\r\n    )\r\n    | where temp_ResultMatch\r\n    | extend temp_SrcMatch=has_any_ipv4_prefix(SourceIP,src_or_any)\r\n      , temp_DstMatch=has_any_ipv4_prefix(DestinationIP,dst_or_any)\r\n    | extend ASimMatchingIpAddr=case(\r\n        array_length(src_or_any) == 0 and array_length(dst_or_any) == 0 ,\"-\",\r\n        temp_SrcMatch and temp_DstMatch, \"Both\",\r\n        temp_SrcMatch, \"SrcIpAddr\",\r\n        temp_DstMatch, \"DstIpAddr\",\r\n        \"No match\"\r\n    )\r\n    | where ASimMatchingIpAddr != \"No match\" \r\n    | parse Activity with \"traffic:forward \" temp_DeviceAction:string \r\n    | extend DeviceAction = coalesce(DeviceAction, temp_DeviceAction)  \r\n    | lookup EventLookup on DeviceAction \r\n    | where (array_length(dvcaction)==0 or DvcAction has_any (dvcaction))\r\n    | project Activity,AdditionalExtensions,DestinationIP,DestinationPort,DeviceAction,DeviceInboundInterface,DeviceOutboundInterface,DeviceProduct,DeviceVersion,LogSeverity,Protocol,ReceivedBytes,SentBytes,SourceIP,SourcePort,TimeGenerated, DeviceExternalID, Type, _ItemId, Computer, EventResult, EventResultDetails, ASimMatchingIpAddr, DvcAction\r\n    | project-rename DstBytes = ReceivedBytes\r\n      , DstInterfaceName = DeviceOutboundInterface\r\n      , DstIpAddr = DestinationIP\r\n      , DstPortNumber = DestinationPort\r\n      , Dvc = Computer\r\n      , EventMessage = Activity\r\n      , EventOriginalSeverity = LogSeverity\r\n      , EventProduct = DeviceProduct\r\n      , EventProductVersion = DeviceVersion\r\n      , SrcBytes = SentBytes\r\n      , SrcInterfaceName = DeviceInboundInterface\r\n      , SrcIpAddr = SourceIP\r\n      , SrcPortNumber = SourcePort\r\n      , DvcId = DeviceExternalID\r\n      , EventUid = _ItemId\r\n    | invoke _ASIM_ResolveNetworkProtocol ('Protocol')\r\n    | project-rename DvcOriginalAction = DeviceAction\r\n    | parse-kv AdditionalExtensions as (\r\n            FortinetFortiGatestart:datetime,\r\n            FortinetFortiGatesrcintfrole:string,\r\n            FortinetFortiGatedstintfrole:string,\r\n            FortinetFortiGateexternalID:string,\r\n            FortinetFortiGatepolicyid:int,\r\n            FortinetFortiGatedstcountry:string,\r\n            FortinetFortiGatesrccountry:string,\r\n            FortinetFortiGatecrscore:string,\r\n            FortinetFortiGateduration:int,\r\n            FortinetFortiGatesentpkt:long,\r\n            FortinetFortiGatercvdpkt:long\r\n        ) with (pair_delimiter=';', kv_delimiter='=')\r\n    | project-rename\r\n        EventStartTime          = FortinetFortiGatestart,\r\n        SrcZone                 = FortinetFortiGatesrcintfrole,\r\n        DstZone                 = FortinetFortiGatedstintfrole,\r\n        NetworkSessionId        = FortinetFortiGateexternalID,\r\n        NetworkRuleNumber       = FortinetFortiGatepolicyid,\r\n        NetworkDuration         = FortinetFortiGateduration,\r\n        DstGeoCountry           = FortinetFortiGatedstcountry,\r\n        SrcGeoCountry           = FortinetFortiGatesrccountry,\r\n        ThreatOriginalRiskLevel = FortinetFortiGatecrscore,\r\n        SrcPackets              = FortinetFortiGatesentpkt,\r\n        DstPackets              = FortinetFortiGatercvdpkt\r\n    | extend EventCount = int(1)\r\n      , EventSchema = \"NetworkSession\"\r\n      , EventSchemaVersion = \"0.2.3\"\r\n      , EventType = \"NetworkSession\"\r\n      , EventVendor = \"Fortinet\"\r\n      , DvcIdType = \"Other\"\r\n      , NetworkBytes = DstBytes + SrcBytes\r\n      , EventEndTime = TimeGenerated\r\n      , EventStartTime = coalesce(EventStartTime, TimeGenerated)\r\n      , NetworkProtocolVersion = case(DstIpAddr contains \".\", \"IPv4\"\r\n          , DstIpAddr contains \":\", \"IPv6\"\r\n          , \"\")\r\n      , NetworkPackets = DstPackets + SrcPackets\r\n      | lookup SeverityLookup on EventOriginalSeverity\r\n      | extend \r\n          Src = SrcIpAddr,\r\n          Dst = DstIpAddr,\r\n          SessionId = NetworkSessionId,\r\n          IpAddr = SrcIpAddr,\r\n          Duration = NetworkDuration,\r\n          Rule = tostring(NetworkRuleNumber)\r\n    | project-away Protocol, AdditionalExtensions, NetworkProtocolNumber\r\n  };\r\n  Parser (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, dstipaddr_has_any_prefix=dstipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, dstportnumber=dstportnumber, hostname_has_any=hostname_has_any, dvcaction=dvcaction, eventresult=eventresult, disabled=disabled)\r\n", "params": "starttime:datetime = datetime(null), endtime:datetime = datetime(null), srcipaddr_has_any_prefix:dynamic = dynamic([]), dstipaddr_has_any_prefix:dynamic = dynamic([]), ipaddr_has_any_prefix:dynamic = dynamic([]), dstportnumber:int = int(null), hostname_has_any:dynamic = dynamic([]), dvcaction:dynamic = dynamic([]), eventresult:string = '*', disabled:bool = false"}}