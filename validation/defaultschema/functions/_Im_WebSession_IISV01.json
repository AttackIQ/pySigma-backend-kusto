{"_Im_WebSession_IISV01": {"body": "let parser=(\r\n  starttime:datetime=datetime(null), \r\n  endtime:datetime=datetime(null),\r\n  srcipaddr_has_any_prefix:dynamic=dynamic([]),\r\n  dstipaddr_has_any_prefix:dynamic=dynamic([]),\r\n  ipaddr_has_any_prefix:dynamic=dynamic([]), \r\n  url_has_any:dynamic=dynamic([]),\r\n  httpuseragent_has_any:dynamic=dynamic([]),\r\n  eventresultdetails_in:dynamic=dynamic([]),\r\n  eventresult:string='*',\r\n  disabled:bool=false\r\n)\r\n{\r\n      let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \r\n      let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix);\r\n      W3CIISLog\r\n      | where not(disabled)\r\n      | where (isnull(starttime) or TimeGenerated >= starttime)\r\n          and (isnull(endtime) or TimeGenerated <= endtime)\r\n      | extend\r\n          EventResult = iff ( toint(scStatus) < 400, \"Success\", \"Failure\")\r\n      | where (eventresult == '*' or EventResult =~ eventresult)\r\n      | where (array_length(url_has_any) == 0 or csUriStem has_any (url_has_any) or csUriQuery has_any (url_has_any))\r\n      | where (array_length(httpuseragent_has_any) == 0 or csUserAgent has_any(httpuseragent_has_any))\r\n      | where (array_length(eventresultdetails_in) == 0 or scStatus has_any (eventresultdetails_in))\r\n      | extend temp_SrcMatch=has_any_ipv4_prefix(cIP,src_or_any)\r\n          , temp_DstMatch=has_any_ipv4_prefix(csHost,dst_or_any)\r\n      | extend ASimMatchingIpAddr=case(\r\n          array_length(src_or_any) == 0 and array_length(dst_or_any) == 0 ,\"-\",\r\n          temp_SrcMatch and temp_DstMatch, \"Both\",\r\n          temp_SrcMatch, \"SrcIpAddr\",\r\n          temp_DstMatch, \"DstIpAddr\",\r\n          \"No match\"\r\n      )\r\n      | where ASimMatchingIpAddr != \"No match\" \r\n      | project-away temp_*\r\n      | extend\r\n              EventResult = iff ( toint(scStatus) < 400, \"Success\", \"Failure\"),\r\n              EventResultDetails = tostring(scStatus), \r\n              csUriQuery = iff(csUriQuery == \"-\", \"\", csUriQuery),\r\n              csUserName = iff(csUserName == \"-\", \"\", csUserName),\r\n              HttpVersion = iff((csVersion has \"HTTP\"), split(csVersion, \"/\")[1], \"\"), // there is a limited chance that something connects over non-HTTP\r\n              HttpHost = iff (sSiteName in (\"Default Web Site\", \"-\"), \"\", sSiteName)\r\n      | project-rename \r\n              HttpRequestMethod = csMethod,\r\n              User = csUserName, //probably won't have this one often\r\n              Dvc = Computer,\r\n              Dst = sIP,\r\n              Src = cIP,\r\n              UserAgent = csUserAgent,\r\n              ThreatCategory = IndicatorThreatType,\r\n              SrcGeoCountry = RemoteIPCountry,\r\n              SrcGeoLatitude = RemoteIPLatitude,\r\n              SrcGeoLongitude = RemoteIPLongitude,\r\n              ThreatOriginalConfidence = Confidence,\r\n              ThreatIpAddr = MaliciousIP,\r\n              EventReportUrl = ReportReferenceLink,\r\n              EventUid = _ItemId,\r\n              DvcId = _ResourceId\r\n      | extend\r\n              EventOriginalSeverity = tostring(Severity),\r\n              ThreatIsActive = tobool(IsActive),\r\n              ThreatFirstReportedTime = todatetime(FirstReportedDateTime),\r\n              ThreatLastReportedTime = todatetime(LastReportedDateTime),\r\n              SrcUsername = iff ( User == \"-\", \"\", User),\r\n              HttpReferrer = iff ( csReferer == \"-\", \"\", csReferer),\r\n              DvcIdType = \"AzureResourceId\"\r\n      | project-away IsActive, FirstReportedDateTime, LastReportedDateTime, Severity, sSiteName\r\n      | extend \r\n              SrcUsernameType = _ASIM_GetUsernameType (SrcUsername),\r\n              DstNatIpAddr = iff(csHost <> \"\", Dst, \"\"),\r\n              EventType = 'WebServerSession',            \r\n              EventVendor = 'Microsoft',\r\n              EventSchemaVersion = '0.2.6',\r\n              EventSchema = 'WebSession', \r\n              EventProduct = 'IIS',\r\n              DvcOs = 'Windows',\r\n              EventCount = int(1),\r\n              SrcIpAddr = Src,\r\n              IpAddr = Src,\r\n              HttpUserAgent = UserAgent,\r\n              HttpStatusCode = tostring(EventResultDetails),\r\n              EventStartTime = ( (TimeGenerated) - (TimeTaken * 1ms)), // TimeTaken field is in Milliseconds \r\n              EventEndTime =  TimeGenerated,\r\n              EventSeverity = iff(EventResult == \"Success\", \"Low\", \"Informational\"),\r\n              Url = iff(csUriQuery == \"\", csUriStem, strcat(csUriStem,\"?\",csUriQuery)),\r\n              sPort = tostring(sPort),\r\n              HttpHost = iff ( HttpHost == \"-\", \"\", HttpHost),\r\n              csHost = iff ( csHost == \"-\", \"\", csHost),  //remove empty values\r\n              EventOriginalResultDetails = iff(scSubStatus <> \"0\", strcat (scStatus, \".\", scSubStatus), scStatus)\r\n      | extend \r\n              ipv6_parts = extract_all (@'^\\[(.+)\\](?:\\:(\\d+))?$',csHost)[0],\r\n              ipv4_parts = extract_all (@'^(\\d+\\.\\d+\\.\\d+\\.\\d+)(?:\\:(\\d+))?$',csHost)[0],\r\n              host_parts = extract_all (@'^([^\\\\\\d:]+)(?:\\:(\\d+))?$',csHost)[0]\r\n      | extend         \r\n              DstIpAddr = tostring(coalesce(ipv4_parts[0], ipv6_parts[0])),\r\n              DstPortNumber = toint(coalesce(ipv4_parts[1], ipv6_parts[1], host_parts[1])),\r\n              HttpHost = tostring(coalesce(host_parts[0], HttpHost))\r\n      | project-away ipv4_parts, ipv6_parts, host_parts              \r\n      | extend\r\n          DstHostname = HttpHost,\r\n          Hostname = HttpHost\r\n      | extend \r\n               ThreatField = case(\r\n                                  ThreatIpAddr <> \"\" and ThreatIpAddr == SrcIpAddr, \"SrcIpAddr\"\r\n                                 ,ThreatIpAddr <> \"\" and ThreatIpAddr == DstIpAddr, \"DstIpAddr\"\r\n                                 ,\"\")\r\n      | project-away \r\n              AdditionalInformation,\r\n              AzureDeploymentID,\r\n              Date,\r\n              Description,\r\n              DvcOs,\r\n              FileOffset,\r\n              FileUri,\r\n              MG, \r\n              ManagementGroupName,\r\n              Role*,\r\n              sComputerName,\r\n              SourceSystem,\r\n              TLPLevel,\r\n              TenantId,\r\n              TimeTaken,\r\n              Time,\r\n              cs*,\r\n              sPort,\r\n              sc*,\r\n              StorageAccount\r\n};\r\nparser (starttime=starttime, endtime=endtime, dstipaddr_has_any_prefix=dstipaddr_has_any_prefix, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, url_has_any=url_has_any, httpuseragent_has_any=httpuseragent_has_any, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)\r\n", "params": "starttime:datetime = datetime(null), endtime:datetime = datetime(null), srcipaddr_has_any_prefix:dynamic = dynamic([]), dstipaddr_has_any_prefix:dynamic = dynamic([]), ipaddr_has_any_prefix:dynamic = dynamic([]), url_has_any:dynamic = dynamic([]), httpuseragent_has_any:dynamic = dynamic([]), eventresultdetails_in:dynamic = dynamic([]), eventresult:string = '*', disabled:bool = false"}}