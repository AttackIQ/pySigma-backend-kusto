{"_Im_NetworkSession_PaloAltoCEFV06": {"body": "let Actions=datatable(DeviceAction:string,DvcAction:string)\r\n[ \"reset client\",\"Reset Source\"\r\n, \"reset server\",\"Reset Destination\"\r\n, \"reset both\", \"Reset\" \r\n, \"allow\",\"Allow\"\r\n, \"deny\",\"Deny\"\r\n, \"drop\", \"Drop\"\r\n, \"drop ICMP\", \"Drop ICMP\"];\r\nlet src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \r\nlet dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix);  \r\nlet NWParser=(starttime:datetime=datetime(null), endtime:datetime=datetime(null), srcipaddr_has_any_prefix:dynamic=dynamic([]), dstipaddr_has_any_prefix:dynamic=dynamic([]), ipaddr_has_any_prefix:dynamic=dynamic([]), dstportnumber:int=int(null), hostname_has_any:dynamic=dynamic([]), dvcaction:dynamic=dynamic([]), eventresult:string='*', disabled:bool=false){\r\nCommonSecurityLog \r\n| where (isnull(starttime) or TimeGenerated>=starttime)\r\n  and     (isnull(endtime) or TimeGenerated<=endtime)\r\n| where not(disabled)\r\n| where DeviceVendor == \"Palo Alto Networks\" and DeviceProduct == \"PAN-OS\" and Activity == \"TRAFFIC\"\r\n| where  (isnull(dstportnumber) or DestinationPort==dstportnumber)\r\n  and (array_length(hostname_has_any)==0)\r\n    // dvcaction - post filterring\r\n    and (eventresult==\"*\" or (DeviceAction==\"allow\" and eventresult==\"Success\") or (eventresult==\"Failure\"))\r\n| extend temp_SrcMatch=has_any_ipv4_prefix(SourceIP,src_or_any)\r\n       , temp_DstMatch=has_any_ipv4_prefix(DestinationIP,dst_or_any)\r\n| extend ASimMatchingIpAddr=case(\r\n                              array_length(src_or_any) == 0 and array_length(dst_or_any) == 0 ,\"-\",\r\n                              temp_SrcMatch and temp_DstMatch, \"Both\",\r\n                              temp_SrcMatch, \"SrcIpAddr\",\r\n                              temp_DstMatch, \"DstIpAddr\",\r\n                              \"No match\"\r\n                          )\r\n  | where ASimMatchingIpAddr != \"No match\" \r\n  | project-away temp_*\r\n| parse AdditionalExtensions with \"PanOSPacketsReceived=\" DstPackets:long * \"PanOSPacketsSent=\" SrcPackets:long *\r\n  // -- Adjustment to support both old and new CSL fields.\r\n| extend \r\n  EventStartTime =  coalesce(\r\n    todatetime(StartTime), \r\n    extract(@'start=(.*?)(?:;|$)',1, AdditionalExtensions,typeof(datetime)),\r\n    datetime(null)\r\n  ),\r\n  EventOriginalResultDetails = coalesce(\r\n    column_ifexists(\"Reason\", \"\"),\r\n    extract(@'reason=(.*?)(?:;|$)',1, AdditionalExtensions, typeof(string)),\r\n    \"\"\r\n  )\r\n| project-rename \r\n      EventProductVersion=DeviceVersion // Not Documented\r\n    , Dvc=DeviceName   \r\n    , NetworkApplicationProtocol=ApplicationProtocol\r\n    , SrcZone=DeviceCustomString4 \r\n    , DstZone=DeviceCustomString5\r\n    , NetworkRuleName=DeviceCustomString1\r\n    , SrcUsername=SourceUserName \r\n    , DstUsername=DestinationUserName \r\n    , EventOriginalSeverity=LogSeverity // not documented\r\n    , SrcNatIpAddr=SourceTranslatedAddress\r\n    , DstNatIpAddr=DestinationTranslatedAddress\r\n    , PaloAltoFlags=FlexString1 // Flags\r\n| extend\r\n  EventVendor=\"Palo Alto\"\r\n    ,EventProduct=\"PanOS\"\r\n    , DstBytes=tolong(ReceivedBytes) \r\n    , SrcBytes=tolong(SentBytes)      \r\n    , NetworkProtocol=toupper(Protocol)\r\n    , NetworkBytes=tolong(FlexNumber1)\r\n    , SrcUsernameType=case(isempty(SrcUsername), \"\", SrcUsername contains \"@\", \"UPN\", \"Simple\")\r\n    , DstUsernameType=case(isempty(DstUsername), \"\", DstUsername contains \"@\", \"UPN\", \"Simple\")\r\n    , EventType=\"NetworkSession\"\r\n    , EventCount=toint(1)\r\n    , EventResult=case(DeviceAction==\"allow\",\"Success\",\"Failure\")\r\n    // -- Adjustment to support both old and new CSL fields.\r\n    , NetworkPackets = coalesce(\r\n        tolong(column_ifexists(\"fieldDeviceCustomNumber2\", long(null))),\r\n        tolong(column_ifexists(\"DeviceCustomNumber2\",long(null)))\r\n      )\r\n    , NetworkSessionId = coalesce(\r\n        tostring(column_ifexists(\"fieldDeviceCustomNumber1\", long(null))),\r\n        tostring(column_ifexists(\"DeviceCustomNumber1\",long(null)))\r\n      )\r\n    , NetworkDuration= coalesce(\r\n        toint(1000*column_ifexists(\"fieldDeviceCustomNumber3\", 0)),\r\n        toint(1000*column_ifexists(\"DeviceCustomNumber3\",0)),\r\n        int(null)\r\n      )\r\n    , EventSchemaVersion=\"0.2.3\"\r\n    , EventSchema=\"NetworkSession\"\r\n    , EventSeverity = \"Informational\"\r\n  | extend hostelements=split(Dvc,'.')\r\n  | extend DvcHostname=tostring(hostelements[0])\r\n        , DvcDomain=strcat_array( array_slice(hostelements,1,-1), '.')\r\n  | extend DvcFQDN = iff(Dvc contains \".\",Dvc,\"\" )\r\n        , DvcDomainType=iff(Dvc contains \".\",\"FQDN\",\"\" )\r\n| project-away hostelements\r\n| lookup Actions on DeviceAction\r\n// Action post filtering\r\n| where (array_length(dvcaction)==0 or DvcAction has_any (dvcaction))\r\n| project-rename\r\n    DstMacAddr=DestinationMACAddress\r\n    , SrcMacAddr=SourceMACAddress\r\n    , DstIpAddr=DestinationIP\r\n    , DstPortNumber=DestinationPort\r\n    , DstNatPortNumber=DestinationTranslatedPort\r\n  , SrcPortNumber=SourcePort\r\n    , SrcIpAddr=SourceIP\r\n  , SrcNatPortNumber=SourceTranslatedPort\r\n  , DvcOutboundInterface=DeviceOutboundInterface\r\n  , DvcInboundInterface=DeviceInboundInterface\r\n  , EventMessage=Message\r\n  , DvcOriginalAction=DeviceAction\r\n// -- Aliases\r\n| extend\r\n  IpAddr = SrcIpAddr,\r\n  Rule=NetworkRuleName,\r\n  Dst=DstIpAddr,\r\n  // Host=DstHostname,\r\n  User=DstUsername,\r\n  Duration=NetworkDuration,\r\n  SessionId=NetworkSessionId,\r\n  EventEndTime =EventStartTime,\r\n  Src=SrcIpAddr\r\n};\r\nNWParser(starttime, endtime, srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix, dstportnumber, hostname_has_any, dvcaction, eventresult, disabled)\r\n", "params": "starttime:datetime = datetime(null), endtime:datetime = datetime(null), srcipaddr_has_any_prefix:dynamic = dynamic([]), dstipaddr_has_any_prefix:dynamic = dynamic([]), ipaddr_has_any_prefix:dynamic = dynamic([]), dstportnumber:int = int(null), hostname_has_any:dynamic = dynamic([]), dvcaction:dynamic = dynamic([]), eventresult:string = '*', disabled:bool = false"}}